/**
 * @file timing.ts
 * @description Performance optimization utilities
 * @module utils
 */
/**
 * Creates a debounced version of a function.
 *
 * @remarks
 * Useful for:
 * - Handling rapid event sequences
 * - Limiting API calls
 * - Performance optimization
 *
 * @param fn - Function to debounce
 * @param delay - Delay in milliseconds
 * @returns Debounced function
 *
 * @example
 * ```ts
 * const handleResize = debounce(() => {
 *   // Expensive calculation
 * }, 100);
 *
 * window.addEventListener('resize', handleResize);
 * ```
 */
export declare const debounce: <T extends (...args: unknown[]) => void>(fn: T, delay: number) => [T, () => void];
/**
 * Creates a requestAnimationFrame-based throttled function.
 *
 * @remarks
 * Optimizes performance by:
 * - Limiting execution to animation frames
 * - Preventing rapid-fire calls
 * - Maintaining visual smoothness
 *
 * @param fn - Function to throttle
 * @returns RAF-throttled function
 *
 * @example
 * ```ts
 * const updateScroll = rafThrottle(() => {
 *   // Update scroll position
 * });
 *
 * document.addEventListener('scroll', updateScroll);
 * ```
 */
export declare const rafThrottle: <T extends (...args: never[]) => void>(fn: T) => T;
