export interface NormalizationOptions {
    /** Base unit for normalization */
    base?: number;
    /** Whether to round to nearest base multiple */
    round?: boolean;
    /** Optional value clamping */
    clamp?: {
        min?: number;
        max?: number;
    };
    /** Suppress warning messages */
    suppressWarnings?: boolean;
}
/**
 * Normalizes CSS values to a consistent format based on base unit.
 *
 * @remarks
 * Handles:
 * - CSS length values
 * - Numeric values
 * - Special values (auto)
 * - Rounding to base unit
 * - Value clamping
 *
 * @param value - Value to normalize
 * @param options - Normalization configuration
 * @returns Normalized numeric value
 *
 * @example
 * ```ts
 * // Base unit normalization
 * normalizeValue(14, { base: 8 })  // => 16
 *
 * // With clamping
 * normalizeValue(14, {
 *   base: 8,
 *   clamp: { min: 8, max: 24 }
 * }) // => 16
 *
 * // Without rounding
 * normalizeValue(14, {
 *   base: 8,
 *   round: false
 * }) // => 14
 * ```
 */
export declare function normalizeValue(value: string | number | undefined, options?: NormalizationOptions): number;
/**
 * Normalizes a pair of CSS values.
 *
 * @param values - Tuple of values to normalize
 * @param defaults - Default values if input is undefined
 * @param options - Normalization options
 * @returns Tuple of normalized values
 *
 * @example
 * ```ts
 * normalizeValuePair(
 *   ['14px', '20px'],
 *   [0, 0],
 *   { base: 8 }
 * ) // => [16, 24]
 * ```
 */
export declare function normalizeValuePair(values: [string | number | undefined, string | number | undefined] | undefined, defaults: [number, number], options?: NormalizationOptions): [number, number];
