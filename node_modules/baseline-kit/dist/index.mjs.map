{"version":3,"file":"index.mjs","sources":["../node_modules/react/cjs/react-jsx-runtime.production.js","../node_modules/react/cjs/react-jsx-runtime.development.js","../node_modules/react/jsx-runtime.js","../src/lib/utils/parse.ts","../src/lib/utils/convert.ts","../src/lib/utils/math.ts","../src/lib/utils/normalize.ts","../src/lib/utils/padding.ts","../src/lib/utils/snapping.ts","../src/lib/utils/merge.ts","../src/lib/utils/timing.ts","../src/lib/hooks/useMeasure.ts","../src/lib/hooks/useVirtual.ts","../src/lib/hooks/useBaseline.ts","../src/lib/hooks/useGuide.ts","../src/lib/hooks/useConfig.ts","../src/lib/hooks/useDebug.ts","../src/lib/components/Config/defaults.ts","../src/lib/components/Config/Config.tsx","../src/lib/components/Spacer/Spacer.tsx","../src/lib/components/Padder/Padder.tsx","../src/lib/components/Layout/Layout.tsx","../src/lib/components/Box/Box.tsx","../src/lib/components/Stack/Stack.tsx","../src/lib/components/Guide/Guide.tsx","../src/lib/components/Guide/validation.ts","../src/lib/components/Baseline/Baseline.tsx","../src/lib/components/types.ts"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n  REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\nfunction jsxProd(type, config, maybeKey) {\n  var key = null;\n  void 0 !== maybeKey && (key = \"\" + maybeKey);\n  void 0 !== config.key && (key = \"\" + config.key);\n  if (\"key\" in config) {\n    maybeKey = {};\n    for (var propName in config)\n      \"key\" !== propName && (maybeKey[propName] = config[propName]);\n  } else maybeKey = config;\n  config = maybeKey.ref;\n  return {\n    $$typeof: REACT_ELEMENT_TYPE,\n    type: type,\n    key: key,\n    ref: void 0 !== config ? config : null,\n    props: maybeKey\n  };\n}\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsx = jsxProd;\nexports.jsxs = jsxProd;\n","/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\n\"production\" !== process.env.NODE_ENV &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE$2\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PORTAL_TYPE:\n          return \"Portal\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_CONTEXT_TYPE:\n            return (type.displayName || \"Context\") + \".Provider\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function disabledLog() {}\n    function disableLogs() {\n      if (0 === disabledDepth) {\n        prevLog = console.log;\n        prevInfo = console.info;\n        prevWarn = console.warn;\n        prevError = console.error;\n        prevGroup = console.group;\n        prevGroupCollapsed = console.groupCollapsed;\n        prevGroupEnd = console.groupEnd;\n        var props = {\n          configurable: !0,\n          enumerable: !0,\n          value: disabledLog,\n          writable: !0\n        };\n        Object.defineProperties(console, {\n          info: props,\n          log: props,\n          warn: props,\n          error: props,\n          group: props,\n          groupCollapsed: props,\n          groupEnd: props\n        });\n      }\n      disabledDepth++;\n    }\n    function reenableLogs() {\n      disabledDepth--;\n      if (0 === disabledDepth) {\n        var props = { configurable: !0, enumerable: !0, writable: !0 };\n        Object.defineProperties(console, {\n          log: assign({}, props, { value: prevLog }),\n          info: assign({}, props, { value: prevInfo }),\n          warn: assign({}, props, { value: prevWarn }),\n          error: assign({}, props, { value: prevError }),\n          group: assign({}, props, { value: prevGroup }),\n          groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),\n          groupEnd: assign({}, props, { value: prevGroupEnd })\n        });\n      }\n      0 > disabledDepth &&\n        console.error(\n          \"disabledDepth fell below zero. This is a bug in React. Please file an issue.\"\n        );\n    }\n    function describeBuiltInComponentFrame(name) {\n      if (void 0 === prefix)\n        try {\n          throw Error();\n        } catch (x) {\n          var match = x.stack.trim().match(/\\n( *(at )?)/);\n          prefix = (match && match[1]) || \"\";\n          suffix =\n            -1 < x.stack.indexOf(\"\\n    at\")\n              ? \" (<anonymous>)\"\n              : -1 < x.stack.indexOf(\"@\")\n                ? \"@unknown:0:0\"\n                : \"\";\n        }\n      return \"\\n\" + prefix + name + suffix;\n    }\n    function describeNativeComponentFrame(fn, construct) {\n      if (!fn || reentry) return \"\";\n      var frame = componentFrameCache.get(fn);\n      if (void 0 !== frame) return frame;\n      reentry = !0;\n      frame = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var previousDispatcher = null;\n      previousDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = null;\n      disableLogs();\n      try {\n        var RunInRootFrame = {\n          DetermineComponentFrameRoot: function () {\n            try {\n              if (construct) {\n                var Fake = function () {\n                  throw Error();\n                };\n                Object.defineProperty(Fake.prototype, \"props\", {\n                  set: function () {\n                    throw Error();\n                  }\n                });\n                if (\"object\" === typeof Reflect && Reflect.construct) {\n                  try {\n                    Reflect.construct(Fake, []);\n                  } catch (x) {\n                    var control = x;\n                  }\n                  Reflect.construct(fn, [], Fake);\n                } else {\n                  try {\n                    Fake.call();\n                  } catch (x$0) {\n                    control = x$0;\n                  }\n                  fn.call(Fake.prototype);\n                }\n              } else {\n                try {\n                  throw Error();\n                } catch (x$1) {\n                  control = x$1;\n                }\n                (Fake = fn()) &&\n                  \"function\" === typeof Fake.catch &&\n                  Fake.catch(function () {});\n              }\n            } catch (sample) {\n              if (sample && control && \"string\" === typeof sample.stack)\n                return [sample.stack, control.stack];\n            }\n            return [null, null];\n          }\n        };\n        RunInRootFrame.DetermineComponentFrameRoot.displayName =\n          \"DetermineComponentFrameRoot\";\n        var namePropDescriptor = Object.getOwnPropertyDescriptor(\n          RunInRootFrame.DetermineComponentFrameRoot,\n          \"name\"\n        );\n        namePropDescriptor &&\n          namePropDescriptor.configurable &&\n          Object.defineProperty(\n            RunInRootFrame.DetermineComponentFrameRoot,\n            \"name\",\n            { value: \"DetermineComponentFrameRoot\" }\n          );\n        var _RunInRootFrame$Deter =\n            RunInRootFrame.DetermineComponentFrameRoot(),\n          sampleStack = _RunInRootFrame$Deter[0],\n          controlStack = _RunInRootFrame$Deter[1];\n        if (sampleStack && controlStack) {\n          var sampleLines = sampleStack.split(\"\\n\"),\n            controlLines = controlStack.split(\"\\n\");\n          for (\n            _RunInRootFrame$Deter = namePropDescriptor = 0;\n            namePropDescriptor < sampleLines.length &&\n            !sampleLines[namePropDescriptor].includes(\n              \"DetermineComponentFrameRoot\"\n            );\n\n          )\n            namePropDescriptor++;\n          for (\n            ;\n            _RunInRootFrame$Deter < controlLines.length &&\n            !controlLines[_RunInRootFrame$Deter].includes(\n              \"DetermineComponentFrameRoot\"\n            );\n\n          )\n            _RunInRootFrame$Deter++;\n          if (\n            namePropDescriptor === sampleLines.length ||\n            _RunInRootFrame$Deter === controlLines.length\n          )\n            for (\n              namePropDescriptor = sampleLines.length - 1,\n                _RunInRootFrame$Deter = controlLines.length - 1;\n              1 <= namePropDescriptor &&\n              0 <= _RunInRootFrame$Deter &&\n              sampleLines[namePropDescriptor] !==\n                controlLines[_RunInRootFrame$Deter];\n\n            )\n              _RunInRootFrame$Deter--;\n          for (\n            ;\n            1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter;\n            namePropDescriptor--, _RunInRootFrame$Deter--\n          )\n            if (\n              sampleLines[namePropDescriptor] !==\n              controlLines[_RunInRootFrame$Deter]\n            ) {\n              if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {\n                do\n                  if (\n                    (namePropDescriptor--,\n                    _RunInRootFrame$Deter--,\n                    0 > _RunInRootFrame$Deter ||\n                      sampleLines[namePropDescriptor] !==\n                        controlLines[_RunInRootFrame$Deter])\n                  ) {\n                    var _frame =\n                      \"\\n\" +\n                      sampleLines[namePropDescriptor].replace(\n                        \" at new \",\n                        \" at \"\n                      );\n                    fn.displayName &&\n                      _frame.includes(\"<anonymous>\") &&\n                      (_frame = _frame.replace(\"<anonymous>\", fn.displayName));\n                    \"function\" === typeof fn &&\n                      componentFrameCache.set(fn, _frame);\n                    return _frame;\n                  }\n                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);\n              }\n              break;\n            }\n        }\n      } finally {\n        (reentry = !1),\n          (ReactSharedInternals.H = previousDispatcher),\n          reenableLogs(),\n          (Error.prepareStackTrace = frame);\n      }\n      sampleLines = (sampleLines = fn ? fn.displayName || fn.name : \"\")\n        ? describeBuiltInComponentFrame(sampleLines)\n        : \"\";\n      \"function\" === typeof fn && componentFrameCache.set(fn, sampleLines);\n      return sampleLines;\n    }\n    function describeUnknownElementTypeFrameInDEV(type) {\n      if (null == type) return \"\";\n      if (\"function\" === typeof type) {\n        var prototype = type.prototype;\n        return describeNativeComponentFrame(\n          type,\n          !(!prototype || !prototype.isReactComponent)\n        );\n      }\n      if (\"string\" === typeof type) return describeBuiltInComponentFrame(type);\n      switch (type) {\n        case REACT_SUSPENSE_TYPE:\n          return describeBuiltInComponentFrame(\"Suspense\");\n        case REACT_SUSPENSE_LIST_TYPE:\n          return describeBuiltInComponentFrame(\"SuspenseList\");\n      }\n      if (\"object\" === typeof type)\n        switch (type.$$typeof) {\n          case REACT_FORWARD_REF_TYPE:\n            return (type = describeNativeComponentFrame(type.render, !1)), type;\n          case REACT_MEMO_TYPE:\n            return describeUnknownElementTypeFrameInDEV(type.type);\n          case REACT_LAZY_TYPE:\n            prototype = type._payload;\n            type = type._init;\n            try {\n              return describeUnknownElementTypeFrameInDEV(type(prototype));\n            } catch (x) {}\n        }\n      return \"\";\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(type, key, self, source, owner, props) {\n      self = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== self ? self : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      if (\n        \"string\" === typeof type ||\n        \"function\" === typeof type ||\n        type === REACT_FRAGMENT_TYPE ||\n        type === REACT_PROFILER_TYPE ||\n        type === REACT_STRICT_MODE_TYPE ||\n        type === REACT_SUSPENSE_TYPE ||\n        type === REACT_SUSPENSE_LIST_TYPE ||\n        type === REACT_OFFSCREEN_TYPE ||\n        (\"object\" === typeof type &&\n          null !== type &&\n          (type.$$typeof === REACT_LAZY_TYPE ||\n            type.$$typeof === REACT_MEMO_TYPE ||\n            type.$$typeof === REACT_CONTEXT_TYPE ||\n            type.$$typeof === REACT_CONSUMER_TYPE ||\n            type.$$typeof === REACT_FORWARD_REF_TYPE ||\n            type.$$typeof === REACT_CLIENT_REFERENCE$1 ||\n            void 0 !== type.getModuleId))\n      ) {\n        var children = config.children;\n        if (void 0 !== children)\n          if (isStaticChildren)\n            if (isArrayImpl(children)) {\n              for (\n                isStaticChildren = 0;\n                isStaticChildren < children.length;\n                isStaticChildren++\n              )\n                validateChildKeys(children[isStaticChildren], type);\n              Object.freeze && Object.freeze(children);\n            } else\n              console.error(\n                \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n              );\n          else validateChildKeys(children, type);\n      } else {\n        children = \"\";\n        if (\n          void 0 === type ||\n          (\"object\" === typeof type &&\n            null !== type &&\n            0 === Object.keys(type).length)\n        )\n          children +=\n            \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\";\n        null === type\n          ? (isStaticChildren = \"null\")\n          : isArrayImpl(type)\n            ? (isStaticChildren = \"array\")\n            : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE\n              ? ((isStaticChildren =\n                  \"<\" +\n                  (getComponentNameFromType(type.type) || \"Unknown\") +\n                  \" />\"),\n                (children =\n                  \" Did you accidentally export a JSX literal instead of a component?\"))\n              : (isStaticChildren = typeof type);\n        console.error(\n          \"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\",\n          isStaticChildren,\n          children\n        );\n      }\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(type, children, self, source, getOwner(), maybeKey);\n    }\n    function validateChildKeys(node, parentType) {\n      if (\n        \"object\" === typeof node &&\n        node &&\n        node.$$typeof !== REACT_CLIENT_REFERENCE\n      )\n        if (isArrayImpl(node))\n          for (var i = 0; i < node.length; i++) {\n            var child = node[i];\n            isValidElement(child) && validateExplicitKey(child, parentType);\n          }\n        else if (isValidElement(node))\n          node._store && (node._store.validated = 1);\n        else if (\n          (null === node || \"object\" !== typeof node\n            ? (i = null)\n            : ((i =\n                (MAYBE_ITERATOR_SYMBOL && node[MAYBE_ITERATOR_SYMBOL]) ||\n                node[\"@@iterator\"]),\n              (i = \"function\" === typeof i ? i : null)),\n          \"function\" === typeof i &&\n            i !== node.entries &&\n            ((i = i.call(node)), i !== node))\n        )\n          for (; !(node = i.next()).done; )\n            isValidElement(node.value) &&\n              validateExplicitKey(node.value, parentType);\n    }\n    function isValidElement(object) {\n      return (\n        \"object\" === typeof object &&\n        null !== object &&\n        object.$$typeof === REACT_ELEMENT_TYPE\n      );\n    }\n    function validateExplicitKey(element, parentType) {\n      if (\n        element._store &&\n        !element._store.validated &&\n        null == element.key &&\n        ((element._store.validated = 1),\n        (parentType = getCurrentComponentErrorInfo(parentType)),\n        !ownerHasKeyUseWarning[parentType])\n      ) {\n        ownerHasKeyUseWarning[parentType] = !0;\n        var childOwner = \"\";\n        element &&\n          null != element._owner &&\n          element._owner !== getOwner() &&\n          ((childOwner = null),\n          \"number\" === typeof element._owner.tag\n            ? (childOwner = getComponentNameFromType(element._owner.type))\n            : \"string\" === typeof element._owner.name &&\n              (childOwner = element._owner.name),\n          (childOwner = \" It was passed a child from \" + childOwner + \".\"));\n        var prevGetCurrentStack = ReactSharedInternals.getCurrentStack;\n        ReactSharedInternals.getCurrentStack = function () {\n          var stack = describeUnknownElementTypeFrameInDEV(element.type);\n          prevGetCurrentStack && (stack += prevGetCurrentStack() || \"\");\n          return stack;\n        };\n        console.error(\n          'Each child in a list should have a unique \"key\" prop.%s%s See https://react.dev/link/warning-keys for more information.',\n          parentType,\n          childOwner\n        );\n        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;\n      }\n    }\n    function getCurrentComponentErrorInfo(parentType) {\n      var info = \"\",\n        owner = getOwner();\n      owner &&\n        (owner = getComponentNameFromType(owner.type)) &&\n        (info = \"\\n\\nCheck the render method of `\" + owner + \"`.\");\n      info ||\n        ((parentType = getComponentNameFromType(parentType)) &&\n          (info =\n            \"\\n\\nCheck the top-level render call using <\" + parentType + \">.\"));\n      return info;\n    }\n    var React = require(\"react\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    Symbol.for(\"react.provider\");\n    var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\"),\n      MAYBE_ITERATOR_SYMBOL = Symbol.iterator,\n      REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      assign = Object.assign,\n      REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"),\n      isArrayImpl = Array.isArray,\n      disabledDepth = 0,\n      prevLog,\n      prevInfo,\n      prevWarn,\n      prevError,\n      prevGroup,\n      prevGroupCollapsed,\n      prevGroupEnd;\n    disabledLog.__reactDisabledLog = !0;\n    var prefix,\n      suffix,\n      reentry = !1;\n    var componentFrameCache = new (\n      \"function\" === typeof WeakMap ? WeakMap : Map\n    )();\n    var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var didWarnAboutKeySpread = {},\n      ownerHasKeyUseWarning = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsx = function (type, config, maybeKey, source, self) {\n      return jsxDEVImpl(type, config, maybeKey, !1, source, self);\n    };\n    exports.jsxs = function (type, config, maybeKey, source, self) {\n      return jsxDEVImpl(type, config, maybeKey, !0, source, self);\n    };\n  })();\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @file parse.ts\n * @description CSS value parsing utilities\n * @module utils\n */\n\n/**\n * Parses a CSS unit string into its numeric value and unit.\n *\n * @remarks\n * Handles:\n * - Integer and decimal values\n * - All CSS units (px, em, rem, etc.)\n * - Percentage values\n * - Sign prefixes (+ and -)\n *\n * @param value - CSS value string to parse\n * @returns Object with value and unit, or null if parsing fails\n *\n * @example\n * ```ts\n * parseUnit('100px')    // => { value: 100, unit: 'px' }\n * parseUnit('1.5rem')   // => { value: 1.5, unit: 'rem' }\n * parseUnit('-20%')     // => { value: -20, unit: '%' }\n * parseUnit('invalid')  // => null\n * ```\n */\nexport function parseUnit(value: string): { value: number; unit: string } | null {\n  const match = value.trim().match(/^([+-]?[\\d.]+)([a-zA-Z%]+)$/)\n  if (!match) return null\n  const num = parseFloat(match[1])\n  const unit = match[2]\n  return { value: num, unit }\n}\n\n/**\n * Formats a value as a valid CSS string.\n *\n * @remarks\n * Handles:\n * - Numbers (adds px suffix)\n * - Special values (auto, 100%, etc.)\n * - Undefined values with defaults\n *\n * @param value - Value to format\n * @param defaultValue - Optional default if value is undefined\n * @returns Formatted CSS string\n *\n * @example\n * ```ts\n * formatValue(14)             // => \"14px\"\n * formatValue('auto')         // => \"auto\"\n * formatValue(undefined, 10)  // => \"10px\"\n * formatValue('1fr')         // => \"1fr\"\n * ```\n */\nexport function formatValue(value: string | number | undefined, defaultValue?: number): string {\n  if (value === undefined && defaultValue !== undefined) return `${defaultValue}px`\n  if (value === 'auto' || (typeof value === 'string' && (/^(auto|100%|0|.*(fr|vh|vw|vmin|vmax|rem))$/).test(value))) {\n    return String(value)\n  }\n  if (typeof value === 'number') return `${value}px`\n  return value ?? ''\n}","/**\n * @file convert.ts\n * @description Unit conversion and dimension calculation utilities\n * @module utils\n */\n\nimport { parseUnit } from './parse'\n\nexport interface ConversionContext {\n  /** Parent element dimension for relative units */\n  parentSize?: number;\n  /** Viewport width for vw units */\n  viewportWidth?: number;\n  /** Viewport height for vh units */\n  viewportHeight?: number;\n  /** Root font size for rem units */\n  rootFontSize?: number;\n  /** Parent font size for em units */\n  parentFontSize?: number;\n}\n\nconst DEFAULT_CONTEXT: Required<ConversionContext> = {\n  parentSize: 0,\n  viewportWidth: typeof window !== 'undefined' ? window.innerWidth : 1920,\n  viewportHeight: typeof window !== 'undefined' ? window.innerHeight : 1080,\n  rootFontSize: 16,\n  parentFontSize: 16,\n}\n\n/** Conversion factors for absolute units to pixels */\nexport const ABSOLUTE_UNIT_CONVERSIONS: Record<string, number> = {\n  px: 1,\n  in: 96,    // 1in = 96px\n  cm: 37.8,  // 1cm = 37.8px\n  mm: 3.78,  // 1mm = 3.78px\n  pt: 1.33,  // 1pt = 1.33px\n  pc: 16,    // 1pc = 16px\n}\n\n/** Supported relative CSS units */\nexport const RELATIVE_UNITS: string[] = ['em', 'rem', 'vh', 'vw', 'vmin', 'vmax', '%']\n\n/**\n * Converts CSS values to pixels.\n *\n * @remarks\n * Handles conversion of:\n * - Absolute units (px, in, cm, mm, pt, pc)\n * - Relative units (em, rem, vh, vw, vmin, vmax, %)\n * - Number values (treated as pixels)\n *\n * @param value - CSS value to convert\n * @param context - Optional context for relative unit conversion\n * @returns Value in pixels or null if conversion fails\n *\n * @example\n * ```ts\n * // Absolute units\n * convertValue('100px') // => 100\n * convertValue('1in')   // => 96\n *\n * // Relative units with context\n * convertValue('50%', { parentSize: 200 }) // => 100\n * convertValue('2em', { parentFontSize: 16 }) // => 32\n * ```\n */\nexport function convertValue(\n  value: number | string | undefined,\n  context?: ConversionContext,\n): number | null {\n  if (typeof value === 'number') return value\n  if (typeof value !== 'string') return null\n\n  const parsed = parseUnit(value)\n  if (!parsed) return null\n\n  const { value: num, unit } = parsed\n\n  // Handle absolute units\n  if (unit in ABSOLUTE_UNIT_CONVERSIONS) {\n    return num * ABSOLUTE_UNIT_CONVERSIONS[unit]\n  }\n\n  // Special case for auto\n  if (unit === 'auto') return null\n\n  // Handle relative units\n  if (RELATIVE_UNITS.includes(unit)) {\n    const ctx = { ...DEFAULT_CONTEXT, ...context }\n    switch (unit) {\n    case 'em':\n      return num * ctx.parentFontSize\n    case 'rem':\n      return num * ctx.rootFontSize\n    case 'vh':\n      return (num / 100) * ctx.viewportHeight\n    case 'vw':\n      return (num / 100) * ctx.viewportWidth\n    case 'vmin':\n      return (num / 100) * Math.min(ctx.viewportWidth, ctx.viewportHeight)\n    case 'vmax':\n      return (num / 100) * Math.max(ctx.viewportWidth, ctx.viewportHeight)\n    case '%':\n      return (num / 100) * ctx.parentSize\n    default:\n      return null\n    }\n  }\n  return null\n}","/**\n * @file math.ts\n * @description Mathematical calculation utilities\n * @module utils\n */\n\nimport { convertValue } from './convert'\n\n/**\n * Calculates the modulo (remainder) of a CSS value when divided by a base unit.\n *\n * @remarks\n * Useful for:\n * - Baseline grid alignment\n * - Spacing calculations\n * - Grid fitting\n *\n * @param value - Input value (number or CSS string)\n * @param base - Base unit to calculate remainder against\n * @param options - Optional calculation controls\n * @returns Remainder in pixel units (e.g., \"6px\")\n *\n * @example\n * ```ts\n * moduloize(14, 8)      // => \"6px\"\n * moduloize('14px', 8)  // => \"6px\"\n * moduloize(14.3, 8, { round: false }) // => \"6.3px\"\n * ```\n */\nexport function moduloize(\n  value: number | string | undefined,\n  base: number,\n  options?: { round?: boolean },\n): string {\n  const doRound = options?.round ?? true\n  const num =\n    value === undefined\n      ? 0\n      : typeof value === 'number'\n        ? value\n        : convertValue(value) ?? 0\n  const normalized = doRound ? Math.round(num) : num\n  const remainder = normalized % base\n  return `${remainder}px`\n}\n\n/**\n * Constrains a number within a specified range.\n *\n * @param value - Number to clamp\n * @param min - Minimum allowed value\n * @param max - Maximum allowed value\n * @returns Clamped value\n *\n * @example\n * ```ts\n * clamp(5, 0, 10)   // => 5\n * clamp(-5, 0, 10)  // => 0\n * clamp(15, 0, 10)  // => 10\n * ```\n */\nexport function clamp(value: number, min: number, max: number): number {\n  return Math.min(Math.max(value, min), max)\n}\n\n/**\n * Rounds a number to specified precision.\n *\n * @remarks\n * Supports:\n * - Positive precision (decimal places)\n * - Negative precision (powers of 10)\n *\n * @param value - Number to round\n * @param precision - Decimal places (default: 0)\n * @returns Rounded number\n *\n * @example\n * ```ts\n * round(1.234, 2)   // => 1.23\n * round(123.4, -1)  // => 120\n * ```\n */\nexport function round(value: number, precision = 0): number {\n  if (precision >= 0) {\n    return Number((Math.round(value * 10 ** precision) / 10 ** precision).toFixed(precision))\n  } else {\n    const factor = 10 ** Math.abs(precision)\n    return Math.round(value / factor) * factor\n  }\n}","/**\n * @file normalize.ts\n * @description Value normalization and standardization utilities\n * @module utils\n */\nimport { convertValue } from './convert'\nimport { clamp } from './math'\n\nexport interface NormalizationOptions {\n  /** Base unit for normalization */\n  base?: number\n  /** Whether to round to nearest base multiple */\n  round?: boolean\n  /** Optional value clamping */\n  clamp?: { min?: number; max?: number }\n  /** Suppress warning messages */\n  suppressWarnings?: boolean\n}\n\n/**\n * Normalizes CSS values to a consistent format based on base unit.\n *\n * @remarks\n * Handles:\n * - CSS length values\n * - Numeric values\n * - Special values (auto)\n * - Rounding to base unit\n * - Value clamping\n *\n * @param value - Value to normalize\n * @param options - Normalization configuration\n * @returns Normalized numeric value\n *\n * @example\n * ```ts\n * // Base unit normalization\n * normalizeValue(14, { base: 8 })  // => 16\n *\n * // With clamping\n * normalizeValue(14, {\n *   base: 8,\n *   clamp: { min: 8, max: 24 }\n * }) // => 16\n *\n * // Without rounding\n * normalizeValue(14, {\n *   base: 8,\n *   round: false\n * }) // => 14\n * ```\n */\nexport function normalizeValue(\n  value: string | number | undefined,\n  options: NormalizationOptions = {}\n): number {\n  const {\n    base = 8,\n    round: doRound = true,\n    clamp: clampOptions,\n    suppressWarnings = false,\n  } = options\n\n  // Handle special cases\n  if (value === 'auto') return base\n\n  // Convert to number\n  let num: number | null = null\n  if (typeof value === 'number') {\n    num = value\n  } else if (typeof value === 'string') {\n    const conv = convertValue(value)\n    if (conv === null) {\n      if (!suppressWarnings) {\n        console.error(\n          `Failed to convert \"${value}\" to pixels. Falling back to base ${base}.`\n        )\n      }\n      num = base\n    } else {\n      num = conv\n    }\n  }\n  if (num === null) num = base\n\n  // Apply normalization\n  const normalized = doRound ? Math.round(num / base) * base : num\n\n  // Apply clamping if needed\n  const clamped =\n    clampOptions !== undefined\n      ? clamp(\n          normalized,\n          clampOptions.min ?? -Infinity,\n          clampOptions.max ?? Infinity\n        )\n      : normalized\n\n  // Warn about adjustments\n  if (!suppressWarnings && clamped !== num) {\n    console.warn(`Normalized ${num} to ${clamped} to match base ${base}px.`)\n  }\n\n  return clamped\n}\n\n/**\n * Normalizes a pair of CSS values.\n *\n * @param values - Tuple of values to normalize\n * @param defaults - Default values if input is undefined\n * @param options - Normalization options\n * @returns Tuple of normalized values\n *\n * @example\n * ```ts\n * normalizeValuePair(\n *   ['14px', '20px'],\n *   [0, 0],\n *   { base: 8 }\n * ) // => [16, 24]\n * ```\n */\nexport function normalizeValuePair(\n  values:\n    | [string | number | undefined, string | number | undefined]\n    | undefined,\n  defaults: [number, number],\n  options?: NormalizationOptions\n): [number, number] {\n  if (!values) return defaults\n\n  if (values[0] === undefined && values[1] === undefined) {\n    return defaults\n  }\n\n  const first =\n    values[0] !== undefined ? normalizeValue(values[0], options) : defaults[0]\n  const second =\n    values[1] !== undefined ? normalizeValue(values[1], options) : defaults[1]\n  return [first, second]\n}\n","import { Padding, PaddingValue, Spacing, SpacingProps } from '@components'\n\n/**\n * Extract numeric top, right, bottom, left (in px) from `padding` or `block/inline`.\n * @param spacing - The props which may include padding, block, inline\n * @returns { top, right, bottom, left } with 0 defaults\n *\n * Priority (if padding is defined, it overrides block/inline):\n * - If `padding` is present, parse it fully (4 edges).\n * - Otherwise, parse `block` for top/bottom and `inline` for left/right.\n */\nexport function parsePadding(spacing: SpacingProps): Padding {\n  if ('padding' in spacing && spacing.padding != null) {\n    return parsePaddingValue(spacing.padding)\n  }\n\n  // Otherwise, parse block/inline separately\n  const blockEdges = 'block' in spacing && spacing.block != null\n    ? parseBlock(spacing.block)\n    : { top: 0, bottom: 0 }\n  const inlineEdges = 'inline' in spacing && spacing.inline != null\n    ? parseInline(spacing.inline)\n    : { left: 0, right: 0 }\n\n  // Merge partial edges\n  return {\n    top: blockEdges.top,\n    right: inlineEdges.right,\n    bottom: blockEdges.bottom,\n    left: inlineEdges.left,\n  }\n}\n\n/**\n * Parses `padding` of various shapes to { top, right, bottom, left } in px.\n *\n * @param padding - number | [block, inline] | [top, right, bottom, left] | { start?: number; end?: number; left?: number; right?: number }\n */\nfunction parsePaddingValue(padding: PaddingValue): Padding {\n  if (typeof padding === 'number') {\n    return { top: padding, right: padding, bottom: padding, left: padding }\n  }\n\n  if (Array.isArray(padding)) {\n    if (padding.length === 2) {\n      const [block, inline] = padding\n      return { top: block, right: inline, bottom: block, left: inline }\n    }\n    if (padding.length >= 4) {\n      const [top, right, bottom, left] = padding\n      return {\n        top: top ?? 0,\n        right: right ?? 0,\n        bottom: bottom ?? 0,\n        left: left ?? 0,\n      }\n    }\n  }\n\n  if (typeof padding === 'object' && !Array.isArray(padding)) {\n    // possible keys: top, bottom, left, right, start, end\n    // interpret start => top, end => bottom if you prefer\n    const top = padding.top ?? 0\n    const bottom = padding.bottom ?? 0\n    const left = padding.left ?? 0\n    const right = padding.right ?? 0\n    return { top, right, bottom, left }\n  }\n\n  // fallback\n  return { top: 0, right: 0, bottom: 0, left: 0 }\n}\n\n/**\n * Parses `block` of various shapes to { top, bottom } in px.\n * @param block - number | [top, bottom] | { start?: number; end?: number }\n */\nfunction parseBlock(block: Spacing): Pick<Padding, 'top' | 'bottom'> {\n  if (typeof block === 'number') {\n    return { top: block, bottom: block }\n  }\n\n  // [top, bottom]\n  if (Array.isArray(block)) {\n    const [top, bottom] = block\n    return {\n      top: top ?? 0,\n      bottom: bottom ?? 0,\n    }\n  }\n\n  // object { start, end }\n  if (typeof block === 'object') {\n    return {\n      top: block.start ?? 0,\n      bottom: block.end ?? 0,\n    }\n  }\n\n  return { top: 0, bottom: 0 }\n}\n\n/**\n * Parses `inline` of various shapes to { left, right } in px.\n * @param inline - number | [left, right] | { start?: number; end?: number }\n */\nfunction parseInline(inline: Spacing): Pick<Padding, 'left' | 'right'> {\n  if (typeof inline === 'number') {\n    return { left: inline, right: inline }\n  }\n\n  if (Array.isArray(inline)) {\n    const [left, right] = inline\n    return {\n      left: left ?? 0,\n      right: right ?? 0,\n    }\n  }\n\n  if (typeof inline === 'object') {\n    return {\n      left: inline.start ?? 0,\n      right: inline.end ?? 0,\n    }\n  }\n\n  return { left: 0, right: 0 }\n}","/**\n * @file snapping.ts\n * @description Baseline grid snapping utilities\n * @module utils\n */\n\nimport { SnappingMode, Padding, PaddingValue } from '@components'\nimport { parsePadding } from '@/utils/padding'\n\n/**\n * Calculates spacing adjustments to maintain baseline grid alignment.\n *\n * @remarks\n * Provides different snapping behaviors:\n * - none: No adjustments\n * - height: Adjusts bottom padding only\n * - clamp: Adjusts both top and bottom padding\n *\n * @param height - Measured element height\n * @param base - Grid base unit\n * @param initial - Initial spacing values\n * @param snapping - Snapping mode to apply\n * @returns Adjusted spacing values\n *\n * @example\n * ```ts\n * // Height snapping mode\n * calculateSnappedSpacing(46, 8, { top: 10, bottom: 10 }, 'height')\n * // => { top: 10, right: 0, bottom: 12, left: 0 }\n *\n * // Clamp mode\n * calculateSnappedSpacing(45, 8, { top: 10, bottom: 6 }, 'clamp')\n * // => { top: 2, right: 0, bottom: 1, left: 0 }\n * ```\n */\nexport function calculateSnappedSpacing(\n  height: number,\n  base: number,\n  initial: PaddingValue,\n  snapping: SnappingMode,\n): Padding {\n  const pad: Padding = parsePadding({ padding: initial })\n\n  if (snapping === 'none') {\n    return pad\n  }\n\n  if (snapping === 'height') {\n    const remainder = height % base\n    if (remainder !== 0) {\n      pad.bottom += base - remainder\n    }\n  }\n\n  if (snapping === 'clamp') {\n    pad.top = pad.top % base\n    const remainder = height % base\n    if (remainder !== 0) {\n      pad.bottom += base - remainder\n    }\n    pad.bottom = pad.bottom % base\n  }\n\n  return pad\n}","/**\n * @file merge.ts\n * @description Style and class merging utilities\n * @module utils\n */\n\nimport * as React from 'react'\n\n/**\n * Combines class names, filtering out falsy values.\n *\n * @remarks\n * - Filters out false, null, undefined\n * - Trims whitespace\n * - Preserves order of classes\n *\n * @param classes - Array of potential class names\n * @returns Combined class string\n *\n * @example\n * ```ts\n * mergeClasses('btn', isActive && 'active', undefined)\n * // => \"btn active\"\n * ```\n */\nexport const mergeClasses = (\n  ...classes: Array<string | boolean | undefined | null>\n): string => classes.filter(Boolean).join(' ').trim()\n\n/**\n * Combines multiple style objects with type safety.\n *\n * @remarks\n * - Preserves type information\n * - Handles undefined values\n * - Merges deeply nested styles\n *\n * @param styles - Array of style objects\n * @returns Combined style object\n *\n * @example\n * ```ts\n * mergeStyles(\n *   { color: 'red' },\n *   isLarge && { fontSize: '2em' },\n *   customStyles\n * )\n * ```\n */\nexport const mergeStyles = <T extends React.CSSProperties>(\n  ...styles: Array<T | undefined>\n): T => Object.assign({}, ...styles.filter((style): style is T => style !== undefined))\n\n/**\n * Assigns a value to a React ref.\n */\nfunction assignRef<T>(ref: React.Ref<T> | null | undefined, node: T | null): void {\n  if (!ref) return\n  if (typeof ref === 'function') {\n    ref(node)\n  } else {\n    try {\n      Object.assign(ref, { current: node })\n    } catch (error) {\n      console.error('Error assigning ref:', error)\n    }\n  }\n}\n\n/**\n * Merges multiple React refs into a single callback ref.\n *\n * @remarks\n * Handles:\n * - Function refs\n * - Object refs\n * - Undefined/null refs\n *\n * @param refs - Array of refs to merge\n * @returns Combined ref callback\n *\n * @example\n * ```tsx\n * const Component = React.forwardRef((props, ref) => {\n *   const localRef = useRef(null);\n *   const combinedRef = mergeRefs(ref, localRef);\n *\n *   return <div ref={combinedRef} />;\n * });\n * ```\n */\nexport function mergeRefs<T>(\n  ...refs: Array<React.Ref<T> | null | undefined>\n): React.RefCallback<T> {\n  return (node: T | null) => {\n    refs.forEach(ref => {\n      assignRef(ref, node)\n    })\n  }\n}","/**\n * @file timing.ts\n * @description Performance optimization utilities\n * @module utils\n */\n\n/**\n * Creates a debounced version of a function.\n *\n * @remarks\n * Useful for:\n * - Handling rapid event sequences\n * - Limiting API calls\n * - Performance optimization\n *\n * @param fn - Function to debounce\n * @param delay - Delay in milliseconds\n * @returns Debounced function\n *\n * @example\n * ```ts\n * const handleResize = debounce(() => {\n *   // Expensive calculation\n * }, 100);\n *\n * window.addEventListener('resize', handleResize);\n * ```\n */\nexport const debounce = <T extends (...args: unknown[]) => void>(\n  fn: T,\n  delay: number,\n): [T, () => void] => {\n  let timer: ReturnType<typeof setTimeout> | null = null\n\n  const cancel = () => {\n    if (timer) {\n      clearTimeout(timer)\n      timer = null\n    }\n  }\n\n  const debounced = ((...args) => {\n    cancel()\n    timer = setTimeout(() => fn(...args), delay)\n  }) as T\n\n  return [debounced, cancel]\n}\n\n/**\n * Creates a requestAnimationFrame-based throttled function.\n *\n * @remarks\n * Optimizes performance by:\n * - Limiting execution to animation frames\n * - Preventing rapid-fire calls\n * - Maintaining visual smoothness\n *\n * @param fn - Function to throttle\n * @returns RAF-throttled function\n *\n * @example\n * ```ts\n * const updateScroll = rafThrottle(() => {\n *   // Update scroll position\n * });\n *\n * document.addEventListener('scroll', updateScroll);\n * ```\n */\nexport const rafThrottle = <T extends (...args: never[]) => void>(\n  fn: T,\n): T => {\n  let rafId: number | null = null\n  let lastArgs: Parameters<T> | null = null\n\n  const throttled = (...args: Parameters<T>) => {\n    lastArgs = args\n\n    if (rafId !== null) {\n      cancelAnimationFrame(rafId)\n    }\n\n    rafId = requestAnimationFrame(() => {\n      fn(...lastArgs!)\n      rafId = null\n      lastArgs = null\n    })\n  }\n\n  return throttled as T\n}\n","import * as React from 'react'\nimport { rafThrottle } from '@utils'\n\nexport interface MeasureResult {\n  /** Measured width in pixels */\n  width: number;\n  /** Measured height in pixels */\n  height: number;\n  /** Function to force a remeasurement */\n  refresh: () => void;\n}\n\n/**\n * Hook for measuring and tracking DOM element dimensions.\n *\n * Provides responsive element measurements using ResizeObserver,\n * with performance optimization (via RAF throttling), error handling,\n * and a manual refresh method.\n *\n * @param ref - Reference to the DOM element to measure\n * @returns Current dimensions and refresh function\n *\n * @example\n * ```tsx\n * function ResponsiveBox() {\n *   const ref = React.useRef<HTMLDivElement>(null);\n *   const { width, height, refresh } = useMeasure(ref);\n *\n *   return (\n *     <div ref={ref} className=\"responsive-box\">\n *       Width: {width}px, Height: {height}px\n *       <button onClick={refresh}>Remeasure</button>\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useMeasure(ref: React.RefObject<HTMLElement | null>): MeasureResult {\n  const [dimensions, setDimensions] = React.useState({ width: 0, height: 0 })\n\n  // measure() reads getBoundingClientRect() from ref.current\n  const measure = React.useCallback(() => {\n    if (!ref.current) return\n    try {\n      const rect = ref.current.getBoundingClientRect()\n      const next = {\n        width: rect ? Math.round(rect.width) : 0,\n        height: rect ? Math.round(rect.height) : 0,\n      }\n      setDimensions(prev =>\n        prev.width === next.width && prev.height === next.height ? prev : next,\n      )\n    } catch (error) {\n      setDimensions({ width: 0, height: 0 })\n    }\n  }, [ref])\n\n  // Create a throttled version of measure using RAF.\n  const refresh = React.useMemo(() => rafThrottle(measure), [measure])\n\n  // On mount (or when ref changes) perform an immediate measurement.\n  React.useLayoutEffect(() => {\n    measure()\n  }, [measure])\n\n  // Set up a ResizeObserver on mount.\n  React.useLayoutEffect(() => {\n    if (!ref.current) return\n    const observer = new ResizeObserver(() => {\n      refresh()\n    })\n    observer.observe(ref.current)\n    return () => {\n      observer.disconnect()\n    }\n  }, [ref, refresh])\n\n  return { ...dimensions, refresh }\n}\n","/**\n * @file useVirtual Hook\n * @description Manages virtual scrolling calculations\n * @module hooks\n */\n\nimport { RefObject, useCallback, useLayoutEffect, useMemo, useState } from 'react'\nimport { rafThrottle } from '@utils'\n\ntype VirtualResult = {\n  /** Total number of items/lines to virtualize */\n  totalLines: number;\n  /** Height of each item in pixels */\n  lineHeight: number;\n  /** Reference to the scrollable container */\n  containerRef: RefObject<HTMLDivElement | null>;\n  /** Additional items to render above/below viewport */\n  buffer?: number | string;\n}\n\n/**\n * Hook for optimizing large lists through virtual scrolling.\n *\n * @remarks\n * This hook helps manage virtual scrolling by:\n * - Calculating visible item ranges\n * - Handling scroll events efficiently\n * - Managing buffer zones for smooth scrolling\n * - Supporting dynamic container sizes\n *\n * Performance optimizations:\n * - RAF-based scroll handling\n * - Intersection Observer for visibility\n * - Buffer zones to prevent flicker\n * - Efficient range calculations\n *\n * @param options - Virtual scrolling configuration\n * @returns Object containing start and end indices of visible items\n *\n * @example\n * ```tsx\n * function VirtualList() {\n *   const containerRef = useRef<HTMLDivElement>(null);\n *   const { start, end } = useVirtual({\n *     totalLines: 1000,\n *     lineHeight: 30,\n *     containerRef,\n *     buffer: 5\n *   });\n *\n *   return (\n *     <div ref={containerRef} className=\"scroll-container\">\n *       <div style={{ height: 1000 * 30 }}>\n *         {items.slice(start, end).map(item => (\n *           <div key={item.id} style={{ height: 30 }}>\n *             {item.content}\n *           </div>\n *         ))}\n *       </div>\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useVirtual({\n  totalLines,\n  lineHeight,\n  containerRef,\n  buffer = 0,\n}: VirtualResult) {\n  // Convert buffer to numeric value\n  const numericBuffer = useMemo(() =>\n    typeof buffer === 'number' ? buffer : parseInt(buffer, 10) || 0\n  , [buffer])\n\n  /**\n   * Calculates the visible range of items based on scroll position\n   * and viewport dimensions.\n   */\n  const calculateRange = useCallback(() => {\n    const element = containerRef.current\n    if (!element) return { start: 0, end: totalLines }\n\n    // Show all lines if container is inside .content-block\n    if (element.closest('.block')) {\n      return { start: 0, end: totalLines }\n    }\n\n    // Calculate visible range\n    const rect = element.getBoundingClientRect()\n    const offsetTop = rect.top + window.scrollY\n    const viewportTop = Math.max(0, window.scrollY - offsetTop - numericBuffer)\n    const viewportBottom = viewportTop + window.innerHeight + numericBuffer * 2\n\n    const start = Math.max(0, Math.floor(viewportTop / lineHeight))\n    const end = Math.min(totalLines, Math.ceil(viewportBottom / lineHeight))\n\n    return { start, end }\n  }, [totalLines, lineHeight, containerRef, numericBuffer])\n\n  const [visibleRange, setVisibleRange] = useState(calculateRange)\n\n  // Subscribe to window events using our helper\n  useWindowEvents(['scroll', 'resize'], () => {\n    updateRangeThrottled()\n  })\n\n\n  // Throttle updates for performance\n  const updateRange = useCallback(() => {\n    setVisibleRange(prev => {\n      const next = calculateRange()\n      return prev.start !== next.start || prev.end !== next.end ? next : prev\n    })\n  }, [calculateRange])\n\n  const updateRangeThrottled = useMemo(() => rafThrottle(updateRange), [updateRange])\n\n  useLayoutEffect(() => {\n    const element = containerRef.current\n    if (!element) return\n\n    // Use IntersectionObserver for visibility tracking\n    const observer = new IntersectionObserver(updateRangeThrottled, { threshold: 0 })\n    observer.observe(element)\n    updateRangeThrottled()\n\n    return () => {\n      observer.disconnect()\n    }\n  }, [containerRef, calculateRange, updateRangeThrottled])\n\n  return visibleRange\n}\n\n/** Helper hook to manage multiple window event listeners. */\nfunction useWindowEvents(events: string[], handler: () => void) {\n  const stableHandler = useCallback(handler, [handler])\n\n  useLayoutEffect(() => {\n    const wrappedHandler = () => stableHandler()\n    events.forEach(evt => window.addEventListener(evt, wrappedHandler))\n    return () => events.forEach(evt => window.removeEventListener(evt, wrappedHandler))\n  }, [events, stableHandler])\n}\n\n","import { useMemo, useRef, RefObject } from 'react'\nimport { useMeasure } from './useMeasure'\nimport { calculateSnappedSpacing } from '@utils'\nimport type { SnappingMode, Padding } from '@components'\nimport { parsePadding } from '@utils'\n\nexport interface BaselineOptions {\n  /* Base unit for alignment (default 8). */\n  base?: number\n  /** Snapping strategy: 'none' | 'height' | 'clamp'. */\n  snapping?: SnappingMode\n  /** Initial padding config.  e.g. { top: 10, bottom: 20 } or just 8, etc. */\n  spacing?: Partial<Padding> | number\n  /** Whether to warn in the console if the measured height is not a multiple of base. */\n  warnOnMisalignment?: boolean\n}\n\nexport interface BaselineResult {\n  padding: Padding\n  isAligned: boolean\n  height: number\n}\n\n/**\n *  Hook for managing baseline grid alignment in components.\n *\n *  @remarks\n *  This hook handles the complex calculations needed to maintain baseline grid\n *  alignment, including:\n *    ▪\tMeasuring element dimensions\n *    ▪\tCalculating padding adjustments\n *    ▪\tPotentially snapping values to ensure multiples of the base\n *    ▪\tWarning about misalignments in development\n *\n *  Different snapping modes affect how spacing is adjusted:\n *    ▪\t'none': Uses raw spacing values without adjustment\n *    ▪\t'height': Adjusts only the final (bottom) padding to align\n *    ▪\t'clamp': Adjusts top and bottom to align\n *\n *  @param ref Reference to the DOM element\n *  @param options Configuration options for alignment behavior\n *  @returns Object with adjusted padding, alignment status, and height\n *\n *  @example\n *  function MyComponent() {\n *  const ref = useRef<HTMLDivElement>(null)\n *  const { padding, isAligned } = useBaseline(ref, {\n *  base: 8,\n *  snapping: 'height',\n *  spacing: { top: 10, bottom: 20 },\n *  warnOnMisalignment: true,\n *  })\n *\n *  return (\n *  <div\n *    ref={ref}\n *    style={{\n *      paddingTop: padding.top,\n *      paddingBottom: padding.bottom,\n *    }}\n *  >\n *    Content\n *  </div>\n *  )\n *  }\n */\nexport function useBaseline(\n  ref: RefObject<HTMLElement | null>,\n  {\n    base = 8,\n    snapping = 'none',\n    spacing = {},\n    warnOnMisalignment = false,\n  }: BaselineOptions = {},\n): BaselineResult {\n  if (base < 1) {\n    throw new Error('Base must be >= 1 for baseline alignment.')\n  }\n  // Measure the element’s dimensions (via ResizeObserver).\n  const { height } = useMeasure(ref)\n  // Track whether we've already snapped once for this component.\n  const didSnapRef = useRef<boolean>(false)\n  return useMemo(() => {\n    // Convert the spacing prop into { top, right, bottom, left } numeric values.\n    const initialPadding = parsePadding({ padding: spacing })\n    const isAligned = height % base === 0\n    if (!isAligned && warnOnMisalignment && process.env.NODE_ENV === 'development') {\n      console.warn(\n        `[useBaseline] Element height (${height}px) is not aligned with base (${base}px).`,\n      )\n    }\n\n    // If snapping is disabled, just return the original padding.\n    if (snapping === 'none') {\n      return { padding: initialPadding, isAligned, height }\n    }\n\n    // If we've already snapped once, just reuse the original (or store the\n    // snapped result in a ref if you prefer).\n    if (didSnapRef.current) {\n      return { padding: initialPadding, isAligned, height }\n    }\n\n    // Snap exactly once.\n    const finalPadding = calculateSnappedSpacing(height, base, initialPadding, snapping)\n    didSnapRef.current = true\n\n    return { padding: finalPadding, isAligned, height }\n  }, [base, snapping, spacing, warnOnMisalignment, height])\n}","/**\n * @file useGuide Hook\n * @description Manages grid layout calculations for guide overlays\n * @module hooks\n */\n\nimport { useMemo, RefObject } from 'react'\nimport { GuideConfig, GuideColumnsPattern, isValidGuidePattern } from '@components'\nimport { formatValue, convertValue, normalizeValue } from '@utils'\nimport { useMeasure } from './useMeasure'\n\nexport interface GuideResult {\n  /** CSS grid template string */\n  template: string;\n  /** Total number of columns */\n  columnsCount: number;\n  /** Final gap size in pixels */\n  calculatedGap: number;\n  /** Whether the configuration is valid */\n  isValid: boolean;\n}\n\n/**\n * Hook for calculating grid layout parameters based on container dimensions.\n *\n * @remarks\n * This hook handles complex grid calculations for different layout variants:\n * - 'line': Evenly spaced vertical lines\n * - 'pattern': Custom repeating column patterns\n * - 'fixed': Set number of columns with optional width\n * - 'auto': Dynamic columns based on available space\n *\n * Key features:\n * - Responsive grid calculations\n * - Pattern validation\n * - Gap management\n * - Error handling\n *\n * @param ref - Reference to container element\n * @param config - Grid configuration object\n * @returns Grid calculation results\n *\n * @example\n * ```tsx\n * function GridOverlay() {\n *   const ref = useRef<HTMLDivElement>(null);\n *   const { template, columnsCount } = useGuide(ref, {\n *     variant: 'fixed',\n *     columns: 12,\n *     gap: 16,\n *     base: 8\n *   });\n *\n *   return (\n *     <div\n *       ref={ref}\n *       style={{\n *         display: 'grid',\n *         gridTemplateColumns: template,\n *         gap: calculatedGap\n *       }}\n *     >\n *       {Array(columnsCount).fill(null).map((_, i) => (\n *         <div key={i} className=\"grid-line\" />\n *       ))}\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useGuide(\n  ref: RefObject<HTMLElement | null>,\n  config: GuideConfig,\n): GuideResult {\n  const { width } = useMeasure(ref)\n\n  return useMemo(() => {\n    // Default values\n    const variant = config.variant ?? 'line'\n    const gap = normalizeValue(config.gap ?? 0, {base: 1})\n\n    // Return invalid result if no width\n    if (!width) {\n      return {\n        template: 'none',\n        columnsCount: 0,\n        calculatedGap: 0,\n        isValid: false,\n      }\n    }\n\n    try {\n      switch (variant) {\n      case 'line': {\n        // Simple vertical lines\n        const columns = Math.max(1, Math.floor(width / (gap + 1)) + 1)\n        return {\n          template: `repeat(${columns}, 1px)`,\n          columnsCount: columns,\n          calculatedGap: gap,\n          isValid: true,\n        }\n      }\n\n      case 'pattern': {\n        // Custom column pattern\n        if (!isValidGuidePattern(config.columns)) {\n          throw new Error('Invalid \"pattern\" columns array')\n        }\n        const columnsArr = (config.columns as GuideColumnsPattern).map(col => {\n          if (typeof col === 'number') return `${col}px`\n          return col\n        })\n\n        // Validate no zero widths\n        if (columnsArr.some(c => c === '0' || c === '0px')) {\n          return {\n            template: 'none',\n            columnsCount: 0,\n            calculatedGap: 0,\n            isValid: false,\n          }\n        }\n\n        return {\n          template: columnsArr.join(' '),\n          columnsCount: columnsArr.length,\n          calculatedGap: gap,\n          isValid: true,\n        }\n      }\n\n      case 'fixed': {\n        // Fixed number of columns\n        const colCount = typeof config.columns === 'number' ? config.columns : 0\n        if (colCount < 1) {\n          throw new Error(`Invalid columns count: ${colCount}`)\n        }\n        const colWidth = config.columnWidth\n          ? formatValue(config.columnWidth)\n          : '1fr'\n\n        return {\n          template: `repeat(${colCount}, ${colWidth})`,\n          columnsCount: colCount,\n          calculatedGap: gap,\n          isValid: true,\n        }\n      }\n\n      case 'auto': {\n        // Auto-fitting columns\n        const colWidth = config.columnWidth ?? 'auto'\n        if (colWidth === 'auto') {\n          return {\n            template: 'repeat(auto-fit, minmax(0, 1fr))',\n            columnsCount: 1,\n            calculatedGap: gap,\n            isValid: true,\n          }\n        }\n        const colWidthStr =\n          typeof colWidth === 'number' ? `${colWidth}px` : colWidth.toString()\n\n        const pxVal = convertValue(colWidthStr) ?? 0\n        const columns = pxVal > 0\n          ? Math.max(1, Math.floor((width + gap) / (pxVal + gap)))\n          : 1\n\n        return {\n          template: `repeat(auto-fit, minmax(${colWidthStr}, 1fr))`,\n          columnsCount: columns,\n          calculatedGap: gap,\n          isValid: true,\n        }\n      }\n\n      default: {\n        // Fallback to line variant\n        console.warn(\n          `[useGuide] Unknown variant \"${variant}\". Falling back to \"line\".`,\n        )\n        const columns = Math.max(1, Math.floor(width / (gap + 1)) + 1)\n        return {\n          template: `repeat(${columns}, 1px)`,\n          columnsCount: columns,\n          calculatedGap: gap,\n          isValid: true,\n        }\n      }\n      }\n    } catch (error) {\n      console.warn('Error in useGuide:', error)\n      return {\n        template: 'none',\n        columnsCount: 0,\n        calculatedGap: 0,\n        isValid: false,\n      }\n    }\n  }, [config, width])\n}","/**\n * @file useConfig Hook\n * @description Manages component-specific theme configuration\n * @module hooks\n */\n\nimport { useMemo } from 'react'\nimport { Config, useDefaultConfig } from '@components'\n\n/** Type helper that merges base configuration with component-specific settings. */\nexport type ComponentConfig<K extends keyof Config> = Config[K] & {\n  /** Base unit for spacing calculations */\n  base: number\n}\n\n/**\n * Hook for accessing component-specific theme configuration.\n *\n * @remarks\n * This hook provides:\n * - Access to component-specific theme settings\n * - Automatic base unit inheritance\n * - Memoized configuration to prevent unnecessary updates\n * - Type-safe configuration access\n *\n * It merges:\n * - Global base unit settings\n * - Component-specific configurations\n * - Theme-based color schemes\n *\n * @param component - Name of the component requesting configuration\n * @returns Merged configuration for the specific component\n *\n * @example\n * ```tsx\n * function Box() {\n *   const config = useConfig('box');\n *\n *   return (\n *     <div style={{\n *       '--box-base': `${config.base}px`,\n *       '--box-color': config.colors.line\n *     }}>\n *       {children}\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useConfig<K extends keyof Config>(component: K): ComponentConfig<K> {\n  const defaultConfig = useDefaultConfig()\n  return useMemo(() => {\n    return Object.assign(\n      { base: defaultConfig.base },\n      defaultConfig[component],\n    ) as ComponentConfig<K>\n  }, [defaultConfig, component])\n}","/**\n * @file useDebug Hook\n * @description Manages component debugging state\n * @module hooks\n */\n\nimport { useMemo } from 'react'\nimport { DebuggingMode } from '@components'\n\ninterface DebugResult {\n  /** Whether debug visuals should be shown */\n  isShown: boolean;\n  /** Whether debug features exist but are hidden */\n  isHidden: boolean;\n  /** Whether debug features are disabled */\n  isNone: boolean;\n  /** Current debugging mode */\n  debugging: DebuggingMode | undefined;\n}\n\n/**\n * Hook for managing component debug state and visibility.\n *\n * @remarks\n * Determines the active debugging mode by:\n * - Using prop value if provided\n * - Falling back to config value if prop is undefined\n * - Computing visibility states based on active mode\n *\n * This hook helps components:\n * - Control debug visual rendering\n * - Manage debug feature states\n * - Handle prop/config inheritance\n *\n * @param debuggingProp - Optional debugging mode from props\n * @param debuggingConfig - Debugging mode from theme/config\n * @returns Debug state information\n *\n * @example\n * ```tsx\n * function DebugComponent({ debugging: debugProp }) {\n *   const { isShown, isHidden, isNone } = useDebug(\n *     debugProp,\n *     'hidden' // Default from config\n *   );\n *\n *   return (\n *     <div>\n *       {isShown && <DebugOverlay />}\n *       {!isNone && <DebugFeatures />}\n *       <Content />\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useDebug(\n  debuggingProp?: DebuggingMode,\n  debuggingConfig?: DebuggingMode,\n): DebugResult {\n  return useMemo(() => {\n    const effective = debuggingProp ?? debuggingConfig\n    return {\n      isShown: effective === 'visible',\n      isHidden: effective === 'hidden',\n      isNone: effective === 'none',\n      debugging: effective,\n    }\n  }, [debuggingProp, debuggingConfig])\n}","/**\n * @file defaults.ts\n * @description Default theme and configuration values for baseline-kit\n * @module baseline-kit/components/Config\n */\n\nimport type { Config } from './Config'\n\n/**\n * CSS variable-based color configuration for Guide component.\n * Maps each guide variant to its theme color.\n */\nconst GUIDE_COLORS = {\n  /** Color for single-line guides */\n  line: 'var(--bk-guide-color-line-theme)',\n  /** Color for pattern-based guides */\n  pattern: 'var(--bk-guide-color-pattern-theme)',\n  /** Color for auto-calculated guides */\n  auto: 'var(--bk-guide-color-auto-theme)',\n  /** Color for fixed-column guides */\n  fixed: 'var(--bk-guide-color-fixed-theme)',\n} as const\n\n/**\n * CSS variable-based color configuration for Baseline component.\n */\nconst BASELINE_COLORS = {\n  /** Color for line variant */\n  line: 'var(--bk-baseline-color-line-theme)',\n  /** Color for flat/block variant */\n  flat: 'var(--bk-baseline-color-flat-theme)',\n} as const\n\n/**\n * CSS variable-based color configuration for Spacer component.\n */\nconst SPACER_COLORS = {\n  /** Color for line-style spacers */\n  line: 'var(--bk-spacer-color-line-theme)',\n  /** Color for flat/block spacers */\n  flat: 'var(--bk-spacer-color-flat-theme)',\n  /** Color for measurement indicators */\n  text: 'var(--bk-spacer-color-text-theme)',\n} as const\n\n/**\n * CSS variable-based color configuration for Box component.\n */\nconst BOX_COLORS = {\n  /** Border color for debug outline */\n  line: 'var(--bk-box-color-line-theme)',\n  /** Background color for debug mode */\n  flat: 'var(--bk-box-color-flat-theme)',\n  /** Color for measurement indicators */\n  text: 'var(--bk-box-color-text-theme)',\n} as const\n\n/**\n * CSS variable-based color configuration for Stack/Flex component.\n */\nconst STACK_COLORS = {\n  /** Border color for debug outline */\n  line: 'var(--bk-stack-color-line-theme)',\n  /** Background color for debug mode */\n  flat: 'var(--bk-stack-color-flat-theme)',\n  /** Color for measurement indicators */\n  text: 'var(--bk-stack-color-text-theme)',\n} as const\n\n/**\n * CSS variable-based color configuration for Layout component.\n */\nconst LAYOUT_COLORS = {\n  /** Border color for debug outline */\n  line: 'var(--bk-layout-color-line-theme)',\n  /** Background color for debug mode */\n  flat: 'var(--bk-layout-color-flat-theme)',\n  /** Color for measurement indicators */\n  text: 'var(--bk-layout-color-text-theme)',\n} as const\n\n/** CSS variable for Padder component color */\nconst PADDER_COLOR = 'var(--bk-padder-color-theme)'\n\n/**\n * Default configuration for baseline-kit.\n *\n * @remarks\n * Provides the base configuration for all components including:\n * - Base unit for spacing calculations (8px default)\n * - Default component variants\n * - Initial debugging modes\n * - Theme color assignments\n *\n * Each component section includes:\n * - Visual variant selection (where applicable)\n * - Debugging mode setting\n * - Color theme assignments\n *\n * The configuration is marked as const to ensure type safety\n * and prevent accidental modifications.\n */\nexport const DEFAULT_CONFIG: Config = {\n  /** Base unit for spacing calculations (in pixels) */\n  base: 8,\n\n  /** Baseline grid configuration */\n  baseline: {\n    variant: 'line',\n    debugging: 'hidden',\n    colors: BASELINE_COLORS,\n  },\n\n  /** Guide overlay configuration */\n  guide: {\n    variant: 'line',\n    debugging: 'hidden',\n    colors: GUIDE_COLORS,\n  },\n\n  /** Spacer component configuration */\n  spacer: {\n    variant: 'line',\n    debugging: 'hidden',\n    colors: SPACER_COLORS,\n  },\n\n  /** Box component configuration */\n  box: {\n    debugging: 'hidden',\n    colors: BOX_COLORS,\n  },\n\n  /** Stack/Flex component configuration */\n  stack: {\n    debugging: 'hidden',\n    colors: STACK_COLORS,\n  },\n\n  /** Layout component configuration */\n  layout: {\n    debugging: 'hidden',\n    colors: LAYOUT_COLORS,\n  },\n\n  /** Padder component configuration */\n  padder: {\n    debugging: 'hidden',\n    color: PADDER_COLOR,\n  },\n} as const","/**\n * @file Config Component\n * @description Theme and configuration provider for baseline-kit components\n * @module components\n */\n\nimport * as React from 'react'\nimport { BaselineVariant } from '@components'\nimport { DEFAULT_CONFIG } from './defaults'\nimport type { GuideVariant, Variant } from '../types'\n\n/**\n * Controls component debugging visibility and behavior.\n *\n * @remarks\n * - `none`: Debug features are fully disabled\n * - `hidden`: Debug elements exist in DOM but are not visible\n * - `visible`: Debug elements are fully rendered and visible\n */\nexport type DebuggingMode = 'none' | 'hidden' | 'visible'\n\n/** Color configuration for component themes. */\ntype Colors = {\n  /** Color for line-based visuals */\n  line: string;\n  /** Color for flat surface visuals */\n  flat: string;\n  /** Color for measurement indicators */\n  text: string;\n}\n\n/** Complete configuration schema for baseline-kit. */\nexport type Config = {\n  /** Base unit for spacing calculations */\n  base: number;\n  /** Guide component configuration */\n  guide: {\n    variant: GuideVariant;\n    debugging: DebuggingMode;\n    colors: Record<GuideVariant, string>;\n  };\n  /** Baseline component configuration */\n  baseline: {\n    variant: BaselineVariant;\n    debugging: DebuggingMode;\n    colors: Record<BaselineVariant, string>;\n  };\n  /** Stack component configuration */\n  stack: {\n    colors: Colors;\n    debugging: DebuggingMode;\n  };\n  /** Layout component configuration */\n  layout: {\n    colors: Colors;\n    debugging: DebuggingMode;\n  };\n  /** Spacer component configuration */\n  spacer: {\n    variant: Variant;\n    debugging: DebuggingMode;\n    colors: Colors;\n  };\n  /** Box component configuration */\n  box: {\n    colors: Colors;\n    debugging: DebuggingMode;\n  };\n  /** Padder component configuration */\n  padder: {\n    color: string;\n    debugging: DebuggingMode;\n  };\n}\n\nconst ConfigContext = React.createContext<Config | null>(null)\nConfigContext.displayName = 'ConfigContext'\n\nexport const useDefaultConfig = () => React.use(ConfigContext) ?? DEFAULT_CONFIG\n\ntype ConfigProps = {\n  children: React.ReactNode;\n  /** Base unit for spacing calculations */\n  base?: number;\n  /** Baseline component overrides */\n  baseline?: Partial<Config['baseline']>;\n  /** Flex component overrides */\n  stack?: Partial<Config['stack']>;\n  /** Layout component overrides */\n  layout?: Partial<Config['layout']>;\n  /** Guide component overrides */\n  guide?: Partial<Config['guide']>;\n  /** Spacer component overrides */\n  spacer?: Partial<Config['spacer']>;\n  /** Box component overrides */\n  box?: Partial<Config['box']>;\n  /** Padder component overrides */\n  padder?: Partial<Config['padder']>;\n}\n\n/** Creates CSS variables from the configuration object. */\nexport const createCSSVariables = ({\n  base,\n  baseline,\n  guide,\n  stack,\n  spacer,\n  layout,\n  box,\n  padder,\n}: Config): Record<string, string> => ({\n  '--bkb': `${base}px`,\n\n  // Baseline Colors\n  '--bkbcl': baseline.colors.line,\n  '--bkbcf': baseline.colors.flat,\n\n  // Guide Colors\n  '--bkgcl': guide.colors.line,\n  '--bkgcp': guide.colors.pattern,\n  '--bkgca': guide.colors.auto,\n  '--bkgcf': guide.colors.fixed,\n\n  // Spacer Colors\n  '--bkscl': spacer.colors.line,\n  '--bkscf': spacer.colors.flat,\n  '--bksci': spacer.colors.text,\n\n  // Box Colors\n  '--bkxcl': box.colors.line,\n  '--bkxcf': box.colors.flat,\n  '--bkxci': box.colors.text,\n\n  // Flex Colors\n  '--bkkcl': stack.colors.line,\n  '--bkkcf': stack.colors.flat,\n  '--bkkci': stack.colors.text,\n\n  // Layout Colors\n  '--bklcl': layout.colors.line,\n  '--bklcf': layout.colors.flat,\n  '--bklci': layout.colors.text,\n\n  // Padder Color\n  '--bkpc': padder.color,\n})\n\n/**\n * Configuration provider for baseline-kit components.\n *\n * @remarks\n * Config provides theme and debugging settings to all nested components.\n * It allows for:\n * - Global base unit configuration\n * - Component-specific color themes\n * - Debug mode control\n * - Visual style customization\n *\n * Configs can be nested to override settings for specific sections.\n *\n * @example\n * ```tsx\n * // Basic global configuration\n * <Config base={8}>\n *   <App />\n * </Config>\n *\n * // Component-specific overrides\n * <Config\n *   base={8}\n *   guide={{\n *     debugging: \"visible\",\n *     colors: {\n *       line: \"rgba(255,0,0,0.2)\",\n *       pattern: \"rgba(0,0,255,0.2)\"\n *     }\n *   }}\n * >\n *   <Layout>...</Layout>\n * </Config>\n *\n * // Nested configurations\n * <Config base={8}>\n *   <div>Uses 8px base</div>\n *   <Config base={4}>\n *     <div>Uses 4px base</div>\n *   </Config>\n * </Config>\n * ```\n */\nexport function Config({\n  children,\n  base,\n  stack,\n  baseline,\n  guide,\n  layout,\n  spacer,\n  box,\n  padder,\n}: ConfigProps) {\n  const parentConfig = useDefaultConfig()\n\n  const value = React.useMemo(() => {\n    const newConfig: Config = {\n      base: base ?? parentConfig.base,\n      baseline: { ...parentConfig.baseline, ...baseline },\n      guide: { ...parentConfig.guide, ...guide },\n      spacer: { ...parentConfig.spacer, ...spacer },\n      box: { ...parentConfig.box, ...box },\n      stack: { ...parentConfig.stack, ...stack },\n      layout: { ...parentConfig.layout, ...layout },\n      padder: { ...parentConfig.padder, ...padder },\n    }\n\n    return {\n      ...newConfig,\n      cssVariables: createCSSVariables(newConfig),\n    }\n  }, [\n    base,\n    parentConfig.base,\n    parentConfig.baseline,\n    parentConfig.guide,\n    parentConfig.spacer,\n    parentConfig.box,\n    parentConfig.stack,\n    parentConfig.layout,\n    parentConfig.padder,\n    baseline,\n    guide,\n    spacer,\n    box,\n    stack,\n    layout,\n    padder,\n  ])\n\n  return (\n    <ConfigContext value={value}>\n      {children}\n    </ConfigContext>\n  )\n}","/**\n * @file Spacer Component\n * @description Flexible spacing element with measurement indicators\n * @module components\n */\n\nimport * as React from 'react'\nimport { useConfig, useDebug } from '@hooks'\nimport { mergeStyles, mergeClasses, formatValue, normalizeValuePair } from '@utils'\nimport { ComponentsProps, Variant } from '../types'\nimport styles from './styles.module.css'\n\nexport type IndicatorNode = (\n  value: number,\n  dimension: 'width' | 'height',\n) => React.ReactNode\n\nexport type SpacerProps = {\n  /** Render function for custom measurement display */\n  indicatorNode?: IndicatorNode;\n  /** Visual style when debugging is enabled */\n  variant?: Variant;\n  /** Base unit for measurements (defaults to theme value) */\n  base?: number;\n  /** Color override for visual indicators */\n  color?: string;\n} & ComponentsProps\n\nexport const Spacer = React.memo(function Spacer({\n  height,\n  width,\n  indicatorNode,\n  debugging,\n  variant: variantProp,\n  base: baseProp,\n  color: colorProp,\n  className,\n  style,\n  ...props\n}: SpacerProps) {\n  const ref = React.useRef<HTMLDivElement>(null)\n  const config = useConfig('spacer')\n\n  const { isShown } = useDebug(debugging, config.debugging)\n  const variant = variantProp ?? config.variant\n  const base = baseProp ?? config.base\n\n  const [normWidth, normHeight] = normalizeValuePair(\n    [width, height], [0, 0], { base, suppressWarnings: true },\n  )\n\n  const measurements = React.useMemo(() => {\n    if (!isShown || !indicatorNode) return null\n\n    return [\n      normHeight !== 0 && (\n        <span key=\"height\">\n          {indicatorNode(normHeight, 'height')}\n        </span>\n      ),\n      normWidth !== 0 && (\n        <span key=\"width\">\n          {indicatorNode(normWidth, 'width')}\n        </span>\n      ),\n    ].filter(Boolean)\n  }, [isShown, indicatorNode, normHeight, normWidth])\n\n  // IMPORTANT: Correct default key for spacer base, using \"--bk-spacer-base\"\n  const defaultSpacerStyles: Record<string, string> = React.useMemo(() => ({\n    '--bksh': '100%',\n    '--bksw': '100%',\n    '--bksb': `${config.base}px`,\n    '--bksci': 'var(--bk-spacer-color-text-theme)',\n    '--bkscl': 'var(--bk-spacer-color-line-theme)',\n    '--bkscf': 'var(--bk-spacer-color-flat-theme)',\n  }), [config.base])\n\n  const getStyleOverride = React.useCallback(\n    (key: string, value: string): Record<string, string | number> => {\n      // For width/height, if the computed value is \"100%\" skip inline injection\n      if ((key === '--bksw' || key === '--bksh') && value === '100%') {\n        return {}\n      }\n      return value !== defaultSpacerStyles[key] ? { [key]: value } : {}\n    },\n    [defaultSpacerStyles],\n  )\n\n  const containerStyles = React.useMemo(() => {\n    const heightValue = formatValue(normHeight || '100%')\n    const widthValue = formatValue(normWidth || '100%')\n    const baseValue = `${baseProp || config.base}px`\n\n    const customStyles = {\n      ...getStyleOverride('--bksh', heightValue),\n      ...getStyleOverride('--bksw', widthValue),\n      ...getStyleOverride('--bksb', baseValue),\n      ...getStyleOverride(\n        '--bksci',\n        colorProp ?? config.colors.text,\n      ),\n      ...getStyleOverride(\n        '--bkscl',\n        colorProp ?? config.colors.line,\n      ),\n      ...getStyleOverride(\n        '--bkscf',\n        colorProp ?? config.colors.flat,\n      ),\n    } as React.CSSProperties\n\n    return mergeStyles(customStyles, style)\n  }, [getStyleOverride, normHeight, normWidth, config.base, colorProp,\n    config.colors.text, config.colors.line, config.colors.flat, style])\n\n  return (\n    <div\n      ref={ref}\n      data-testid=\"spacer\"\n      className={mergeClasses(styles.spr, isShown && styles[variant], className)}\n      data-variant={variant}\n      style={containerStyles}\n      {...props}\n    >\n      {measurements}\n    </div>\n  )\n})","/**\n * @file Padder Component\n * @description Low-level padding management with visual debugging\n * @module components\n */\n\nimport * as React from 'react'\nimport { useConfig, useDebug, useBaseline } from '@hooks'\nimport {\n  mergeClasses,\n  mergeStyles,\n  parsePadding,\n  mergeRefs,\n  formatValue,\n} from '@utils'\nimport { ComponentsProps } from '../types'\nimport { IndicatorNode, Spacer } from '../Spacer'\nimport styles from './styles.module.css'\n\ntype RenderSpacerFn = (\n  width: React.CSSProperties['width'],\n  height: React.CSSProperties['height']\n) => React.ReactNode\n\ntype PadderProps = {\n  /** Render function for custom measurement indicators */\n  indicatorNode?: IndicatorNode\n  children?: React.ReactNode\n} & ComponentsProps\n\n/**\n * A foundational component that manages consistent padding with visual debugging.\n *\n * @remarks\n * Padder is a low-level utility that:\n * - Applies consistent padding around content\n * - Supports visual debugging of spacing\n * - Maintains baseline grid alignment\n * - Uses Spacer components for visual padding representation\n *\n * When debugging is enabled (`\"visible\"` or `\"hidden\"`), padding is represented\n * using Spacer components. When debugging is `\"none\"`, direct CSS padding is\n * applied for better performance.\n *\n * @example\n * ```tsx\n * // Basic usage\n * <Padder block={16} inline={8}>\n *   <div>Content with consistent padding</div>\n * </Padder>\n *\n * // With debug visuals and custom indicators\n * <Padder\n *   block={[8, 16]}\n *   inline={[16, 24]}\n *   debugging=\"visible\"\n *   indicatorNode={(value, dim) => (\n *     <span className=\"text-sm\">{dim}: {value}px</span>\n *   )}\n * >\n *   <div>Content with visible padding guides</div>\n * </Padder>\n *\n * // Direct padding mode\n * <Padder\n *   block={16}\n *   inline={24}\n *   debugging=\"none\"\n * >\n *   <div>Content with direct CSS padding</div>\n * </Padder>\n * ```\n */\nexport const Padder = React.memo(\n  React.forwardRef<HTMLDivElement, PadderProps>(function Padder(\n    {\n      children,\n      className,\n      debugging: debuggingProp,\n      height,\n      indicatorNode,\n      style,\n      width,\n      ...spacingProps\n    },\n    ref\n  ) {\n    const config = useConfig('padder')\n    const { variant } = useConfig('spacer')\n    const initialPadding = React.useMemo(\n      () => parsePadding(spacingProps),\n      [spacingProps]\n    )\n    const { isShown, isNone, debugging } = useDebug(\n      debuggingProp,\n      config.debugging\n    )\n    const enableSpacers = !isNone\n\n    const internalRef = React.useRef<HTMLDivElement | null>(null)\n    const {\n      padding: { top, left, bottom, right },\n    } = useBaseline(internalRef, {\n      base: config.base,\n      snapping: 'height',\n      spacing: initialPadding,\n      warnOnMisalignment: !isNone,\n    })\n\n    const setRefs = mergeRefs(ref, internalRef)\n\n    const containerStyles = React.useMemo(() => {\n      const stylesObj: Record<string, string> = {}\n\n      // Only inject width/height if they differ from defaults\n      if (width !== 'fit-content') {\n        stylesObj['--bkpw'] = formatValue(width || 'fit-content')\n      }\n      if (height !== 'fit-content') {\n        stylesObj['--bkph'] = formatValue(height || 'fit-content')\n      }\n      // Only inject base if it differs from theme\n      if (config.base !== 8) {\n        stylesObj['--bkpb'] = `${config.base}px`\n      }\n      // Only inject color if it differs from theme\n      if (config.color !== 'var(--bk-padder-color-theme)') {\n        stylesObj['--bkpc'] = config.color\n      }\n\n      // When spacers are disabled (i.e. debugging === \"none\"), add direct padding styles\n      if (!enableSpacers) {\n        if (top > 0 || bottom > 0) {\n          stylesObj.paddingBlock = `${top}px ${bottom}px`\n        }\n        if (left > 0 || right > 0) {\n          stylesObj.paddingInline = `${left}px ${right}px`\n        }\n      }\n\n      return mergeStyles(stylesObj as React.CSSProperties, style)\n    }, [\n      width,\n      height,\n      config.base,\n      config.color,\n      enableSpacers,\n      top,\n      right,\n      bottom,\n      left,\n      style,\n    ])\n\n    const renderSpacer: RenderSpacerFn = (widthVal, heightVal) => (\n      <Spacer\n        variant={variant}\n        debugging={debugging}\n        indicatorNode={indicatorNode}\n        height={heightVal !== '100%' ? heightVal : undefined}\n        width={widthVal !== '100%' ? widthVal : undefined}\n      />\n    )\n\n    // When debugging is \"none\", simply return a container with direct CSS padding\n    // and no additional grid/Spacer elements.\n    if (!enableSpacers) {\n      return (\n        <div\n          ref={setRefs}\n          data-testid=\"padder\"\n          className={mergeClasses(styles.pad, className)}\n          style={containerStyles}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    // When debugging is enabled, use a grid structure with wrapping spacer elements.\n    return (\n      <div\n        ref={setRefs}\n        data-testid=\"padder\"\n        className={mergeClasses(styles.pad, isShown && styles.v, className)}\n        style={containerStyles}\n      >\n        <>\n          {/* Top spacer - spans full width */}\n          {top > 0 && (\n            <div style={{ gridColumn: '1 / -1' }}>\n              {renderSpacer('100%', top)}\n            </div>\n          )}\n\n          {/* Left spacer */}\n          {left > 0 && (\n            <div style={{ gridRow: '2 / 3' }}>{renderSpacer(left, '100%')}</div>\n          )}\n        </>\n\n        {/* Main content - centered in grid */}\n        <div style={{ gridRow: '2 / 3', gridColumn: '2 / 3' }}>{children}</div>\n\n        <>\n          {/* Right spacer */}\n          {right > 0 && (\n            <div style={{ gridRow: '2 / 3' }}>\n              {renderSpacer(right, '100%')}\n            </div>\n          )}\n\n          {/* Bottom spacer - spans full width */}\n          {bottom > 0 && (\n            <div style={{ gridColumn: '1 / -1' }}>\n              {renderSpacer('100%', bottom)}\n            </div>\n          )}\n        </>\n      </div>\n    )\n  })\n)\n","/**\n * @file Layout Component\n * @description Grid-based layout component with baseline alignment\n * @module components\n */\n\nimport * as React from 'react'\nimport type { Gaps, IndicatorNode } from '@components'\nimport { useConfig, useDebug, useBaseline } from '@hooks'\nimport { mergeStyles, mergeClasses, parsePadding, formatValue } from '@utils'\nimport { Config } from '../Config'\nimport { Padder } from '../Padder'\nimport { ComponentsProps, Variant } from '../types'\nimport styles from './styles.module.css'\n\nexport type LayoutProps = {\n  /**\n   * Grid column definition. Supports:\n   * - Number: Equal columns (3 → repeat(3, 1fr))\n   * - String: Raw template (\"1fr auto 200px\")\n   * - Array: Mixed values ([100, '1fr'] → \"100px 1fr\")\n   */\n  columns?: number | string | Array<number | string>\n  /** Grid row definition (same format as columns) */\n  rows?: number | string | Array<number | string>\n  /** Controls item alignment along column axis */\n  justifyItems?: React.CSSProperties['justifyItems']\n  /** Controls item alignment along row axis */\n  alignItems?: React.CSSProperties['alignItems']\n  /** Controls content distribution along row axis */\n  justifyContent?: React.CSSProperties['justifyContent']\n  /** Controls content distribution along column axis */\n  alignContent?: React.CSSProperties['alignContent']\n  /** Custom measurement indicator renderer */\n  indicatorNode?: IndicatorNode\n  /** Visual style in debug mode */\n  variant?: Variant\n  children?: React.ReactNode\n} & ComponentsProps &\n  Gaps\n\n/** Parses grid template definitions into CSS grid-template values. */\nfunction getGridTemplate(prop?: number | string | Array<number | string>) {\n  if (typeof prop === 'number') return `repeat(${prop}, 1fr)`\n  if (typeof prop === 'string') return prop\n  if (Array.isArray(prop)) {\n    return prop.map((p) => (typeof p === 'number' ? `${p}px` : p)).join(' ')\n  }\n  return 'repeat(auto-fit, minmax(100px, 1fr))'\n}\n\n/**\n * A grid-based layout component with baseline alignment and responsive columns.\n *\n * @remarks\n * Layout provides a CSS Grid container that:\n * - Supports flexible column definitions\n * - Maintains baseline grid alignment\n * - Includes gap management\n * - Offers comprehensive alignment controls\n * - Provides debug overlays for visual verification\n *\n * When no explicit dimensions are provided, Layout defaults to \"auto\"\n * for both width and height.\n *\n * @example\n * ```tsx\n * // Basic equal columns\n * <Layout columns={3} gap={16}>\n *   <div>Column 1</div>\n *   <div>Column 2</div>\n *   <div>Column 3</div>\n * </Layout>\n *\n * // Mixed column widths with alignment\n * <Layout\n *   columns={['200px', '1fr', '2fr']}\n *   gap={24}\n *   alignItems=\"center\"\n *   justifyContent=\"space-between\"\n * >\n *   <div>Fixed</div>\n *   <div>Flexible</div>\n *   <div>Double width</div>\n * </Layout>\n * ```\n */\nexport const Layout = React.memo(function Layout({\n  children,\n  columns,\n  rows,\n  rowGap,\n  columnGap,\n  gap,\n  height,\n  width,\n  indicatorNode,\n  justifyItems,\n  alignItems,\n  justifyContent,\n  alignContent,\n  className,\n  variant,\n  style,\n  debugging,\n  ...spacingProps\n}: LayoutProps) {\n  const config = useConfig('layout')\n  const { isShown } = useDebug(debugging, config.debugging)\n  const layoutRef = React.useRef<HTMLDivElement>(null)\n\n  const initialPadding = React.useMemo(\n    () => parsePadding(spacingProps),\n    [spacingProps],\n  )\n  const { padding } = useBaseline(layoutRef, {\n    base: config.base,\n    snapping: 'height',\n    spacing: initialPadding,\n    warnOnMisalignment: true,\n  })\n\n  const gridTemplateColumns = React.useMemo(\n    () => getGridTemplate(columns),\n    [columns],\n  )\n\n  const gridTemplateRows = React.useMemo(\n    () => (rows ? getGridTemplate(rows) : 'auto'),\n    [rows],\n  )\n\n  const defaultLayoutStyles: Record<string, string> = React.useMemo(\n    () => ({\n      '--bklw': 'auto',\n      '--bklh': 'auto',\n      '--bklcl': config.colors.line,\n      '--bklcf': config.colors.flat,\n      '--bklci': config.colors.text,\n    }),\n    [config.colors.line, config.colors.flat, config.colors.text],\n  )\n\n  const getLayoutStyleOverride = React.useCallback(\n    (key: string, value: string): Record<string, string | number> => {\n      // For width/height, if value is \"auto\" skip injection.\n      if ((key === '--bklw' || key === '--bklh') && value === 'auto') {\n        return {}\n      }\n      return value !== defaultLayoutStyles[key] ? { [key]: value } : {}\n    },\n    [defaultLayoutStyles],\n  )\n\n  const gridGapStyles = React.useMemo(\n    () => ({\n      ...(gap !== undefined && { gap: formatValue(gap) }),\n      ...(rowGap !== undefined && { rowGap: formatValue(rowGap) }),\n      ...(columnGap !== undefined && { columnGap: formatValue(columnGap) }),\n    }),\n    [gap, rowGap, columnGap],\n  )\n\n  const containerStyles = React.useMemo(() => {\n    const widthValue = formatValue(width || 'auto')\n    const heightValue = formatValue(height || 'auto')\n\n    return mergeStyles(\n      {\n        // Theme overrides\n        ...getLayoutStyleOverride('--bklw', widthValue),\n        ...getLayoutStyleOverride('--bklh', heightValue),\n        ...getLayoutStyleOverride('--bklcl', config.colors.line),\n        ...getLayoutStyleOverride('--bklcf', config.colors.flat),\n        ...getLayoutStyleOverride('--bklci', config.colors.text),\n\n        // Grid properties - only inject if different from defaults\n        ...(gridTemplateColumns !== 'repeat(auto-fit, minmax(100px, 1fr))' && {\n          '--bklgtc': gridTemplateColumns,\n        }),\n        ...(gridTemplateRows !== 'auto' && { '--bklgtr': gridTemplateRows }),\n        ...(justifyItems && { '--bklji': justifyItems }),\n        ...(alignItems && { '--bklai': alignItems }),\n        ...(justifyContent && { '--bkljc': justifyContent }),\n        ...(alignContent && { '--bklac': alignContent }),\n\n        // Include gap styles\n        ...gridGapStyles,\n      } as React.CSSProperties,\n      style,\n    )\n  }, [\n    gridTemplateColumns,\n    gridTemplateRows,\n    justifyItems,\n    alignItems,\n    justifyContent,\n    alignContent,\n    width,\n    height,\n    config.colors.line,\n    config.colors.flat,\n    config.colors.text,\n    getLayoutStyleOverride,\n    style,\n    gridGapStyles,\n  ])\n\n  return (\n    <Config\n      spacer={{ variant: variant ?? 'line' }}\n    >\n      <Padder\n        ref={layoutRef}\n        className={isShown ? styles.v : ''}\n        block={[padding.top, padding.bottom]}\n        indicatorNode={indicatorNode}\n        inline={[padding.left, padding.right]}\n        debugging={debugging}\n        width={width}\n        height={height}\n      >\n        <div\n          data-testid=\"layout\"\n          className={mergeClasses(className, styles.lay)}\n          style={containerStyles}\n        >\n          {children}\n        </div>\n      </Padder>\n    </Config>\n  )\n})\n","/**\n * @file Box Component\n * @description A fundamental layout container with baseline grid alignment\n * @module components\n */\n\nimport * as React from 'react'\nimport { useConfig, useDebug, useBaseline } from '@hooks'\nimport {\n  mergeClasses,\n  mergeStyles,\n  parsePadding,\n  mergeRefs,\n  formatValue,\n} from '@utils'\nimport { Config } from '../Config'\nimport { Padder } from '../Padder'\nimport { ComponentsProps } from '../types'\nimport styles from './styles.module.css'\n\n/**\n * Determines how the Box component aligns to the baseline grid.\n *\n * @remarks\n * - `none`: No snapping; uses raw spacing values as provided\n * - `height`: Only container height snaps to base unit multiples\n * - `clamp`: Both height and spacing values snap to base unit multiples\n */\nexport type SnappingMode = 'none' | 'height' | 'clamp'\n\ntype BoxProps = {\n  /** Number of columns to span in a grid layout */\n  colSpan?: number\n  /** Number of rows to span in a grid layout */\n  rowSpan?: number\n  /** Shorthand for equal column and row span. Takes precedence over individual spans */\n  span?: number\n  /** Controls baseline grid alignment behavior */\n  snapping?: SnappingMode\n  children?: React.ReactNode\n} & ComponentsProps\n\n/**\n * A foundational container component that ensures consistent spacing and baseline alignment.\n *\n * @remarks\n * Box provides a layout container that:\n * - Ensures consistent spacing aligned to the baseline grid\n * - Supports grid layout integration through span props\n * - Offers configurable snapping modes for fine-grained alignment control\n * - Includes debug overlays for visual alignment verification\n *\n * By default, Box uses \"auto\" for both width and height unless explicitly specified.\n *\n * @example\n * ```tsx\n * // Basic usage with spacing\n * <Box block={16} inline={8}>\n *   <p>Content aligned to baseline</p>\n * </Box>\n *\n * // With grid spanning and custom snapping\n * <Box\n *   colSpan={2}\n *   rowSpan={1}\n *   snapping=\"height\"\n *   debugging=\"visible\"\n * >\n *   <p>Grid-integrated content</p>\n * </Box>\n * ```\n */\nexport const Box = React.memo(\n  React.forwardRef<HTMLDivElement, BoxProps>(function Box(\n    {\n      children,\n      snapping = 'clamp',\n      debugging: debuggingProp,\n      className,\n      colSpan,\n      rowSpan,\n      span,\n      width,\n      height,\n      style,\n      ...spacingProps\n    },\n    ref,\n  ) {\n    const config = useConfig('box')\n    const { isShown, debugging } = useDebug(debuggingProp, config.debugging)\n\n    const internalRef = React.useRef<HTMLDivElement | null>(null)\n    const { top, bottom, left, right } = parsePadding(spacingProps)\n    const { padding } = useBaseline(internalRef, {\n      base: config.base,\n      snapping,\n      spacing: { top, bottom, left, right },\n      warnOnMisalignment: debugging !== 'none',\n    })\n\n    const gridSpanStyles = React.useMemo(() => {\n      const gridStyles: React.CSSProperties = {}\n      if (span !== undefined) {\n        gridStyles.gridColumn = `span ${span}`\n        gridStyles.gridRow = `span ${span}`\n      } else {\n        if (colSpan !== undefined) {\n          gridStyles.gridColumn = `span ${colSpan}`\n        }\n        if (rowSpan !== undefined) {\n          gridStyles.gridRow = `span ${rowSpan}`\n        }\n      }\n      return gridStyles\n    }, [colSpan, rowSpan, span])\n\n    const defaultBoxStyles: Record<string, string> = React.useMemo(\n      () => ({\n        '--bkxw': 'fit-content',\n        '--bkxh': 'fit-content',\n        '--bkxb': `${config.base}px`,\n        '--bkxcl': config.colors.line,\n      }),\n      [config.base, config.colors.line],\n    )\n\n    // Helper: for width/height, skip if \"auto\"\n    const getBoxStyleOverride = React.useCallback(\n      (key: string, value: string): Record<string, string | number> => {\n        if ((key === '--bkxw' || key === '--bkxh') && value === 'fit-content') {\n          return {}\n        }\n        return value !== defaultBoxStyles[key] ? { [key]: value } : {}\n      },\n      [defaultBoxStyles],\n    )\n\n    const boxStyles = React.useMemo(() => {\n      const widthValue = formatValue(width || 'fit-content')\n      const heightValue = formatValue(height || 'fit-content')\n\n      const customStyles = {\n        ...getBoxStyleOverride('--bkxw', widthValue),\n        ...getBoxStyleOverride('--bkxh', heightValue),\n        ...getBoxStyleOverride('--bkxb', `${config.base}px`),\n        ...getBoxStyleOverride('--bkxcl', config.colors.line),\n      } as React.CSSProperties\n\n      return mergeStyles(customStyles, style)\n    }, [\n      config.base,\n      config.colors.line,\n      width,\n      height,\n      getBoxStyleOverride,\n      style,\n    ])\n\n    return (\n      <div\n        ref={mergeRefs(ref, internalRef)}\n        data-testid=\"box\"\n        className={mergeClasses(styles.box, isShown && styles.v, className)}\n        style={mergeStyles(boxStyles, gridSpanStyles)}\n      >\n        <Config\n          base={1}\n          spacer={{ variant: 'flat' }}\n        >\n          <Padder\n            block={[padding.top, padding.bottom]}\n            inline={[padding.left, padding.right]}\n            width=\"fit-content\"\n            height={height}\n            debugging={debugging}\n          >\n            {children}\n          </Padder>\n        </Config>\n      </div>\n    )\n  }),\n)\n","/**\n * @file Stack Component\n * @description Flex container with baseline grid alignment\n * @module components\n */\n\nimport * as React from 'react'\nimport type { Gaps, IndicatorNode } from '@components'\nimport { useConfig, useDebug, useBaseline } from '@hooks'\nimport { mergeClasses, mergeStyles, parsePadding, formatValue } from '@utils'\nimport { Padder } from '../Padder'\nimport { Config } from '../Config'\nimport { ComponentsProps, Variant } from '../types'\nimport styles from './styles.module.css'\n\nexport type StackProps = {\n  /** Main axis orientation */\n  direction?: 'row' | 'column'\n  /** Distribution of space on main axis */\n  justify?: React.CSSProperties['justifyContent']\n  /** Alignment on cross axis */\n  align?: React.CSSProperties['alignItems']\n  /** Container width (defaults to \"auto\") */\n  width?: React.CSSProperties['width']\n  /** Container height (defaults to \"auto\") */\n  height?: React.CSSProperties['height']\n  /** Custom measurement indicator renderer */\n  indicatorNode?: IndicatorNode\n  /** Visual style in debug mode */\n  variant?: Variant\n  children?: React.ReactNode\n} & ComponentsProps &\n  Gaps\n\n/**\n * A flexible container component aligning children to the baseline grid.\n *\n * @remarks\n * Stack provides a flex container that:\n * - Maintains baseline grid alignment\n * - Supports both row and column layouts\n * - Handles consistent spacing between items\n * - Includes visual debug overlays\n *\n * Key features:\n * - Automatic dimension management (defaults to auto)\n * - Direct padding application in non-debug mode\n * - Comprehensive alignment controls\n * - Theme-aware debug visuals\n *\n * @example\n * ```tsx\n * // Basic horizontal stack\n * <Stack gap={16}>\n *   <div>Item 1</div>\n *   <div>Item 2</div>\n * </Stack>\n *\n * // Vertical stack with alignment\n * <Stack\n *   direction=\"column\"\n *   gap={24}\n *   align=\"center\"\n *   justify=\"space-between\"\n *   debugging=\"visible\"\n * >\n *   <div>Top</div>\n *   <div>Middle</div>\n *   <div>Bottom</div>\n * </Stack>\n *\n * // Complex layout with padding\n * <Stack\n *   direction=\"row\"\n *   gap={32}\n *   align=\"stretch\"\n *   block={[16, 24]}\n *   inline={16}\n *   debugging=\"visible\"\n * >\n *   <div>Panel 1</div>\n *   <div>Panel 2</div>\n * </Stack>\n * ```\n */\nexport const Stack = React.memo(function Stack({\n  align = 'flex-start',\n  children,\n  className,\n  columnGap,\n  debugging: debuggingProp,\n  direction = 'row',\n  gap,\n  height,\n  indicatorNode,\n  justify = 'flex-start',\n  rowGap,\n  style,\n  variant,\n  width,\n  ...spacingProps\n}: StackProps) {\n  const config = useConfig('stack')\n  const { isShown, debugging } = useDebug(debuggingProp, config.debugging)\n  const stackRef = React.useRef<HTMLDivElement | null>(null)\n\n  const initialPadding = React.useMemo(\n    () => parsePadding(spacingProps),\n    [spacingProps],\n  )\n  const { padding } = useBaseline(stackRef, {\n    base: config.base,\n    snapping: 'height',\n    spacing: initialPadding,\n    warnOnMisalignment: true,\n  })\n\n  const stackGapStyles = React.useMemo(\n    () => ({\n      rowGap,\n      columnGap,\n      ...(gap !== undefined && { gap }),\n    }),\n    [rowGap, columnGap, gap],\n  )\n\n  const defaultStackStyles: Record<string, string> = React.useMemo(\n    () => ({\n      '--bkkw': 'auto',\n      '--bkkh': 'auto',\n      '--bkkcl': config.colors.line,\n      '--bkkcf': config.colors.flat,\n      '--bkkci': config.colors.text,\n    }),\n    [config.colors.line, config.colors.flat, config.colors.text],\n  )\n\n  const getStackStyleOverride = React.useCallback(\n    (key: string, value: string): Record<string, string | number> => {\n      // For width, if value equals \"100%\" then skip inline override.\n      if (key === '--bkkw' && value === 'auto') return {}\n      // For height, if value equals \"auto\", skip override.\n      if (key === '--bkkh' && value === 'auto') return {}\n      return value !== defaultStackStyles[key] ? { [key]: value } : {}\n    },\n    [defaultStackStyles],\n  )\n\n  const containerStyles = React.useMemo(() => {\n    const widthValue = formatValue(width || 'auto')\n    const heightValue = formatValue(height || 'auto')\n\n    const customOverrides = {\n      ...getStackStyleOverride('--bkkw', widthValue),\n      ...getStackStyleOverride('--bkkh', heightValue),\n      ...getStackStyleOverride('--bkkcl', config.colors.line),\n      ...getStackStyleOverride('--bkkcf', config.colors.flat),\n      ...getStackStyleOverride('--bkkci', config.colors.text),\n    } as React.CSSProperties\n\n    const baseStyles = {\n      flexDirection: direction,\n      justifyContent: justify,\n      alignItems: align,\n      width,\n      height,\n    } as React.CSSProperties\n\n    return mergeStyles(baseStyles, stackGapStyles, customOverrides, style)\n  }, [\n    direction,\n    justify,\n    align,\n    width,\n    height,\n    config.colors.line,\n    config.colors.flat,\n    config.colors.text,\n    getStackStyleOverride,\n    stackGapStyles,\n    style,\n  ])\n\n  const mergedContainerStyles =\n    debugging === 'none'\n      ? {\n        ...containerStyles,\n        paddingBlock: `${padding.top}px ${padding.bottom}px`,\n        paddingInline: `${padding.left}px ${padding.right}px`,\n      }\n      : containerStyles\n\n  return (\n    <Config\n      spacer={{ variant: variant ?? 'line' }}\n    >\n      <Padder\n        ref={stackRef}\n        className={isShown ? styles.v : ''}\n        block={[padding.top, padding.bottom]}\n        inline={[padding.left, padding.right]}\n        debugging={debugging}\n        indicatorNode={indicatorNode}\n        width={width}\n        height={height}\n      >\n        <div\n          data-testid=\"stack\"\n          className={mergeClasses(className, styles.stk)}\n          style={mergedContainerStyles}\n          {...spacingProps}\n        >\n          {children}\n        </div>\n      </Padder>\n    </Config>\n  )\n})\n","/**\n * @file Guide Component\n * @description Visual grid overlay component for alignment and debugging\n * @module components\n */\n\nimport * as React from 'react'\nimport {\n  useConfig,\n  useDebug,\n  useGuide,\n  useMeasure,\n} from '@hooks'\nimport { formatValue, mergeClasses, mergeStyles, normalizeValue, parsePadding } from '@utils'\nimport { AutoConfig, FixedConfig, LineConfig, PatternConfig } from './types'\nimport type { ComponentsProps } from '../types'\nimport styles from './styles.module.css'\n\n/** Merged configuration types that support various grid layout strategies */\nexport type GuideConfig = PatternConfig | AutoConfig | FixedConfig | LineConfig;\n\nexport type GuideProps = {\n  /**\n   * Controls horizontal alignment of columns within the container.\n   * @default \"start\"\n   */\n  align?: 'start' | 'center' | 'end';\n} & ComponentsProps & GuideConfig;\n\n/**\n * A developer tool component that provides visual grid overlays for alignment.\n *\n * @remarks\n * Guide renders a configurable grid overlay that helps visualize:\n * - Column layouts and spacing\n * - Content alignment\n * - Layout patterns\n *\n * The component supports multiple variants:\n * - \"line\": Simple evenly-spaced vertical lines\n * - \"pattern\": Custom repeating column width patterns\n * - \"fixed\": Fixed number of equal or custom-width columns\n * - \"auto\": Dynamically calculated columns based on container width\n *\n * @example\n * ```tsx\n * // Basic column guide\n * <Guide\n *   variant=\"line\"\n *   gap={8}\n *   debugging=\"visible\"\n * />\n *\n * // Custom column pattern\n * <Guide\n *   variant=\"pattern\"\n *   columns={['100px', '1fr', '2fr']}\n *   gap={16}\n *   align=\"center\"\n *   debugging=\"visible\"\n * />\n *\n * // Fixed columns with custom width\n * <Guide\n *   variant=\"fixed\"\n *   columns={12}\n *   columnWidth=\"60px\"\n *   gap={8}\n *   debugging=\"visible\"\n * />\n * ```\n */\nexport const Guide = React.memo(function Guide({\n  className,\n  debugging,\n  style,\n  variant: variantProp,\n  align = 'start',\n  gap: gapProp,\n  height,\n  width,\n  columns,\n  columnWidth,\n  ...props\n}: GuideProps) {\n  const config = useConfig('guide')\n  const variant = variantProp ?? config.variant\n  const { isShown } = useDebug(debugging, config.debugging)\n  const containerRef = React.useRef<HTMLDivElement | null>(null)\n  const { width: containerWidth, height: containerHeight } = useMeasure(containerRef)\n  const { top, right, bottom, left } = React.useMemo(() => parsePadding(props), [props])\n\n  const gridConfig = React.useMemo(() => {\n    const gap = normalizeValue(gapProp)\n    return (\n      {\n        line: {\n          variant: 'line' as const,\n          gap: gap - 1,\n          base: config.base,\n        },\n        auto: columnWidth\n          ? {\n            variant: 'auto' as const,\n            columnWidth,\n            gap,\n            base: config.base,\n          }\n          : null,\n        pattern: Array.isArray(columns)\n          ? {\n            variant: 'pattern' as const,\n            columns,\n            gap,\n            base: config.base,\n          }\n          : null,\n        fixed:\n          typeof columns === 'number'\n            ? {\n              variant: 'fixed' as const,\n              columns,\n              columnWidth,\n              gap,\n              base: config.base,\n            }\n            : null,\n      }[variant] ?? {\n        variant: 'line' as const,\n        gap: gap - 1,\n        base: config.base,\n      }\n    )\n  }, [gapProp, config.base, columnWidth, columns, variant])\n\n  const {\n    template,\n    columnsCount,\n    calculatedGap,\n  } = useGuide(containerRef, gridConfig)\n\n  const defaultGuideStyles: Record<string, string> = React.useMemo(() => ({\n    '--bkgg': `${calculatedGap}px`,\n    '--bkgj': 'start',\n    '--bkgcl': config.colors.line,\n    '--bkgcp': config.colors.pattern,\n    '--bkgw': '100vw',\n    '--bkgh': '100vh',\n  }), [calculatedGap, config.colors.line, config.colors.pattern])\n\n  const getGuideStyleOverride = React.useCallback(\n    (key: string, value: string): Record<string, string> => {\n      if (\n        ((key === '--bkgw') && value === '100vw') ||\n        ((key === '--bkgh') && value === '100vh')\n      ) {\n        return {}\n      }\n      return value !== defaultGuideStyles[key] ? { [key]: value } : {}\n    },\n    [defaultGuideStyles],\n  )\n\n  // Build base styles (all as string values)\n  const baseStyles: Record<string, string> = {\n    '--bkgg': `${calculatedGap}px`,\n    '--bkgj': align,\n    '--bkgcl': config.colors.line,\n    '--bkgcp': config.colors.pattern,\n    '--bkgpb': `${top}px ${bottom}px`,\n    '--bkgpi': `${left}px ${right}px`,\n    '--bkgt': template,\n    '--bkgw': formatValue(width ?? containerWidth, 0) || '100vw',\n    '--bkgh': formatValue(height ?? containerHeight, 0) || '100vh',\n  }\n\n  const customOverrides: Record<string, string> = {\n    ...getGuideStyleOverride('--bkgw', baseStyles['--bkgw']),\n    ...getGuideStyleOverride('--bkgh', baseStyles['--bkgh']),\n    ...getGuideStyleOverride('--bkgj', align),\n    ...getGuideStyleOverride('--bkgcl', config.colors.line),\n    ...getGuideStyleOverride('--bkgcp', config.colors.pattern),\n    ...getGuideStyleOverride('--bkgg', `${calculatedGap}px`),\n  }\n\n  const containerStyles: Record<string, string> = mergeStyles(baseStyles, customOverrides, style as Record<string, string>)\n\n  return (\n    <div\n      ref={containerRef}\n      data-testid=\"guide\"\n      className={mergeClasses(\n        styles.gde,\n        className,\n        isShown ? styles.v : styles.h,\n        variant === 'line' && styles.line,\n      )}\n      data-variant={variant}\n      style={containerStyles}\n      {...props}\n    >\n      {isShown && (\n        <div className={styles.cols} data-variant={variant}>\n          {Array.from({ length: columnsCount }, (_, i) => {\n            const colColor =\n              config.colors[variant as keyof typeof config.colors] ?? config.colors.line\n            return (\n              <div\n                key={i}\n                className={styles.col}\n                data-column-index={i}\n                data-variant={variant}\n                style={{ backgroundColor: colColor }}\n              />\n            )\n          })}\n        </div>\n      )}\n    </div>\n  )\n})\n","/**\n * @file validation.ts\n * @description Validation utilities for Guide component configurations\n * @module baseline-kit/components/Guide/validation\n */\n\nimport {\n  GRID_ALIGNMENTS,\n  GridAlignment,\n  GuideColumnsPattern,\n  GuideColumnValue,\n  GuideConfig,\n} from '@components'\nimport { ABSOLUTE_UNIT_CONVERSIONS, RELATIVE_UNITS } from '@utils'\n\n/**\n * Regular expression for valid CSS unit values.\n * Matches numeric values with supported CSS units.\n */\nconst UNIT_PATTERN = /^\\d*\\.?\\d+(?:fr|px|%|em|rem|vh|vw|vmin|vmax|pt|pc|in|cm|mm)$/\n\n/**\n * Validates individual grid column values.\n *\n * @example\n * ```ts\n * isValidGuideColumnValue(100)     // true\n * isValidGuideColumnValue('100px') // true\n * isValidGuideColumnValue('auto')  // true\n * isValidGuideColumnValue('foo')   // false\n * ```\n */\nexport const isValidGuideColumnValue = (value: unknown): value is GuideColumnValue => {\n  if (typeof value === 'number') return Number.isFinite(value) && value >= 0\n  if (typeof value !== 'string') return false\n  return value === 'auto' || value === '100%' || UNIT_PATTERN.test(value)\n}\n\n/**\n * Validates an array of column values as a grid pattern.\n *\n * @example\n * ```ts\n * isValidGuidePattern(['100px', '1fr'])     // true\n * isValidGuidePattern([100, 200])           // true\n * isValidGuidePattern(['invalid'])          // false\n * isValidGuidePattern([])                   // false\n * ```\n */\nexport const isValidGuidePattern = (pattern: unknown): pattern is GuideColumnsPattern =>\n  Array.isArray(pattern) && pattern.length > 0 && pattern.every(isValidGuideColumnValue)\n\n/**\n * Validates CSS grid values against supported units.\n *\n * @example\n * ```ts\n * isGuideValue('100px')   // true\n * isGuideValue('2rem')    // true\n * isGuideValue('foo')     // false\n * ```\n */\nexport const isGuideValue = (value: unknown) => {\n  const CSS_UNITS = [...Object.keys(ABSOLUTE_UNIT_CONVERSIONS), ...RELATIVE_UNITS]\n  return (\n    typeof value === 'number' ||\n    (typeof value === 'string' && CSS_UNITS.some(unit => value.endsWith(unit)))\n  )\n}\n\n/**\n * Validates grid alignment values.\n *\n * @example\n * ```ts\n * isGuideAlignment('start')   // true\n * isGuideAlignment('center')  // true\n * isGuideAlignment('foo')     // false\n * ```\n */\nexport const isGuideAlignment = (value: unknown): value is GridAlignment =>\n  typeof value === 'string' && GRID_ALIGNMENTS.includes(value as GridAlignment)\n\n/**\n * Type guard for object values.\n */\nconst isObject = (value: unknown): value is Record<string, unknown> =>\n  typeof value === 'object' && value !== null\n\n/**\n * Validates line-based guide configurations.\n *\n * @example\n * ```ts\n * isGuideLineConfig({ variant: 'line' })           // true\n * isGuideLineConfig({ variant: 'pattern' })        // false\n * ```\n */\nexport const isGuideLineConfig = (config: unknown): config is GuideConfig =>\n  isObject(config) && config.variant === 'line'\n\n/**\n * Validates column-based guide configurations.\n *\n * @example\n * ```ts\n * isGuideColumnConfig({ columns: 12 })             // true\n * isGuideColumnConfig({ variant: 'line' })         // false\n * ```\n */\nexport const isGuideColumnConfig = (config: unknown): config is GuideConfig =>\n  isObject(config) && 'columns' in config && !('variant' in config)\n\n/**\n * Validates auto-calculated guide configurations.\n *\n * @example\n * ```ts\n * isAutoCalculatedGuide({ columnWidth: '200px' })  // true\n * isAutoCalculatedGuide({ columns: 12 })           // false\n * ```\n */\nexport const isAutoCalculatedGuide = (config: unknown): config is GuideConfig =>\n  isObject(config) &&\n  'columnWidth' in config &&\n  !('variant' in config) &&\n  !('columns' in config)","/**\n * @file Baseline Component\n * @description Horizontal grid overlay for baseline alignment\n * @module components\n */\n\nimport * as React from 'react'\nimport { ComponentsProps } from '@components'\nimport { useConfig, useDebug, useVirtual, useMeasure } from '@hooks'\nimport {\n  parsePadding,\n  normalizeValuePair,\n  mergeStyles,\n  mergeClasses,\n} from '@utils'\nimport { Variant } from '../types'\nimport styles from './styles.module.css'\n\nexport type BaselineVariant = Exclude<Variant, 'pattern'>\n\nexport type BaselineProps = {\n  /** Visual style variant for the baseline guides */\n  variant?: BaselineVariant\n  /** Explicit width for the overlay (e.g., \"1200px\" or 1200) */\n  width?: number | string\n  /** Explicit height for the overlay (e.g., \"100vh\" or 800) */\n  height?: number | string\n  /** Base unit for measurements (defaults to theme value) */\n  base?: number\n} & ComponentsProps\n\n/**\n * Renders horizontal guidelines for maintaining vertical rhythm and baseline alignment.\n *\n * @remarks\n * Baseline provides horizontal guides that:\n * - Help maintain consistent vertical spacing\n * - Support visual verification of baseline alignment\n * - Optimize performance through virtual rendering\n * - Adapt to container dimensions\n *\n * @example\n * ```tsx\n * // Basic baseline overlay\n * <Baseline\n *   height=\"100vh\"\n *   base={8}\n *   debugging=\"visible\"\n * />\n *\n * // Custom variant with padding\n * <Baseline\n *   variant=\"flat\"\n *   height=\"100vh\"\n *   base={4}\n *   block={[16, 0]}\n *   debugging=\"visible\"\n * />\n * ```\n */\nexport const Baseline = React.memo(function Baseline({\n  className,\n  debugging,\n  style,\n  variant: variantProp,\n  height: heightProp,\n  width: widthProp,\n  base: baseProp,\n  ...spacingProps\n}: BaselineProps) {\n  const config = useConfig('baseline')\n  const variant = variantProp ?? config.variant\n  const base = baseProp ?? config.base\n  const { isShown } = useDebug(debugging, config.debugging)\n\n  const containerRef = React.useRef<HTMLDivElement | null>(null)\n  const { width: containerWidth, height: containerHeight } =\n    useMeasure(containerRef)\n\n  const [normWidth, normHeight] = React.useMemo(() => {\n    return normalizeValuePair(\n      [widthProp, heightProp],\n      [containerWidth, containerHeight]\n    )\n  }, [widthProp, heightProp, containerWidth, containerHeight])\n\n  const { top, right, bottom, left } = React.useMemo(\n    () => parsePadding(spacingProps),\n    [spacingProps]\n  )\n\n  const rowCount = React.useMemo(() => {\n    const totalHeight = (normHeight ?? 0) - (top + bottom)\n    return Math.max(1, Math.floor(totalHeight / base))\n  }, [normHeight, top, bottom, base])\n\n  const { start, end } = useVirtual({\n    totalLines: rowCount,\n    lineHeight: base,\n    containerRef,\n    buffer: 160,\n  })\n\n  const chosenColor =\n    variant === 'line' ? config.colors.line : config.colors.flat\n\n  const containerStyles = React.useMemo(() => {\n    const padding = [top, right, bottom, left]\n      .map((value) => (value ? `${value}px` : '0'))\n      .join(' ')\n\n    return mergeStyles(\n      {\n        '--bkbw': widthProp ? `${normWidth}px` : '100%',\n        '--bkbh': heightProp ? `${normHeight}px` : '100%',\n        ...(padding !== '0 0 0 0' && { padding }),\n      } as React.CSSProperties,\n      style\n    )\n  }, [\n    top,\n    right,\n    bottom,\n    left,\n    widthProp,\n    normWidth,\n    heightProp,\n    normHeight,\n    style,\n  ])\n\n  const getRowStyle = React.useCallback(\n    (index: number) => {\n      const defaultRowHeight = variant === 'line' ? '1px' : `${base}px`\n      const defaultRowColor =\n        variant === 'line' ? config.colors.line : config.colors.flat\n\n      return mergeStyles({\n        '--bkrt': `${index * base}px`,\n        ...(defaultRowHeight !== '1px' && { '--bkrh': defaultRowHeight }),\n        ...(chosenColor !== defaultRowColor && { '--bkbcl': chosenColor }),\n      } as React.CSSProperties)\n    },\n    [base, variant, chosenColor, config.colors.line, config.colors.flat]\n  )\n\n  return (\n    <div\n      ref={containerRef}\n      data-testid=\"baseline\"\n      className={mergeClasses(\n        styles.bas,\n        isShown ? styles.v : styles.h,\n        className\n      )}\n      style={containerStyles}\n      {...spacingProps}\n    >\n      {isShown &&\n        Array.from({ length: end - start }, (_, i) => {\n          const rowIndex = i + start\n          return (\n            <div\n              className={styles.row}\n              key={rowIndex}\n              data-row-index={rowIndex}\n              style={getRowStyle(rowIndex)}\n            />\n          )\n        })}\n    </div>\n  )\n})\n","import * as React from 'react'\nimport { DebuggingMode } from '@components'\n\n// Spacing Types  --------------------------------------------------------------\n\n/**\n * Defines spacing as either a single value, start/end pair, or object with explicit edges.\n * Used for block and inline spacing across components.\n *\n * @example\n * ```tsx\n * // Single value\n * <Box block={8} />\n *\n * // Start/end pair\n * <Box block={[8, 16]} />\n *\n * // Object with explicit values\n * <Box block={{ start: 8, end: 16 }} />\n * ```\n */\nexport type Spacing =\n  | number\n  | [number, number]\n  | { start?: number; end?: number }\n\n/**\n * Flexible padding definition that supports multiple formats for setting padding on all sides.\n *\n * @example\n * ```tsx\n * // Single value for all sides\n * padding={8}\n *\n * // Block and inline pairs\n * padding={[8, 16]}\n *\n * // Explicit values for each side\n * padding={[8, 16, 8, 16]}\n *\n * // Object with named sides\n * padding={{ top: 8, right: 16, bottom: 8, left: 16 }}\n * ```\n */\nexport type PaddingValue =\n  | number\n  | [number, number]                    // [block, inline]\n  | [number, number, number, number]    // [top, right, bottom, left]\n  | {\n  top?: number;\n  bottom?: number;\n  left?: number;\n  right?: number;\n}\n\n/** Resolved padding values for all edges after normalization. */\nexport type Padding = {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n}\n\n/** Props interface for components that support spacing configuration. */\nexport type SpacingProps = {\n  padding?: PaddingValue;\n  block?: Spacing;\n  inline?: Spacing;\n}\n\n// Grid Types ------------------------------------------------------------------\n\n/** Controls how columns are laid out in grid components. */\nexport type GuideVariant = 'line' | 'pattern' | 'fixed' | 'auto'\n\n/**\n * Valid value types for grid columns. Can be a CSS length, fractional unit,\n * or 'auto' for automatic sizing.\n */\nexport type GuideColumnValue = string | number | undefined | 'auto'\n\n/** Array of column definitions for pattern-based grid layouts. */\nexport type GuideColumnsPattern = readonly GuideColumnValue[]\n\n// === Grid Constants ===\n\n/** Valid grid alignment values. */\nexport const GRID_ALIGNMENTS = ['start', 'center', 'end'] as const\nexport type GridAlignment = typeof GRID_ALIGNMENTS[number]\n\n/** Valid component variants affecting visual style. */\nexport const PADD_VARIANTS = ['line', 'flat'] as const\nexport type PaddedVariant = typeof PADD_VARIANTS[number]\n\n// Component Base Types --------------------------------------------------------\n\n/**\n * Common props shared across library components.\n * Provides consistent sizing, spacing, styling, and debugging options.\n */\nexport type ComponentsProps = {\n  debugging?: DebuggingMode;\n  className?: string;\n  style?: React.CSSProperties;\n  height?: React.CSSProperties['height'];\n  width?: React.CSSProperties['width'];\n} & SpacingProps\n\n/** Base configuration for components that support padding. */\nexport type PaddedBaseConfig = {\n  base?: number;\n  color?: React.CSSProperties['color'] | React.CSSProperties['backgroundColor'];\n  zIndex?: React.CSSProperties['zIndex'];\n}\n\nexport type Variant = 'line' | 'flat' | 'pattern'\n\nexport type Gaps = {\n  gap?: React.CSSProperties['gap']\n  rowGap?: never\n  columnGap?: never\n} | {\n  /** When using separate gaps, omit unified gap */\n  gap?: never\n  rowGap?: React.CSSProperties['rowGap']\n  columnGap?: React.CSSProperties['columnGap']\n}\n"],"names":["REACT_ELEMENT_TYPE","REACT_FRAGMENT_TYPE","jsxProd","type","config","maybeKey","key","propName","reactJsxRuntime_production","getComponentNameFromType","REACT_CLIENT_REFERENCE$2","REACT_PORTAL_TYPE","REACT_PROFILER_TYPE","REACT_STRICT_MODE_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_CONTEXT_TYPE","REACT_CONSUMER_TYPE","REACT_FORWARD_REF_TYPE","innerType","REACT_MEMO_TYPE","REACT_LAZY_TYPE","testStringCoercion","value","checkKeyStringCoercion","JSCompiler_inline_result","JSCompiler_temp_const","JSCompiler_inline_result$jscomp$0","disabledLog","disableLogs","disabledDepth","prevLog","prevInfo","prevWarn","prevError","prevGroup","prevGroupCollapsed","prevGroupEnd","props","reenableLogs","assign","describeBuiltInComponentFrame","name","prefix","x","match","suffix","describeNativeComponentFrame","fn","construct","reentry","frame","componentFrameCache","previousDispatcher","ReactSharedInternals","RunInRootFrame","Fake","control","x$0","x$1","sample","namePropDescriptor","_RunInRootFrame$Deter","sampleStack","controlStack","sampleLines","controlLines","_frame","describeUnknownElementTypeFrameInDEV","prototype","getOwner","dispatcher","hasValidKey","hasOwnProperty","getter","defineKeyPropWarningGetter","displayName","warnAboutAccessingKey","specialPropKeyWarningShown","elementRefGetterWithDeprecationWarning","componentName","didWarnAboutElementRef","ReactElement","self","source","owner","jsxDEVImpl","isStaticChildren","REACT_OFFSCREEN_TYPE","REACT_CLIENT_REFERENCE$1","children","isArrayImpl","validateChildKeys","keys","k","didWarnAboutKeySpread","node","parentType","REACT_CLIENT_REFERENCE","i","child","isValidElement","validateExplicitKey","MAYBE_ITERATOR_SYMBOL","object","element","getCurrentComponentErrorInfo","ownerHasKeyUseWarning","childOwner","prevGetCurrentStack","stack","info","React","require$$0","reactJsxRuntime_development","jsxRuntimeModule","require$$1","parseUnit","num","unit","formatValue","defaultValue","DEFAULT_CONTEXT","ABSOLUTE_UNIT_CONVERSIONS","RELATIVE_UNITS","convertValue","context","parsed","ctx","moduloize","base","options","doRound","clamp","min","max","round","precision","factor","normalizeValue","clampOptions","suppressWarnings","conv","normalized","clamped","normalizeValuePair","values","defaults","first","second","parsePadding","spacing","parsePaddingValue","blockEdges","parseBlock","inlineEdges","parseInline","padding","block","inline","top","right","bottom","left","calculateSnappedSpacing","height","initial","snapping","pad","remainder","mergeClasses","classes","mergeStyles","styles","style","assignRef","ref","error","mergeRefs","refs","debounce","delay","timer","cancel","args","rafThrottle","rafId","lastArgs","useMeasure","dimensions","setDimensions","measure","rect","next","prev","refresh","observer","useVirtual","totalLines","lineHeight","containerRef","buffer","numericBuffer","useMemo","calculateRange","useCallback","offsetTop","viewportTop","viewportBottom","start","end","visibleRange","setVisibleRange","useState","useWindowEvents","updateRangeThrottled","updateRange","useLayoutEffect","events","handler","stableHandler","wrappedHandler","evt","useBaseline","warnOnMisalignment","didSnapRef","useRef","initialPadding","isAligned","finalPadding","useGuide","width","variant","gap","columns","isValidGuidePattern","columnsArr","col","c","colCount","colWidth","colWidthStr","pxVal","useConfig","component","defaultConfig","useDefaultConfig","useDebug","debuggingProp","debuggingConfig","effective","GUIDE_COLORS","BASELINE_COLORS","SPACER_COLORS","BOX_COLORS","STACK_COLORS","LAYOUT_COLORS","PADDER_COLOR","DEFAULT_CONFIG","ConfigContext","createCSSVariables","baseline","guide","spacer","layout","box","padder","Config","parentConfig","newConfig","jsx","Spacer","indicatorNode","debugging","variantProp","baseProp","colorProp","className","isShown","normWidth","normHeight","measurements","defaultSpacerStyles","getStyleOverride","containerStyles","heightValue","widthValue","baseValue","customStyles","Padder","spacingProps","isNone","enableSpacers","internalRef","setRefs","stylesObj","renderSpacer","widthVal","heightVal","jsxs","Fragment","getGridTemplate","prop","p","Layout","rows","rowGap","columnGap","justifyItems","alignItems","justifyContent","alignContent","layoutRef","gridTemplateColumns","gridTemplateRows","defaultLayoutStyles","getLayoutStyleOverride","gridGapStyles","Box","colSpan","rowSpan","span","gridSpanStyles","gridStyles","defaultBoxStyles","getBoxStyleOverride","boxStyles","Stack","align","direction","justify","stackRef","stackGapStyles","defaultStackStyles","getStackStyleOverride","customOverrides","mergedContainerStyles","Guide","gapProp","columnWidth","containerWidth","containerHeight","gridConfig","template","columnsCount","calculatedGap","defaultGuideStyles","getGuideStyleOverride","baseStyles","_","colColor","UNIT_PATTERN","isValidGuideColumnValue","pattern","isGuideValue","CSS_UNITS","isGuideAlignment","GRID_ALIGNMENTS","isObject","isGuideLineConfig","isGuideColumnConfig","isAutoCalculatedGuide","Baseline","heightProp","widthProp","rowCount","totalHeight","chosenColor","getRowStyle","index","defaultRowHeight","defaultRowColor","rowIndex","PADD_VARIANTS"],"mappings":"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","x_google_ignoreList":[0,1,2]}