{"version":3,"file":"index.cjs","sources":["../node_modules/react/cjs/react-jsx-runtime.production.js","../node_modules/react/cjs/react-jsx-runtime.development.js","../node_modules/react/jsx-runtime.js","../src/lib/utils/parse.ts","../src/lib/utils/convert.ts","../src/lib/utils/math.ts","../src/lib/utils/normalize.ts","../src/lib/utils/padding.ts","../src/lib/utils/snapping.ts","../src/lib/utils/merge.ts","../src/lib/utils/timing.ts","../src/lib/hooks/useMeasure.ts","../src/lib/hooks/useVirtual.ts","../src/lib/hooks/useBaseline.ts","../src/lib/hooks/useGuide.ts","../src/lib/hooks/useConfig.ts","../src/lib/hooks/useDebug.ts","../src/lib/components/Config/defaults.ts","../src/lib/components/Config/Config.tsx","../src/lib/components/Spacer/Spacer.tsx","../src/lib/components/Padder/Padder.tsx","../src/lib/components/Layout/Layout.tsx","../src/lib/components/Box/Box.tsx","../src/lib/components/Stack/Stack.tsx","../src/lib/components/Guide/Guide.tsx","../src/lib/components/Guide/validation.ts","../src/lib/components/Baseline/Baseline.tsx","../src/lib/components/types.ts"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n  REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\nfunction jsxProd(type, config, maybeKey) {\n  var key = null;\n  void 0 !== maybeKey && (key = \"\" + maybeKey);\n  void 0 !== config.key && (key = \"\" + config.key);\n  if (\"key\" in config) {\n    maybeKey = {};\n    for (var propName in config)\n      \"key\" !== propName && (maybeKey[propName] = config[propName]);\n  } else maybeKey = config;\n  config = maybeKey.ref;\n  return {\n    $$typeof: REACT_ELEMENT_TYPE,\n    type: type,\n    key: key,\n    ref: void 0 !== config ? config : null,\n    props: maybeKey\n  };\n}\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsx = jsxProd;\nexports.jsxs = jsxProd;\n","/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\n\"production\" !== process.env.NODE_ENV &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE$2\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PORTAL_TYPE:\n          return \"Portal\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_CONTEXT_TYPE:\n            return (type.displayName || \"Context\") + \".Provider\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function disabledLog() {}\n    function disableLogs() {\n      if (0 === disabledDepth) {\n        prevLog = console.log;\n        prevInfo = console.info;\n        prevWarn = console.warn;\n        prevError = console.error;\n        prevGroup = console.group;\n        prevGroupCollapsed = console.groupCollapsed;\n        prevGroupEnd = console.groupEnd;\n        var props = {\n          configurable: !0,\n          enumerable: !0,\n          value: disabledLog,\n          writable: !0\n        };\n        Object.defineProperties(console, {\n          info: props,\n          log: props,\n          warn: props,\n          error: props,\n          group: props,\n          groupCollapsed: props,\n          groupEnd: props\n        });\n      }\n      disabledDepth++;\n    }\n    function reenableLogs() {\n      disabledDepth--;\n      if (0 === disabledDepth) {\n        var props = { configurable: !0, enumerable: !0, writable: !0 };\n        Object.defineProperties(console, {\n          log: assign({}, props, { value: prevLog }),\n          info: assign({}, props, { value: prevInfo }),\n          warn: assign({}, props, { value: prevWarn }),\n          error: assign({}, props, { value: prevError }),\n          group: assign({}, props, { value: prevGroup }),\n          groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),\n          groupEnd: assign({}, props, { value: prevGroupEnd })\n        });\n      }\n      0 > disabledDepth &&\n        console.error(\n          \"disabledDepth fell below zero. This is a bug in React. Please file an issue.\"\n        );\n    }\n    function describeBuiltInComponentFrame(name) {\n      if (void 0 === prefix)\n        try {\n          throw Error();\n        } catch (x) {\n          var match = x.stack.trim().match(/\\n( *(at )?)/);\n          prefix = (match && match[1]) || \"\";\n          suffix =\n            -1 < x.stack.indexOf(\"\\n    at\")\n              ? \" (<anonymous>)\"\n              : -1 < x.stack.indexOf(\"@\")\n                ? \"@unknown:0:0\"\n                : \"\";\n        }\n      return \"\\n\" + prefix + name + suffix;\n    }\n    function describeNativeComponentFrame(fn, construct) {\n      if (!fn || reentry) return \"\";\n      var frame = componentFrameCache.get(fn);\n      if (void 0 !== frame) return frame;\n      reentry = !0;\n      frame = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var previousDispatcher = null;\n      previousDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = null;\n      disableLogs();\n      try {\n        var RunInRootFrame = {\n          DetermineComponentFrameRoot: function () {\n            try {\n              if (construct) {\n                var Fake = function () {\n                  throw Error();\n                };\n                Object.defineProperty(Fake.prototype, \"props\", {\n                  set: function () {\n                    throw Error();\n                  }\n                });\n                if (\"object\" === typeof Reflect && Reflect.construct) {\n                  try {\n                    Reflect.construct(Fake, []);\n                  } catch (x) {\n                    var control = x;\n                  }\n                  Reflect.construct(fn, [], Fake);\n                } else {\n                  try {\n                    Fake.call();\n                  } catch (x$0) {\n                    control = x$0;\n                  }\n                  fn.call(Fake.prototype);\n                }\n              } else {\n                try {\n                  throw Error();\n                } catch (x$1) {\n                  control = x$1;\n                }\n                (Fake = fn()) &&\n                  \"function\" === typeof Fake.catch &&\n                  Fake.catch(function () {});\n              }\n            } catch (sample) {\n              if (sample && control && \"string\" === typeof sample.stack)\n                return [sample.stack, control.stack];\n            }\n            return [null, null];\n          }\n        };\n        RunInRootFrame.DetermineComponentFrameRoot.displayName =\n          \"DetermineComponentFrameRoot\";\n        var namePropDescriptor = Object.getOwnPropertyDescriptor(\n          RunInRootFrame.DetermineComponentFrameRoot,\n          \"name\"\n        );\n        namePropDescriptor &&\n          namePropDescriptor.configurable &&\n          Object.defineProperty(\n            RunInRootFrame.DetermineComponentFrameRoot,\n            \"name\",\n            { value: \"DetermineComponentFrameRoot\" }\n          );\n        var _RunInRootFrame$Deter =\n            RunInRootFrame.DetermineComponentFrameRoot(),\n          sampleStack = _RunInRootFrame$Deter[0],\n          controlStack = _RunInRootFrame$Deter[1];\n        if (sampleStack && controlStack) {\n          var sampleLines = sampleStack.split(\"\\n\"),\n            controlLines = controlStack.split(\"\\n\");\n          for (\n            _RunInRootFrame$Deter = namePropDescriptor = 0;\n            namePropDescriptor < sampleLines.length &&\n            !sampleLines[namePropDescriptor].includes(\n              \"DetermineComponentFrameRoot\"\n            );\n\n          )\n            namePropDescriptor++;\n          for (\n            ;\n            _RunInRootFrame$Deter < controlLines.length &&\n            !controlLines[_RunInRootFrame$Deter].includes(\n              \"DetermineComponentFrameRoot\"\n            );\n\n          )\n            _RunInRootFrame$Deter++;\n          if (\n            namePropDescriptor === sampleLines.length ||\n            _RunInRootFrame$Deter === controlLines.length\n          )\n            for (\n              namePropDescriptor = sampleLines.length - 1,\n                _RunInRootFrame$Deter = controlLines.length - 1;\n              1 <= namePropDescriptor &&\n              0 <= _RunInRootFrame$Deter &&\n              sampleLines[namePropDescriptor] !==\n                controlLines[_RunInRootFrame$Deter];\n\n            )\n              _RunInRootFrame$Deter--;\n          for (\n            ;\n            1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter;\n            namePropDescriptor--, _RunInRootFrame$Deter--\n          )\n            if (\n              sampleLines[namePropDescriptor] !==\n              controlLines[_RunInRootFrame$Deter]\n            ) {\n              if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {\n                do\n                  if (\n                    (namePropDescriptor--,\n                    _RunInRootFrame$Deter--,\n                    0 > _RunInRootFrame$Deter ||\n                      sampleLines[namePropDescriptor] !==\n                        controlLines[_RunInRootFrame$Deter])\n                  ) {\n                    var _frame =\n                      \"\\n\" +\n                      sampleLines[namePropDescriptor].replace(\n                        \" at new \",\n                        \" at \"\n                      );\n                    fn.displayName &&\n                      _frame.includes(\"<anonymous>\") &&\n                      (_frame = _frame.replace(\"<anonymous>\", fn.displayName));\n                    \"function\" === typeof fn &&\n                      componentFrameCache.set(fn, _frame);\n                    return _frame;\n                  }\n                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);\n              }\n              break;\n            }\n        }\n      } finally {\n        (reentry = !1),\n          (ReactSharedInternals.H = previousDispatcher),\n          reenableLogs(),\n          (Error.prepareStackTrace = frame);\n      }\n      sampleLines = (sampleLines = fn ? fn.displayName || fn.name : \"\")\n        ? describeBuiltInComponentFrame(sampleLines)\n        : \"\";\n      \"function\" === typeof fn && componentFrameCache.set(fn, sampleLines);\n      return sampleLines;\n    }\n    function describeUnknownElementTypeFrameInDEV(type) {\n      if (null == type) return \"\";\n      if (\"function\" === typeof type) {\n        var prototype = type.prototype;\n        return describeNativeComponentFrame(\n          type,\n          !(!prototype || !prototype.isReactComponent)\n        );\n      }\n      if (\"string\" === typeof type) return describeBuiltInComponentFrame(type);\n      switch (type) {\n        case REACT_SUSPENSE_TYPE:\n          return describeBuiltInComponentFrame(\"Suspense\");\n        case REACT_SUSPENSE_LIST_TYPE:\n          return describeBuiltInComponentFrame(\"SuspenseList\");\n      }\n      if (\"object\" === typeof type)\n        switch (type.$$typeof) {\n          case REACT_FORWARD_REF_TYPE:\n            return (type = describeNativeComponentFrame(type.render, !1)), type;\n          case REACT_MEMO_TYPE:\n            return describeUnknownElementTypeFrameInDEV(type.type);\n          case REACT_LAZY_TYPE:\n            prototype = type._payload;\n            type = type._init;\n            try {\n              return describeUnknownElementTypeFrameInDEV(type(prototype));\n            } catch (x) {}\n        }\n      return \"\";\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(type, key, self, source, owner, props) {\n      self = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== self ? self : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      if (\n        \"string\" === typeof type ||\n        \"function\" === typeof type ||\n        type === REACT_FRAGMENT_TYPE ||\n        type === REACT_PROFILER_TYPE ||\n        type === REACT_STRICT_MODE_TYPE ||\n        type === REACT_SUSPENSE_TYPE ||\n        type === REACT_SUSPENSE_LIST_TYPE ||\n        type === REACT_OFFSCREEN_TYPE ||\n        (\"object\" === typeof type &&\n          null !== type &&\n          (type.$$typeof === REACT_LAZY_TYPE ||\n            type.$$typeof === REACT_MEMO_TYPE ||\n            type.$$typeof === REACT_CONTEXT_TYPE ||\n            type.$$typeof === REACT_CONSUMER_TYPE ||\n            type.$$typeof === REACT_FORWARD_REF_TYPE ||\n            type.$$typeof === REACT_CLIENT_REFERENCE$1 ||\n            void 0 !== type.getModuleId))\n      ) {\n        var children = config.children;\n        if (void 0 !== children)\n          if (isStaticChildren)\n            if (isArrayImpl(children)) {\n              for (\n                isStaticChildren = 0;\n                isStaticChildren < children.length;\n                isStaticChildren++\n              )\n                validateChildKeys(children[isStaticChildren], type);\n              Object.freeze && Object.freeze(children);\n            } else\n              console.error(\n                \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n              );\n          else validateChildKeys(children, type);\n      } else {\n        children = \"\";\n        if (\n          void 0 === type ||\n          (\"object\" === typeof type &&\n            null !== type &&\n            0 === Object.keys(type).length)\n        )\n          children +=\n            \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\";\n        null === type\n          ? (isStaticChildren = \"null\")\n          : isArrayImpl(type)\n            ? (isStaticChildren = \"array\")\n            : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE\n              ? ((isStaticChildren =\n                  \"<\" +\n                  (getComponentNameFromType(type.type) || \"Unknown\") +\n                  \" />\"),\n                (children =\n                  \" Did you accidentally export a JSX literal instead of a component?\"))\n              : (isStaticChildren = typeof type);\n        console.error(\n          \"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\",\n          isStaticChildren,\n          children\n        );\n      }\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(type, children, self, source, getOwner(), maybeKey);\n    }\n    function validateChildKeys(node, parentType) {\n      if (\n        \"object\" === typeof node &&\n        node &&\n        node.$$typeof !== REACT_CLIENT_REFERENCE\n      )\n        if (isArrayImpl(node))\n          for (var i = 0; i < node.length; i++) {\n            var child = node[i];\n            isValidElement(child) && validateExplicitKey(child, parentType);\n          }\n        else if (isValidElement(node))\n          node._store && (node._store.validated = 1);\n        else if (\n          (null === node || \"object\" !== typeof node\n            ? (i = null)\n            : ((i =\n                (MAYBE_ITERATOR_SYMBOL && node[MAYBE_ITERATOR_SYMBOL]) ||\n                node[\"@@iterator\"]),\n              (i = \"function\" === typeof i ? i : null)),\n          \"function\" === typeof i &&\n            i !== node.entries &&\n            ((i = i.call(node)), i !== node))\n        )\n          for (; !(node = i.next()).done; )\n            isValidElement(node.value) &&\n              validateExplicitKey(node.value, parentType);\n    }\n    function isValidElement(object) {\n      return (\n        \"object\" === typeof object &&\n        null !== object &&\n        object.$$typeof === REACT_ELEMENT_TYPE\n      );\n    }\n    function validateExplicitKey(element, parentType) {\n      if (\n        element._store &&\n        !element._store.validated &&\n        null == element.key &&\n        ((element._store.validated = 1),\n        (parentType = getCurrentComponentErrorInfo(parentType)),\n        !ownerHasKeyUseWarning[parentType])\n      ) {\n        ownerHasKeyUseWarning[parentType] = !0;\n        var childOwner = \"\";\n        element &&\n          null != element._owner &&\n          element._owner !== getOwner() &&\n          ((childOwner = null),\n          \"number\" === typeof element._owner.tag\n            ? (childOwner = getComponentNameFromType(element._owner.type))\n            : \"string\" === typeof element._owner.name &&\n              (childOwner = element._owner.name),\n          (childOwner = \" It was passed a child from \" + childOwner + \".\"));\n        var prevGetCurrentStack = ReactSharedInternals.getCurrentStack;\n        ReactSharedInternals.getCurrentStack = function () {\n          var stack = describeUnknownElementTypeFrameInDEV(element.type);\n          prevGetCurrentStack && (stack += prevGetCurrentStack() || \"\");\n          return stack;\n        };\n        console.error(\n          'Each child in a list should have a unique \"key\" prop.%s%s See https://react.dev/link/warning-keys for more information.',\n          parentType,\n          childOwner\n        );\n        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;\n      }\n    }\n    function getCurrentComponentErrorInfo(parentType) {\n      var info = \"\",\n        owner = getOwner();\n      owner &&\n        (owner = getComponentNameFromType(owner.type)) &&\n        (info = \"\\n\\nCheck the render method of `\" + owner + \"`.\");\n      info ||\n        ((parentType = getComponentNameFromType(parentType)) &&\n          (info =\n            \"\\n\\nCheck the top-level render call using <\" + parentType + \">.\"));\n      return info;\n    }\n    var React = require(\"react\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    Symbol.for(\"react.provider\");\n    var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\"),\n      MAYBE_ITERATOR_SYMBOL = Symbol.iterator,\n      REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      assign = Object.assign,\n      REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"),\n      isArrayImpl = Array.isArray,\n      disabledDepth = 0,\n      prevLog,\n      prevInfo,\n      prevWarn,\n      prevError,\n      prevGroup,\n      prevGroupCollapsed,\n      prevGroupEnd;\n    disabledLog.__reactDisabledLog = !0;\n    var prefix,\n      suffix,\n      reentry = !1;\n    var componentFrameCache = new (\n      \"function\" === typeof WeakMap ? WeakMap : Map\n    )();\n    var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var didWarnAboutKeySpread = {},\n      ownerHasKeyUseWarning = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsx = function (type, config, maybeKey, source, self) {\n      return jsxDEVImpl(type, config, maybeKey, !1, source, self);\n    };\n    exports.jsxs = function (type, config, maybeKey, source, self) {\n      return jsxDEVImpl(type, config, maybeKey, !0, source, self);\n    };\n  })();\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @file parse.ts\n * @description CSS value parsing utilities\n * @module utils\n */\n\n/**\n * Parses a CSS unit string into its numeric value and unit.\n *\n * @remarks\n * Handles:\n * - Integer and decimal values\n * - All CSS units (px, em, rem, etc.)\n * - Percentage values\n * - Sign prefixes (+ and -)\n *\n * @param value - CSS value string to parse\n * @returns Object with value and unit, or null if parsing fails\n *\n * @example\n * ```ts\n * parseUnit('100px')    // => { value: 100, unit: 'px' }\n * parseUnit('1.5rem')   // => { value: 1.5, unit: 'rem' }\n * parseUnit('-20%')     // => { value: -20, unit: '%' }\n * parseUnit('invalid')  // => null\n * ```\n */\nexport function parseUnit(value: string): { value: number; unit: string } | null {\n  const match = value.trim().match(/^([+-]?[\\d.]+)([a-zA-Z%]+)$/)\n  if (!match) return null\n  const num = parseFloat(match[1])\n  const unit = match[2]\n  return { value: num, unit }\n}\n\n/**\n * Formats a value as a valid CSS string.\n *\n * @remarks\n * Handles:\n * - Numbers (adds px suffix)\n * - Special values (auto, 100%, etc.)\n * - Undefined values with defaults\n *\n * @param value - Value to format\n * @param defaultValue - Optional default if value is undefined\n * @returns Formatted CSS string\n *\n * @example\n * ```ts\n * formatValue(14)             // => \"14px\"\n * formatValue('auto')         // => \"auto\"\n * formatValue(undefined, 10)  // => \"10px\"\n * formatValue('1fr')         // => \"1fr\"\n * ```\n */\nexport function formatValue(value: string | number | undefined, defaultValue?: number): string {\n  if (value === undefined && defaultValue !== undefined) return `${defaultValue}px`\n  if (value === 'auto' || (typeof value === 'string' && (/^(auto|100%|0|.*(fr|vh|vw|vmin|vmax|rem))$/).test(value))) {\n    return String(value)\n  }\n  if (typeof value === 'number') return `${value}px`\n  return value ?? ''\n}","/**\n * @file convert.ts\n * @description Unit conversion and dimension calculation utilities\n * @module utils\n */\n\nimport { parseUnit } from './parse'\n\nexport interface ConversionContext {\n  /** Parent element dimension for relative units */\n  parentSize?: number;\n  /** Viewport width for vw units */\n  viewportWidth?: number;\n  /** Viewport height for vh units */\n  viewportHeight?: number;\n  /** Root font size for rem units */\n  rootFontSize?: number;\n  /** Parent font size for em units */\n  parentFontSize?: number;\n}\n\nconst DEFAULT_CONTEXT: Required<ConversionContext> = {\n  parentSize: 0,\n  viewportWidth: typeof window !== 'undefined' ? window.innerWidth : 1920,\n  viewportHeight: typeof window !== 'undefined' ? window.innerHeight : 1080,\n  rootFontSize: 16,\n  parentFontSize: 16,\n}\n\n/** Conversion factors for absolute units to pixels */\nexport const ABSOLUTE_UNIT_CONVERSIONS: Record<string, number> = {\n  px: 1,\n  in: 96,    // 1in = 96px\n  cm: 37.8,  // 1cm = 37.8px\n  mm: 3.78,  // 1mm = 3.78px\n  pt: 1.33,  // 1pt = 1.33px\n  pc: 16,    // 1pc = 16px\n}\n\n/** Supported relative CSS units */\nexport const RELATIVE_UNITS: string[] = ['em', 'rem', 'vh', 'vw', 'vmin', 'vmax', '%']\n\n/**\n * Converts CSS values to pixels.\n *\n * @remarks\n * Handles conversion of:\n * - Absolute units (px, in, cm, mm, pt, pc)\n * - Relative units (em, rem, vh, vw, vmin, vmax, %)\n * - Number values (treated as pixels)\n *\n * @param value - CSS value to convert\n * @param context - Optional context for relative unit conversion\n * @returns Value in pixels or null if conversion fails\n *\n * @example\n * ```ts\n * // Absolute units\n * convertValue('100px') // => 100\n * convertValue('1in')   // => 96\n *\n * // Relative units with context\n * convertValue('50%', { parentSize: 200 }) // => 100\n * convertValue('2em', { parentFontSize: 16 }) // => 32\n * ```\n */\nexport function convertValue(\n  value: number | string | undefined,\n  context?: ConversionContext,\n): number | null {\n  if (typeof value === 'number') return value\n  if (typeof value !== 'string') return null\n\n  const parsed = parseUnit(value)\n  if (!parsed) return null\n\n  const { value: num, unit } = parsed\n\n  // Handle absolute units\n  if (unit in ABSOLUTE_UNIT_CONVERSIONS) {\n    return num * ABSOLUTE_UNIT_CONVERSIONS[unit]\n  }\n\n  // Special case for auto\n  if (unit === 'auto') return null\n\n  // Handle relative units\n  if (RELATIVE_UNITS.includes(unit)) {\n    const ctx = { ...DEFAULT_CONTEXT, ...context }\n    switch (unit) {\n    case 'em':\n      return num * ctx.parentFontSize\n    case 'rem':\n      return num * ctx.rootFontSize\n    case 'vh':\n      return (num / 100) * ctx.viewportHeight\n    case 'vw':\n      return (num / 100) * ctx.viewportWidth\n    case 'vmin':\n      return (num / 100) * Math.min(ctx.viewportWidth, ctx.viewportHeight)\n    case 'vmax':\n      return (num / 100) * Math.max(ctx.viewportWidth, ctx.viewportHeight)\n    case '%':\n      return (num / 100) * ctx.parentSize\n    default:\n      return null\n    }\n  }\n  return null\n}","/**\n * @file math.ts\n * @description Mathematical calculation utilities\n * @module utils\n */\n\nimport { convertValue } from './convert'\n\n/**\n * Calculates the modulo (remainder) of a CSS value when divided by a base unit.\n *\n * @remarks\n * Useful for:\n * - Baseline grid alignment\n * - Spacing calculations\n * - Grid fitting\n *\n * @param value - Input value (number or CSS string)\n * @param base - Base unit to calculate remainder against\n * @param options - Optional calculation controls\n * @returns Remainder in pixel units (e.g., \"6px\")\n *\n * @example\n * ```ts\n * moduloize(14, 8)      // => \"6px\"\n * moduloize('14px', 8)  // => \"6px\"\n * moduloize(14.3, 8, { round: false }) // => \"6.3px\"\n * ```\n */\nexport function moduloize(\n  value: number | string | undefined,\n  base: number,\n  options?: { round?: boolean },\n): string {\n  const doRound = options?.round ?? true\n  const num =\n    value === undefined\n      ? 0\n      : typeof value === 'number'\n        ? value\n        : convertValue(value) ?? 0\n  const normalized = doRound ? Math.round(num) : num\n  const remainder = normalized % base\n  return `${remainder}px`\n}\n\n/**\n * Constrains a number within a specified range.\n *\n * @param value - Number to clamp\n * @param min - Minimum allowed value\n * @param max - Maximum allowed value\n * @returns Clamped value\n *\n * @example\n * ```ts\n * clamp(5, 0, 10)   // => 5\n * clamp(-5, 0, 10)  // => 0\n * clamp(15, 0, 10)  // => 10\n * ```\n */\nexport function clamp(value: number, min: number, max: number): number {\n  return Math.min(Math.max(value, min), max)\n}\n\n/**\n * Rounds a number to specified precision.\n *\n * @remarks\n * Supports:\n * - Positive precision (decimal places)\n * - Negative precision (powers of 10)\n *\n * @param value - Number to round\n * @param precision - Decimal places (default: 0)\n * @returns Rounded number\n *\n * @example\n * ```ts\n * round(1.234, 2)   // => 1.23\n * round(123.4, -1)  // => 120\n * ```\n */\nexport function round(value: number, precision = 0): number {\n  if (precision >= 0) {\n    return Number((Math.round(value * 10 ** precision) / 10 ** precision).toFixed(precision))\n  } else {\n    const factor = 10 ** Math.abs(precision)\n    return Math.round(value / factor) * factor\n  }\n}","/**\n * @file normalize.ts\n * @description Value normalization and standardization utilities\n * @module utils\n */\nimport { convertValue } from './convert'\nimport { clamp } from './math'\n\nexport interface NormalizationOptions {\n  /** Base unit for normalization */\n  base?: number\n  /** Whether to round to nearest base multiple */\n  round?: boolean\n  /** Optional value clamping */\n  clamp?: { min?: number; max?: number }\n  /** Suppress warning messages */\n  suppressWarnings?: boolean\n}\n\n/**\n * Normalizes CSS values to a consistent format based on base unit.\n *\n * @remarks\n * Handles:\n * - CSS length values\n * - Numeric values\n * - Special values (auto)\n * - Rounding to base unit\n * - Value clamping\n *\n * @param value - Value to normalize\n * @param options - Normalization configuration\n * @returns Normalized numeric value\n *\n * @example\n * ```ts\n * // Base unit normalization\n * normalizeValue(14, { base: 8 })  // => 16\n *\n * // With clamping\n * normalizeValue(14, {\n *   base: 8,\n *   clamp: { min: 8, max: 24 }\n * }) // => 16\n *\n * // Without rounding\n * normalizeValue(14, {\n *   base: 8,\n *   round: false\n * }) // => 14\n * ```\n */\nexport function normalizeValue(\n  value: string | number | undefined,\n  options: NormalizationOptions = {}\n): number {\n  const {\n    base = 8,\n    round: doRound = true,\n    clamp: clampOptions,\n    suppressWarnings = false,\n  } = options\n\n  // Handle special cases\n  if (value === 'auto') return base\n\n  // Convert to number\n  let num: number | null = null\n  if (typeof value === 'number') {\n    num = value\n  } else if (typeof value === 'string') {\n    const conv = convertValue(value)\n    if (conv === null) {\n      if (!suppressWarnings) {\n        console.error(\n          `Failed to convert \"${value}\" to pixels. Falling back to base ${base}.`\n        )\n      }\n      num = base\n    } else {\n      num = conv\n    }\n  }\n  if (num === null) num = base\n\n  // Apply normalization\n  const normalized = doRound ? Math.round(num / base) * base : num\n\n  // Apply clamping if needed\n  const clamped =\n    clampOptions !== undefined\n      ? clamp(\n          normalized,\n          clampOptions.min ?? -Infinity,\n          clampOptions.max ?? Infinity\n        )\n      : normalized\n\n  // Warn about adjustments\n  if (!suppressWarnings && clamped !== num) {\n    console.warn(`Normalized ${num} to ${clamped} to match base ${base}px.`)\n  }\n\n  return clamped\n}\n\n/**\n * Normalizes a pair of CSS values.\n *\n * @param values - Tuple of values to normalize\n * @param defaults - Default values if input is undefined\n * @param options - Normalization options\n * @returns Tuple of normalized values\n *\n * @example\n * ```ts\n * normalizeValuePair(\n *   ['14px', '20px'],\n *   [0, 0],\n *   { base: 8 }\n * ) // => [16, 24]\n * ```\n */\nexport function normalizeValuePair(\n  values:\n    | [string | number | undefined, string | number | undefined]\n    | undefined,\n  defaults: [number, number],\n  options?: NormalizationOptions\n): [number, number] {\n  if (!values) return defaults\n\n  if (values[0] === undefined && values[1] === undefined) {\n    return defaults\n  }\n\n  const first =\n    values[0] !== undefined ? normalizeValue(values[0], options) : defaults[0]\n  const second =\n    values[1] !== undefined ? normalizeValue(values[1], options) : defaults[1]\n  return [first, second]\n}\n","import { Padding, PaddingValue, Spacing, SpacingProps } from '@components'\n\n/**\n * Extract numeric top, right, bottom, left (in px) from `padding` or `block/inline`.\n * @param spacing - The props which may include padding, block, inline\n * @returns { top, right, bottom, left } with 0 defaults\n *\n * Priority (if padding is defined, it overrides block/inline):\n * - If `padding` is present, parse it fully (4 edges).\n * - Otherwise, parse `block` for top/bottom and `inline` for left/right.\n */\nexport function parsePadding(spacing: SpacingProps): Padding {\n  if ('padding' in spacing && spacing.padding != null) {\n    return parsePaddingValue(spacing.padding)\n  }\n\n  // Otherwise, parse block/inline separately\n  const blockEdges = 'block' in spacing && spacing.block != null\n    ? parseBlock(spacing.block)\n    : { top: 0, bottom: 0 }\n  const inlineEdges = 'inline' in spacing && spacing.inline != null\n    ? parseInline(spacing.inline)\n    : { left: 0, right: 0 }\n\n  // Merge partial edges\n  return {\n    top: blockEdges.top,\n    right: inlineEdges.right,\n    bottom: blockEdges.bottom,\n    left: inlineEdges.left,\n  }\n}\n\n/**\n * Parses `padding` of various shapes to { top, right, bottom, left } in px.\n *\n * @param padding - number | [block, inline] | [top, right, bottom, left] | { start?: number; end?: number; left?: number; right?: number }\n */\nfunction parsePaddingValue(padding: PaddingValue): Padding {\n  if (typeof padding === 'number') {\n    return { top: padding, right: padding, bottom: padding, left: padding }\n  }\n\n  if (Array.isArray(padding)) {\n    if (padding.length === 2) {\n      const [block, inline] = padding\n      return { top: block, right: inline, bottom: block, left: inline }\n    }\n    if (padding.length >= 4) {\n      const [top, right, bottom, left] = padding\n      return {\n        top: top ?? 0,\n        right: right ?? 0,\n        bottom: bottom ?? 0,\n        left: left ?? 0,\n      }\n    }\n  }\n\n  if (typeof padding === 'object' && !Array.isArray(padding)) {\n    // possible keys: top, bottom, left, right, start, end\n    // interpret start => top, end => bottom if you prefer\n    const top = padding.top ?? 0\n    const bottom = padding.bottom ?? 0\n    const left = padding.left ?? 0\n    const right = padding.right ?? 0\n    return { top, right, bottom, left }\n  }\n\n  // fallback\n  return { top: 0, right: 0, bottom: 0, left: 0 }\n}\n\n/**\n * Parses `block` of various shapes to { top, bottom } in px.\n * @param block - number | [top, bottom] | { start?: number; end?: number }\n */\nfunction parseBlock(block: Spacing): Pick<Padding, 'top' | 'bottom'> {\n  if (typeof block === 'number') {\n    return { top: block, bottom: block }\n  }\n\n  // [top, bottom]\n  if (Array.isArray(block)) {\n    const [top, bottom] = block\n    return {\n      top: top ?? 0,\n      bottom: bottom ?? 0,\n    }\n  }\n\n  // object { start, end }\n  if (typeof block === 'object') {\n    return {\n      top: block.start ?? 0,\n      bottom: block.end ?? 0,\n    }\n  }\n\n  return { top: 0, bottom: 0 }\n}\n\n/**\n * Parses `inline` of various shapes to { left, right } in px.\n * @param inline - number | [left, right] | { start?: number; end?: number }\n */\nfunction parseInline(inline: Spacing): Pick<Padding, 'left' | 'right'> {\n  if (typeof inline === 'number') {\n    return { left: inline, right: inline }\n  }\n\n  if (Array.isArray(inline)) {\n    const [left, right] = inline\n    return {\n      left: left ?? 0,\n      right: right ?? 0,\n    }\n  }\n\n  if (typeof inline === 'object') {\n    return {\n      left: inline.start ?? 0,\n      right: inline.end ?? 0,\n    }\n  }\n\n  return { left: 0, right: 0 }\n}","/**\n * @file snapping.ts\n * @description Baseline grid snapping utilities\n * @module utils\n */\n\nimport { SnappingMode, Padding, PaddingValue } from '@components'\nimport { parsePadding } from '@/utils/padding'\n\n/**\n * Calculates spacing adjustments to maintain baseline grid alignment.\n *\n * @remarks\n * Provides different snapping behaviors:\n * - none: No adjustments\n * - height: Adjusts bottom padding only\n * - clamp: Adjusts both top and bottom padding\n *\n * @param height - Measured element height\n * @param base - Grid base unit\n * @param initial - Initial spacing values\n * @param snapping - Snapping mode to apply\n * @returns Adjusted spacing values\n *\n * @example\n * ```ts\n * // Height snapping mode\n * calculateSnappedSpacing(46, 8, { top: 10, bottom: 10 }, 'height')\n * // => { top: 10, right: 0, bottom: 12, left: 0 }\n *\n * // Clamp mode\n * calculateSnappedSpacing(45, 8, { top: 10, bottom: 6 }, 'clamp')\n * // => { top: 2, right: 0, bottom: 1, left: 0 }\n * ```\n */\nexport function calculateSnappedSpacing(\n  height: number,\n  base: number,\n  initial: PaddingValue,\n  snapping: SnappingMode,\n): Padding {\n  const pad: Padding = parsePadding({ padding: initial })\n\n  if (snapping === 'none') {\n    return pad\n  }\n\n  if (snapping === 'height') {\n    const remainder = height % base\n    if (remainder !== 0) {\n      pad.bottom += base - remainder\n    }\n  }\n\n  if (snapping === 'clamp') {\n    pad.top = pad.top % base\n    const remainder = height % base\n    if (remainder !== 0) {\n      pad.bottom += base - remainder\n    }\n    pad.bottom = pad.bottom % base\n  }\n\n  return pad\n}","/**\n * @file merge.ts\n * @description Style and class merging utilities\n * @module utils\n */\n\nimport * as React from 'react'\n\n/**\n * Combines class names, filtering out falsy values.\n *\n * @remarks\n * - Filters out false, null, undefined\n * - Trims whitespace\n * - Preserves order of classes\n *\n * @param classes - Array of potential class names\n * @returns Combined class string\n *\n * @example\n * ```ts\n * mergeClasses('btn', isActive && 'active', undefined)\n * // => \"btn active\"\n * ```\n */\nexport const mergeClasses = (\n  ...classes: Array<string | boolean | undefined | null>\n): string => classes.filter(Boolean).join(' ').trim()\n\n/**\n * Combines multiple style objects with type safety.\n *\n * @remarks\n * - Preserves type information\n * - Handles undefined values\n * - Merges deeply nested styles\n *\n * @param styles - Array of style objects\n * @returns Combined style object\n *\n * @example\n * ```ts\n * mergeStyles(\n *   { color: 'red' },\n *   isLarge && { fontSize: '2em' },\n *   customStyles\n * )\n * ```\n */\nexport const mergeStyles = <T extends React.CSSProperties>(\n  ...styles: Array<T | undefined>\n): T => Object.assign({}, ...styles.filter((style): style is T => style !== undefined))\n\n/**\n * Assigns a value to a React ref.\n */\nfunction assignRef<T>(ref: React.Ref<T> | null | undefined, node: T | null): void {\n  if (!ref) return\n  if (typeof ref === 'function') {\n    ref(node)\n  } else {\n    try {\n      Object.assign(ref, { current: node })\n    } catch (error) {\n      console.error('Error assigning ref:', error)\n    }\n  }\n}\n\n/**\n * Merges multiple React refs into a single callback ref.\n *\n * @remarks\n * Handles:\n * - Function refs\n * - Object refs\n * - Undefined/null refs\n *\n * @param refs - Array of refs to merge\n * @returns Combined ref callback\n *\n * @example\n * ```tsx\n * const Component = React.forwardRef((props, ref) => {\n *   const localRef = useRef(null);\n *   const combinedRef = mergeRefs(ref, localRef);\n *\n *   return <div ref={combinedRef} />;\n * });\n * ```\n */\nexport function mergeRefs<T>(\n  ...refs: Array<React.Ref<T> | null | undefined>\n): React.RefCallback<T> {\n  return (node: T | null) => {\n    refs.forEach(ref => {\n      assignRef(ref, node)\n    })\n  }\n}","/**\n * @file timing.ts\n * @description Performance optimization utilities\n * @module utils\n */\n\n/**\n * Creates a debounced version of a function.\n *\n * @remarks\n * Useful for:\n * - Handling rapid event sequences\n * - Limiting API calls\n * - Performance optimization\n *\n * @param fn - Function to debounce\n * @param delay - Delay in milliseconds\n * @returns Debounced function\n *\n * @example\n * ```ts\n * const handleResize = debounce(() => {\n *   // Expensive calculation\n * }, 100);\n *\n * window.addEventListener('resize', handleResize);\n * ```\n */\nexport const debounce = <T extends (...args: unknown[]) => void>(\n  fn: T,\n  delay: number,\n): [T, () => void] => {\n  let timer: ReturnType<typeof setTimeout> | null = null\n\n  const cancel = () => {\n    if (timer) {\n      clearTimeout(timer)\n      timer = null\n    }\n  }\n\n  const debounced = ((...args) => {\n    cancel()\n    timer = setTimeout(() => fn(...args), delay)\n  }) as T\n\n  return [debounced, cancel]\n}\n\n/**\n * Creates a requestAnimationFrame-based throttled function.\n *\n * @remarks\n * Optimizes performance by:\n * - Limiting execution to animation frames\n * - Preventing rapid-fire calls\n * - Maintaining visual smoothness\n *\n * @param fn - Function to throttle\n * @returns RAF-throttled function\n *\n * @example\n * ```ts\n * const updateScroll = rafThrottle(() => {\n *   // Update scroll position\n * });\n *\n * document.addEventListener('scroll', updateScroll);\n * ```\n */\nexport const rafThrottle = <T extends (...args: never[]) => void>(\n  fn: T,\n): T => {\n  let rafId: number | null = null\n  let lastArgs: Parameters<T> | null = null\n\n  const throttled = (...args: Parameters<T>) => {\n    lastArgs = args\n\n    if (rafId !== null) {\n      cancelAnimationFrame(rafId)\n    }\n\n    rafId = requestAnimationFrame(() => {\n      fn(...lastArgs!)\n      rafId = null\n      lastArgs = null\n    })\n  }\n\n  return throttled as T\n}\n","import * as React from 'react'\nimport { rafThrottle } from '@utils'\n\nexport interface MeasureResult {\n  /** Measured width in pixels */\n  width: number;\n  /** Measured height in pixels */\n  height: number;\n  /** Function to force a remeasurement */\n  refresh: () => void;\n}\n\n/**\n * Hook for measuring and tracking DOM element dimensions.\n *\n * Provides responsive element measurements using ResizeObserver,\n * with performance optimization (via RAF throttling), error handling,\n * and a manual refresh method.\n *\n * @param ref - Reference to the DOM element to measure\n * @returns Current dimensions and refresh function\n *\n * @example\n * ```tsx\n * function ResponsiveBox() {\n *   const ref = React.useRef<HTMLDivElement>(null);\n *   const { width, height, refresh } = useMeasure(ref);\n *\n *   return (\n *     <div ref={ref} className=\"responsive-box\">\n *       Width: {width}px, Height: {height}px\n *       <button onClick={refresh}>Remeasure</button>\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useMeasure(ref: React.RefObject<HTMLElement | null>): MeasureResult {\n  const [dimensions, setDimensions] = React.useState({ width: 0, height: 0 })\n\n  // measure() reads getBoundingClientRect() from ref.current\n  const measure = React.useCallback(() => {\n    if (!ref.current) return\n    try {\n      const rect = ref.current.getBoundingClientRect()\n      const next = {\n        width: rect ? Math.round(rect.width) : 0,\n        height: rect ? Math.round(rect.height) : 0,\n      }\n      setDimensions(prev =>\n        prev.width === next.width && prev.height === next.height ? prev : next,\n      )\n    } catch (error) {\n      setDimensions({ width: 0, height: 0 })\n    }\n  }, [ref])\n\n  // Create a throttled version of measure using RAF.\n  const refresh = React.useMemo(() => rafThrottle(measure), [measure])\n\n  // On mount (or when ref changes) perform an immediate measurement.\n  React.useLayoutEffect(() => {\n    measure()\n  }, [measure])\n\n  // Set up a ResizeObserver on mount.\n  React.useLayoutEffect(() => {\n    if (!ref.current) return\n    const observer = new ResizeObserver(() => {\n      refresh()\n    })\n    observer.observe(ref.current)\n    return () => {\n      observer.disconnect()\n    }\n  }, [ref, refresh])\n\n  return { ...dimensions, refresh }\n}\n","/**\n * @file useVirtual Hook\n * @description Manages virtual scrolling calculations\n * @module hooks\n */\n\nimport { RefObject, useCallback, useLayoutEffect, useMemo, useState } from 'react'\nimport { rafThrottle } from '@utils'\n\ntype VirtualResult = {\n  /** Total number of items/lines to virtualize */\n  totalLines: number;\n  /** Height of each item in pixels */\n  lineHeight: number;\n  /** Reference to the scrollable container */\n  containerRef: RefObject<HTMLDivElement | null>;\n  /** Additional items to render above/below viewport */\n  buffer?: number | string;\n}\n\n/**\n * Hook for optimizing large lists through virtual scrolling.\n *\n * @remarks\n * This hook helps manage virtual scrolling by:\n * - Calculating visible item ranges\n * - Handling scroll events efficiently\n * - Managing buffer zones for smooth scrolling\n * - Supporting dynamic container sizes\n *\n * Performance optimizations:\n * - RAF-based scroll handling\n * - Intersection Observer for visibility\n * - Buffer zones to prevent flicker\n * - Efficient range calculations\n *\n * @param options - Virtual scrolling configuration\n * @returns Object containing start and end indices of visible items\n *\n * @example\n * ```tsx\n * function VirtualList() {\n *   const containerRef = useRef<HTMLDivElement>(null);\n *   const { start, end } = useVirtual({\n *     totalLines: 1000,\n *     lineHeight: 30,\n *     containerRef,\n *     buffer: 5\n *   });\n *\n *   return (\n *     <div ref={containerRef} className=\"scroll-container\">\n *       <div style={{ height: 1000 * 30 }}>\n *         {items.slice(start, end).map(item => (\n *           <div key={item.id} style={{ height: 30 }}>\n *             {item.content}\n *           </div>\n *         ))}\n *       </div>\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useVirtual({\n  totalLines,\n  lineHeight,\n  containerRef,\n  buffer = 0,\n}: VirtualResult) {\n  // Convert buffer to numeric value\n  const numericBuffer = useMemo(() =>\n    typeof buffer === 'number' ? buffer : parseInt(buffer, 10) || 0\n  , [buffer])\n\n  /**\n   * Calculates the visible range of items based on scroll position\n   * and viewport dimensions.\n   */\n  const calculateRange = useCallback(() => {\n    const element = containerRef.current\n    if (!element) return { start: 0, end: totalLines }\n\n    // Show all lines if container is inside .content-block\n    if (element.closest('.block')) {\n      return { start: 0, end: totalLines }\n    }\n\n    // Calculate visible range\n    const rect = element.getBoundingClientRect()\n    const offsetTop = rect.top + window.scrollY\n    const viewportTop = Math.max(0, window.scrollY - offsetTop - numericBuffer)\n    const viewportBottom = viewportTop + window.innerHeight + numericBuffer * 2\n\n    const start = Math.max(0, Math.floor(viewportTop / lineHeight))\n    const end = Math.min(totalLines, Math.ceil(viewportBottom / lineHeight))\n\n    return { start, end }\n  }, [totalLines, lineHeight, containerRef, numericBuffer])\n\n  const [visibleRange, setVisibleRange] = useState(calculateRange)\n\n  // Subscribe to window events using our helper\n  useWindowEvents(['scroll', 'resize'], () => {\n    updateRangeThrottled()\n  })\n\n\n  // Throttle updates for performance\n  const updateRange = useCallback(() => {\n    setVisibleRange(prev => {\n      const next = calculateRange()\n      return prev.start !== next.start || prev.end !== next.end ? next : prev\n    })\n  }, [calculateRange])\n\n  const updateRangeThrottled = useMemo(() => rafThrottle(updateRange), [updateRange])\n\n  useLayoutEffect(() => {\n    const element = containerRef.current\n    if (!element) return\n\n    // Use IntersectionObserver for visibility tracking\n    const observer = new IntersectionObserver(updateRangeThrottled, { threshold: 0 })\n    observer.observe(element)\n    updateRangeThrottled()\n\n    return () => {\n      observer.disconnect()\n    }\n  }, [containerRef, calculateRange, updateRangeThrottled])\n\n  return visibleRange\n}\n\n/** Helper hook to manage multiple window event listeners. */\nfunction useWindowEvents(events: string[], handler: () => void) {\n  const stableHandler = useCallback(handler, [handler])\n\n  useLayoutEffect(() => {\n    const wrappedHandler = () => stableHandler()\n    events.forEach(evt => window.addEventListener(evt, wrappedHandler))\n    return () => events.forEach(evt => window.removeEventListener(evt, wrappedHandler))\n  }, [events, stableHandler])\n}\n\n","import { useMemo, useRef, RefObject } from 'react'\nimport { useMeasure } from './useMeasure'\nimport { calculateSnappedSpacing } from '@utils'\nimport type { SnappingMode, Padding } from '@components'\nimport { parsePadding } from '@utils'\n\nexport interface BaselineOptions {\n  /* Base unit for alignment (default 8). */\n  base?: number\n  /** Snapping strategy: 'none' | 'height' | 'clamp'. */\n  snapping?: SnappingMode\n  /** Initial padding config.  e.g. { top: 10, bottom: 20 } or just 8, etc. */\n  spacing?: Partial<Padding> | number\n  /** Whether to warn in the console if the measured height is not a multiple of base. */\n  warnOnMisalignment?: boolean\n}\n\nexport interface BaselineResult {\n  padding: Padding\n  isAligned: boolean\n  height: number\n}\n\n/**\n *  Hook for managing baseline grid alignment in components.\n *\n *  @remarks\n *  This hook handles the complex calculations needed to maintain baseline grid\n *  alignment, including:\n *    ▪\tMeasuring element dimensions\n *    ▪\tCalculating padding adjustments\n *    ▪\tPotentially snapping values to ensure multiples of the base\n *    ▪\tWarning about misalignments in development\n *\n *  Different snapping modes affect how spacing is adjusted:\n *    ▪\t'none': Uses raw spacing values without adjustment\n *    ▪\t'height': Adjusts only the final (bottom) padding to align\n *    ▪\t'clamp': Adjusts top and bottom to align\n *\n *  @param ref Reference to the DOM element\n *  @param options Configuration options for alignment behavior\n *  @returns Object with adjusted padding, alignment status, and height\n *\n *  @example\n *  function MyComponent() {\n *  const ref = useRef<HTMLDivElement>(null)\n *  const { padding, isAligned } = useBaseline(ref, {\n *  base: 8,\n *  snapping: 'height',\n *  spacing: { top: 10, bottom: 20 },\n *  warnOnMisalignment: true,\n *  })\n *\n *  return (\n *  <div\n *    ref={ref}\n *    style={{\n *      paddingTop: padding.top,\n *      paddingBottom: padding.bottom,\n *    }}\n *  >\n *    Content\n *  </div>\n *  )\n *  }\n */\nexport function useBaseline(\n  ref: RefObject<HTMLElement | null>,\n  {\n    base = 8,\n    snapping = 'none',\n    spacing = {},\n    warnOnMisalignment = false,\n  }: BaselineOptions = {},\n): BaselineResult {\n  if (base < 1) {\n    throw new Error('Base must be >= 1 for baseline alignment.')\n  }\n  // Measure the element’s dimensions (via ResizeObserver).\n  const { height } = useMeasure(ref)\n  // Track whether we've already snapped once for this component.\n  const didSnapRef = useRef<boolean>(false)\n  return useMemo(() => {\n    // Convert the spacing prop into { top, right, bottom, left } numeric values.\n    const initialPadding = parsePadding({ padding: spacing })\n    const isAligned = height % base === 0\n    if (!isAligned && warnOnMisalignment && process.env.NODE_ENV === 'development') {\n      console.warn(\n        `[useBaseline] Element height (${height}px) is not aligned with base (${base}px).`,\n      )\n    }\n\n    // If snapping is disabled, just return the original padding.\n    if (snapping === 'none') {\n      return { padding: initialPadding, isAligned, height }\n    }\n\n    // If we've already snapped once, just reuse the original (or store the\n    // snapped result in a ref if you prefer).\n    if (didSnapRef.current) {\n      return { padding: initialPadding, isAligned, height }\n    }\n\n    // Snap exactly once.\n    const finalPadding = calculateSnappedSpacing(height, base, initialPadding, snapping)\n    didSnapRef.current = true\n\n    return { padding: finalPadding, isAligned, height }\n  }, [base, snapping, spacing, warnOnMisalignment, height])\n}","/**\n * @file useGuide Hook\n * @description Manages grid layout calculations for guide overlays\n * @module hooks\n */\n\nimport { useMemo, RefObject } from 'react'\nimport { GuideConfig, GuideColumnsPattern, isValidGuidePattern } from '@components'\nimport { formatValue, convertValue, normalizeValue } from '@utils'\nimport { useMeasure } from './useMeasure'\n\nexport interface GuideResult {\n  /** CSS grid template string */\n  template: string;\n  /** Total number of columns */\n  columnsCount: number;\n  /** Final gap size in pixels */\n  calculatedGap: number;\n  /** Whether the configuration is valid */\n  isValid: boolean;\n}\n\n/**\n * Hook for calculating grid layout parameters based on container dimensions.\n *\n * @remarks\n * This hook handles complex grid calculations for different layout variants:\n * - 'line': Evenly spaced vertical lines\n * - 'pattern': Custom repeating column patterns\n * - 'fixed': Set number of columns with optional width\n * - 'auto': Dynamic columns based on available space\n *\n * Key features:\n * - Responsive grid calculations\n * - Pattern validation\n * - Gap management\n * - Error handling\n *\n * @param ref - Reference to container element\n * @param config - Grid configuration object\n * @returns Grid calculation results\n *\n * @example\n * ```tsx\n * function GridOverlay() {\n *   const ref = useRef<HTMLDivElement>(null);\n *   const { template, columnsCount } = useGuide(ref, {\n *     variant: 'fixed',\n *     columns: 12,\n *     gap: 16,\n *     base: 8\n *   });\n *\n *   return (\n *     <div\n *       ref={ref}\n *       style={{\n *         display: 'grid',\n *         gridTemplateColumns: template,\n *         gap: calculatedGap\n *       }}\n *     >\n *       {Array(columnsCount).fill(null).map((_, i) => (\n *         <div key={i} className=\"grid-line\" />\n *       ))}\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useGuide(\n  ref: RefObject<HTMLElement | null>,\n  config: GuideConfig,\n): GuideResult {\n  const { width } = useMeasure(ref)\n\n  return useMemo(() => {\n    // Default values\n    const variant = config.variant ?? 'line'\n    const gap = normalizeValue(config.gap ?? 0, {base: 1})\n\n    // Return invalid result if no width\n    if (!width) {\n      return {\n        template: 'none',\n        columnsCount: 0,\n        calculatedGap: 0,\n        isValid: false,\n      }\n    }\n\n    try {\n      switch (variant) {\n      case 'line': {\n        // Simple vertical lines\n        const columns = Math.max(1, Math.floor(width / (gap + 1)) + 1)\n        return {\n          template: `repeat(${columns}, 1px)`,\n          columnsCount: columns,\n          calculatedGap: gap,\n          isValid: true,\n        }\n      }\n\n      case 'pattern': {\n        // Custom column pattern\n        if (!isValidGuidePattern(config.columns)) {\n          throw new Error('Invalid \"pattern\" columns array')\n        }\n        const columnsArr = (config.columns as GuideColumnsPattern).map(col => {\n          if (typeof col === 'number') return `${col}px`\n          return col\n        })\n\n        // Validate no zero widths\n        if (columnsArr.some(c => c === '0' || c === '0px')) {\n          return {\n            template: 'none',\n            columnsCount: 0,\n            calculatedGap: 0,\n            isValid: false,\n          }\n        }\n\n        return {\n          template: columnsArr.join(' '),\n          columnsCount: columnsArr.length,\n          calculatedGap: gap,\n          isValid: true,\n        }\n      }\n\n      case 'fixed': {\n        // Fixed number of columns\n        const colCount = typeof config.columns === 'number' ? config.columns : 0\n        if (colCount < 1) {\n          throw new Error(`Invalid columns count: ${colCount}`)\n        }\n        const colWidth = config.columnWidth\n          ? formatValue(config.columnWidth)\n          : '1fr'\n\n        return {\n          template: `repeat(${colCount}, ${colWidth})`,\n          columnsCount: colCount,\n          calculatedGap: gap,\n          isValid: true,\n        }\n      }\n\n      case 'auto': {\n        // Auto-fitting columns\n        const colWidth = config.columnWidth ?? 'auto'\n        if (colWidth === 'auto') {\n          return {\n            template: 'repeat(auto-fit, minmax(0, 1fr))',\n            columnsCount: 1,\n            calculatedGap: gap,\n            isValid: true,\n          }\n        }\n        const colWidthStr =\n          typeof colWidth === 'number' ? `${colWidth}px` : colWidth.toString()\n\n        const pxVal = convertValue(colWidthStr) ?? 0\n        const columns = pxVal > 0\n          ? Math.max(1, Math.floor((width + gap) / (pxVal + gap)))\n          : 1\n\n        return {\n          template: `repeat(auto-fit, minmax(${colWidthStr}, 1fr))`,\n          columnsCount: columns,\n          calculatedGap: gap,\n          isValid: true,\n        }\n      }\n\n      default: {\n        // Fallback to line variant\n        console.warn(\n          `[useGuide] Unknown variant \"${variant}\". Falling back to \"line\".`,\n        )\n        const columns = Math.max(1, Math.floor(width / (gap + 1)) + 1)\n        return {\n          template: `repeat(${columns}, 1px)`,\n          columnsCount: columns,\n          calculatedGap: gap,\n          isValid: true,\n        }\n      }\n      }\n    } catch (error) {\n      console.warn('Error in useGuide:', error)\n      return {\n        template: 'none',\n        columnsCount: 0,\n        calculatedGap: 0,\n        isValid: false,\n      }\n    }\n  }, [config, width])\n}","/**\n * @file useConfig Hook\n * @description Manages component-specific theme configuration\n * @module hooks\n */\n\nimport { useMemo } from 'react'\nimport { Config, useDefaultConfig } from '@components'\n\n/** Type helper that merges base configuration with component-specific settings. */\nexport type ComponentConfig<K extends keyof Config> = Config[K] & {\n  /** Base unit for spacing calculations */\n  base: number\n}\n\n/**\n * Hook for accessing component-specific theme configuration.\n *\n * @remarks\n * This hook provides:\n * - Access to component-specific theme settings\n * - Automatic base unit inheritance\n * - Memoized configuration to prevent unnecessary updates\n * - Type-safe configuration access\n *\n * It merges:\n * - Global base unit settings\n * - Component-specific configurations\n * - Theme-based color schemes\n *\n * @param component - Name of the component requesting configuration\n * @returns Merged configuration for the specific component\n *\n * @example\n * ```tsx\n * function Box() {\n *   const config = useConfig('box');\n *\n *   return (\n *     <div style={{\n *       '--box-base': `${config.base}px`,\n *       '--box-color': config.colors.line\n *     }}>\n *       {children}\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useConfig<K extends keyof Config>(component: K): ComponentConfig<K> {\n  const defaultConfig = useDefaultConfig()\n  return useMemo(() => {\n    return Object.assign(\n      { base: defaultConfig.base },\n      defaultConfig[component],\n    ) as ComponentConfig<K>\n  }, [defaultConfig, component])\n}","/**\n * @file useDebug Hook\n * @description Manages component debugging state\n * @module hooks\n */\n\nimport { useMemo } from 'react'\nimport { DebuggingMode } from '@components'\n\ninterface DebugResult {\n  /** Whether debug visuals should be shown */\n  isShown: boolean;\n  /** Whether debug features exist but are hidden */\n  isHidden: boolean;\n  /** Whether debug features are disabled */\n  isNone: boolean;\n  /** Current debugging mode */\n  debugging: DebuggingMode | undefined;\n}\n\n/**\n * Hook for managing component debug state and visibility.\n *\n * @remarks\n * Determines the active debugging mode by:\n * - Using prop value if provided\n * - Falling back to config value if prop is undefined\n * - Computing visibility states based on active mode\n *\n * This hook helps components:\n * - Control debug visual rendering\n * - Manage debug feature states\n * - Handle prop/config inheritance\n *\n * @param debuggingProp - Optional debugging mode from props\n * @param debuggingConfig - Debugging mode from theme/config\n * @returns Debug state information\n *\n * @example\n * ```tsx\n * function DebugComponent({ debugging: debugProp }) {\n *   const { isShown, isHidden, isNone } = useDebug(\n *     debugProp,\n *     'hidden' // Default from config\n *   );\n *\n *   return (\n *     <div>\n *       {isShown && <DebugOverlay />}\n *       {!isNone && <DebugFeatures />}\n *       <Content />\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useDebug(\n  debuggingProp?: DebuggingMode,\n  debuggingConfig?: DebuggingMode,\n): DebugResult {\n  return useMemo(() => {\n    const effective = debuggingProp ?? debuggingConfig\n    return {\n      isShown: effective === 'visible',\n      isHidden: effective === 'hidden',\n      isNone: effective === 'none',\n      debugging: effective,\n    }\n  }, [debuggingProp, debuggingConfig])\n}","/**\n * @file defaults.ts\n * @description Default theme and configuration values for baseline-kit\n * @module baseline-kit/components/Config\n */\n\nimport type { Config } from './Config'\n\n/**\n * CSS variable-based color configuration for Guide component.\n * Maps each guide variant to its theme color.\n */\nconst GUIDE_COLORS = {\n  /** Color for single-line guides */\n  line: 'var(--bk-guide-color-line-theme)',\n  /** Color for pattern-based guides */\n  pattern: 'var(--bk-guide-color-pattern-theme)',\n  /** Color for auto-calculated guides */\n  auto: 'var(--bk-guide-color-auto-theme)',\n  /** Color for fixed-column guides */\n  fixed: 'var(--bk-guide-color-fixed-theme)',\n} as const\n\n/**\n * CSS variable-based color configuration for Baseline component.\n */\nconst BASELINE_COLORS = {\n  /** Color for line variant */\n  line: 'var(--bk-baseline-color-line-theme)',\n  /** Color for flat/block variant */\n  flat: 'var(--bk-baseline-color-flat-theme)',\n} as const\n\n/**\n * CSS variable-based color configuration for Spacer component.\n */\nconst SPACER_COLORS = {\n  /** Color for line-style spacers */\n  line: 'var(--bk-spacer-color-line-theme)',\n  /** Color for flat/block spacers */\n  flat: 'var(--bk-spacer-color-flat-theme)',\n  /** Color for measurement indicators */\n  text: 'var(--bk-spacer-color-text-theme)',\n} as const\n\n/**\n * CSS variable-based color configuration for Box component.\n */\nconst BOX_COLORS = {\n  /** Border color for debug outline */\n  line: 'var(--bk-box-color-line-theme)',\n  /** Background color for debug mode */\n  flat: 'var(--bk-box-color-flat-theme)',\n  /** Color for measurement indicators */\n  text: 'var(--bk-box-color-text-theme)',\n} as const\n\n/**\n * CSS variable-based color configuration for Stack/Flex component.\n */\nconst STACK_COLORS = {\n  /** Border color for debug outline */\n  line: 'var(--bk-stack-color-line-theme)',\n  /** Background color for debug mode */\n  flat: 'var(--bk-stack-color-flat-theme)',\n  /** Color for measurement indicators */\n  text: 'var(--bk-stack-color-text-theme)',\n} as const\n\n/**\n * CSS variable-based color configuration for Layout component.\n */\nconst LAYOUT_COLORS = {\n  /** Border color for debug outline */\n  line: 'var(--bk-layout-color-line-theme)',\n  /** Background color for debug mode */\n  flat: 'var(--bk-layout-color-flat-theme)',\n  /** Color for measurement indicators */\n  text: 'var(--bk-layout-color-text-theme)',\n} as const\n\n/** CSS variable for Padder component color */\nconst PADDER_COLOR = 'var(--bk-padder-color-theme)'\n\n/**\n * Default configuration for baseline-kit.\n *\n * @remarks\n * Provides the base configuration for all components including:\n * - Base unit for spacing calculations (8px default)\n * - Default component variants\n * - Initial debugging modes\n * - Theme color assignments\n *\n * Each component section includes:\n * - Visual variant selection (where applicable)\n * - Debugging mode setting\n * - Color theme assignments\n *\n * The configuration is marked as const to ensure type safety\n * and prevent accidental modifications.\n */\nexport const DEFAULT_CONFIG: Config = {\n  /** Base unit for spacing calculations (in pixels) */\n  base: 8,\n\n  /** Baseline grid configuration */\n  baseline: {\n    variant: 'line',\n    debugging: 'hidden',\n    colors: BASELINE_COLORS,\n  },\n\n  /** Guide overlay configuration */\n  guide: {\n    variant: 'line',\n    debugging: 'hidden',\n    colors: GUIDE_COLORS,\n  },\n\n  /** Spacer component configuration */\n  spacer: {\n    variant: 'line',\n    debugging: 'hidden',\n    colors: SPACER_COLORS,\n  },\n\n  /** Box component configuration */\n  box: {\n    debugging: 'hidden',\n    colors: BOX_COLORS,\n  },\n\n  /** Stack/Flex component configuration */\n  stack: {\n    debugging: 'hidden',\n    colors: STACK_COLORS,\n  },\n\n  /** Layout component configuration */\n  layout: {\n    debugging: 'hidden',\n    colors: LAYOUT_COLORS,\n  },\n\n  /** Padder component configuration */\n  padder: {\n    debugging: 'hidden',\n    color: PADDER_COLOR,\n  },\n} as const","/**\n * @file Config Component\n * @description Theme and configuration provider for baseline-kit components\n * @module components\n */\n\nimport * as React from 'react'\nimport { BaselineVariant } from '@components'\nimport { DEFAULT_CONFIG } from './defaults'\nimport type { GuideVariant, Variant } from '../types'\n\n/**\n * Controls component debugging visibility and behavior.\n *\n * @remarks\n * - `none`: Debug features are fully disabled\n * - `hidden`: Debug elements exist in DOM but are not visible\n * - `visible`: Debug elements are fully rendered and visible\n */\nexport type DebuggingMode = 'none' | 'hidden' | 'visible'\n\n/** Color configuration for component themes. */\ntype Colors = {\n  /** Color for line-based visuals */\n  line: string;\n  /** Color for flat surface visuals */\n  flat: string;\n  /** Color for measurement indicators */\n  text: string;\n}\n\n/** Complete configuration schema for baseline-kit. */\nexport type Config = {\n  /** Base unit for spacing calculations */\n  base: number;\n  /** Guide component configuration */\n  guide: {\n    variant: GuideVariant;\n    debugging: DebuggingMode;\n    colors: Record<GuideVariant, string>;\n  };\n  /** Baseline component configuration */\n  baseline: {\n    variant: BaselineVariant;\n    debugging: DebuggingMode;\n    colors: Record<BaselineVariant, string>;\n  };\n  /** Stack component configuration */\n  stack: {\n    colors: Colors;\n    debugging: DebuggingMode;\n  };\n  /** Layout component configuration */\n  layout: {\n    colors: Colors;\n    debugging: DebuggingMode;\n  };\n  /** Spacer component configuration */\n  spacer: {\n    variant: Variant;\n    debugging: DebuggingMode;\n    colors: Colors;\n  };\n  /** Box component configuration */\n  box: {\n    colors: Colors;\n    debugging: DebuggingMode;\n  };\n  /** Padder component configuration */\n  padder: {\n    color: string;\n    debugging: DebuggingMode;\n  };\n}\n\nconst ConfigContext = React.createContext<Config | null>(null)\nConfigContext.displayName = 'ConfigContext'\n\nexport const useDefaultConfig = () => React.use(ConfigContext) ?? DEFAULT_CONFIG\n\ntype ConfigProps = {\n  children: React.ReactNode;\n  /** Base unit for spacing calculations */\n  base?: number;\n  /** Baseline component overrides */\n  baseline?: Partial<Config['baseline']>;\n  /** Flex component overrides */\n  stack?: Partial<Config['stack']>;\n  /** Layout component overrides */\n  layout?: Partial<Config['layout']>;\n  /** Guide component overrides */\n  guide?: Partial<Config['guide']>;\n  /** Spacer component overrides */\n  spacer?: Partial<Config['spacer']>;\n  /** Box component overrides */\n  box?: Partial<Config['box']>;\n  /** Padder component overrides */\n  padder?: Partial<Config['padder']>;\n}\n\n/** Creates CSS variables from the configuration object. */\nexport const createCSSVariables = ({\n  base,\n  baseline,\n  guide,\n  stack,\n  spacer,\n  layout,\n  box,\n  padder,\n}: Config): Record<string, string> => ({\n  '--bkb': `${base}px`,\n\n  // Baseline Colors\n  '--bkbcl': baseline.colors.line,\n  '--bkbcf': baseline.colors.flat,\n\n  // Guide Colors\n  '--bkgcl': guide.colors.line,\n  '--bkgcp': guide.colors.pattern,\n  '--bkgca': guide.colors.auto,\n  '--bkgcf': guide.colors.fixed,\n\n  // Spacer Colors\n  '--bkscl': spacer.colors.line,\n  '--bkscf': spacer.colors.flat,\n  '--bksci': spacer.colors.text,\n\n  // Box Colors\n  '--bkxcl': box.colors.line,\n  '--bkxcf': box.colors.flat,\n  '--bkxci': box.colors.text,\n\n  // Flex Colors\n  '--bkkcl': stack.colors.line,\n  '--bkkcf': stack.colors.flat,\n  '--bkkci': stack.colors.text,\n\n  // Layout Colors\n  '--bklcl': layout.colors.line,\n  '--bklcf': layout.colors.flat,\n  '--bklci': layout.colors.text,\n\n  // Padder Color\n  '--bkpc': padder.color,\n})\n\n/**\n * Configuration provider for baseline-kit components.\n *\n * @remarks\n * Config provides theme and debugging settings to all nested components.\n * It allows for:\n * - Global base unit configuration\n * - Component-specific color themes\n * - Debug mode control\n * - Visual style customization\n *\n * Configs can be nested to override settings for specific sections.\n *\n * @example\n * ```tsx\n * // Basic global configuration\n * <Config base={8}>\n *   <App />\n * </Config>\n *\n * // Component-specific overrides\n * <Config\n *   base={8}\n *   guide={{\n *     debugging: \"visible\",\n *     colors: {\n *       line: \"rgba(255,0,0,0.2)\",\n *       pattern: \"rgba(0,0,255,0.2)\"\n *     }\n *   }}\n * >\n *   <Layout>...</Layout>\n * </Config>\n *\n * // Nested configurations\n * <Config base={8}>\n *   <div>Uses 8px base</div>\n *   <Config base={4}>\n *     <div>Uses 4px base</div>\n *   </Config>\n * </Config>\n * ```\n */\nexport function Config({\n  children,\n  base,\n  stack,\n  baseline,\n  guide,\n  layout,\n  spacer,\n  box,\n  padder,\n}: ConfigProps) {\n  const parentConfig = useDefaultConfig()\n\n  const value = React.useMemo(() => {\n    const newConfig: Config = {\n      base: base ?? parentConfig.base,\n      baseline: { ...parentConfig.baseline, ...baseline },\n      guide: { ...parentConfig.guide, ...guide },\n      spacer: { ...parentConfig.spacer, ...spacer },\n      box: { ...parentConfig.box, ...box },\n      stack: { ...parentConfig.stack, ...stack },\n      layout: { ...parentConfig.layout, ...layout },\n      padder: { ...parentConfig.padder, ...padder },\n    }\n\n    return {\n      ...newConfig,\n      cssVariables: createCSSVariables(newConfig),\n    }\n  }, [\n    base,\n    parentConfig.base,\n    parentConfig.baseline,\n    parentConfig.guide,\n    parentConfig.spacer,\n    parentConfig.box,\n    parentConfig.stack,\n    parentConfig.layout,\n    parentConfig.padder,\n    baseline,\n    guide,\n    spacer,\n    box,\n    stack,\n    layout,\n    padder,\n  ])\n\n  return (\n    <ConfigContext value={value}>\n      {children}\n    </ConfigContext>\n  )\n}","/**\n * @file Spacer Component\n * @description Flexible spacing element with measurement indicators\n * @module components\n */\n\nimport * as React from 'react'\nimport { useConfig, useDebug } from '@hooks'\nimport { mergeStyles, mergeClasses, formatValue, normalizeValuePair } from '@utils'\nimport { ComponentsProps, Variant } from '../types'\nimport styles from './styles.module.css'\n\nexport type IndicatorNode = (\n  value: number,\n  dimension: 'width' | 'height',\n) => React.ReactNode\n\nexport type SpacerProps = {\n  /** Render function for custom measurement display */\n  indicatorNode?: IndicatorNode;\n  /** Visual style when debugging is enabled */\n  variant?: Variant;\n  /** Base unit for measurements (defaults to theme value) */\n  base?: number;\n  /** Color override for visual indicators */\n  color?: string;\n} & ComponentsProps\n\nexport const Spacer = React.memo(function Spacer({\n  height,\n  width,\n  indicatorNode,\n  debugging,\n  variant: variantProp,\n  base: baseProp,\n  color: colorProp,\n  className,\n  style,\n  ...props\n}: SpacerProps) {\n  const ref = React.useRef<HTMLDivElement>(null)\n  const config = useConfig('spacer')\n\n  const { isShown } = useDebug(debugging, config.debugging)\n  const variant = variantProp ?? config.variant\n  const base = baseProp ?? config.base\n\n  const [normWidth, normHeight] = normalizeValuePair(\n    [width, height], [0, 0], { base, suppressWarnings: true },\n  )\n\n  const measurements = React.useMemo(() => {\n    if (!isShown || !indicatorNode) return null\n\n    return [\n      normHeight !== 0 && (\n        <span key=\"height\">\n          {indicatorNode(normHeight, 'height')}\n        </span>\n      ),\n      normWidth !== 0 && (\n        <span key=\"width\">\n          {indicatorNode(normWidth, 'width')}\n        </span>\n      ),\n    ].filter(Boolean)\n  }, [isShown, indicatorNode, normHeight, normWidth])\n\n  // IMPORTANT: Correct default key for spacer base, using \"--bk-spacer-base\"\n  const defaultSpacerStyles: Record<string, string> = React.useMemo(() => ({\n    '--bksh': '100%',\n    '--bksw': '100%',\n    '--bksb': `${config.base}px`,\n    '--bksci': 'var(--bk-spacer-color-text-theme)',\n    '--bkscl': 'var(--bk-spacer-color-line-theme)',\n    '--bkscf': 'var(--bk-spacer-color-flat-theme)',\n  }), [config.base])\n\n  const getStyleOverride = React.useCallback(\n    (key: string, value: string): Record<string, string | number> => {\n      // For width/height, if the computed value is \"100%\" skip inline injection\n      if ((key === '--bksw' || key === '--bksh') && value === '100%') {\n        return {}\n      }\n      return value !== defaultSpacerStyles[key] ? { [key]: value } : {}\n    },\n    [defaultSpacerStyles],\n  )\n\n  const containerStyles = React.useMemo(() => {\n    const heightValue = formatValue(normHeight || '100%')\n    const widthValue = formatValue(normWidth || '100%')\n    const baseValue = `${baseProp || config.base}px`\n\n    const customStyles = {\n      ...getStyleOverride('--bksh', heightValue),\n      ...getStyleOverride('--bksw', widthValue),\n      ...getStyleOverride('--bksb', baseValue),\n      ...getStyleOverride(\n        '--bksci',\n        colorProp ?? config.colors.text,\n      ),\n      ...getStyleOverride(\n        '--bkscl',\n        colorProp ?? config.colors.line,\n      ),\n      ...getStyleOverride(\n        '--bkscf',\n        colorProp ?? config.colors.flat,\n      ),\n    } as React.CSSProperties\n\n    return mergeStyles(customStyles, style)\n  }, [getStyleOverride, normHeight, normWidth, config.base, colorProp,\n    config.colors.text, config.colors.line, config.colors.flat, style])\n\n  return (\n    <div\n      ref={ref}\n      data-testid=\"spacer\"\n      className={mergeClasses(styles.spr, isShown && styles[variant], className)}\n      data-variant={variant}\n      style={containerStyles}\n      {...props}\n    >\n      {measurements}\n    </div>\n  )\n})","/**\n * @file Padder Component\n * @description Low-level padding management with visual debugging\n * @module components\n */\n\nimport * as React from 'react'\nimport { useConfig, useDebug, useBaseline } from '@hooks'\nimport {\n  mergeClasses,\n  mergeStyles,\n  parsePadding,\n  mergeRefs,\n  formatValue,\n} from '@utils'\nimport { ComponentsProps } from '../types'\nimport { IndicatorNode, Spacer } from '../Spacer'\nimport styles from './styles.module.css'\n\ntype RenderSpacerFn = (\n  width: React.CSSProperties['width'],\n  height: React.CSSProperties['height']\n) => React.ReactNode\n\ntype PadderProps = {\n  /** Render function for custom measurement indicators */\n  indicatorNode?: IndicatorNode\n  children?: React.ReactNode\n} & ComponentsProps\n\n/**\n * A foundational component that manages consistent padding with visual debugging.\n *\n * @remarks\n * Padder is a low-level utility that:\n * - Applies consistent padding around content\n * - Supports visual debugging of spacing\n * - Maintains baseline grid alignment\n * - Uses Spacer components for visual padding representation\n *\n * When debugging is enabled (`\"visible\"` or `\"hidden\"`), padding is represented\n * using Spacer components. When debugging is `\"none\"`, direct CSS padding is\n * applied for better performance.\n *\n * @example\n * ```tsx\n * // Basic usage\n * <Padder block={16} inline={8}>\n *   <div>Content with consistent padding</div>\n * </Padder>\n *\n * // With debug visuals and custom indicators\n * <Padder\n *   block={[8, 16]}\n *   inline={[16, 24]}\n *   debugging=\"visible\"\n *   indicatorNode={(value, dim) => (\n *     <span className=\"text-sm\">{dim}: {value}px</span>\n *   )}\n * >\n *   <div>Content with visible padding guides</div>\n * </Padder>\n *\n * // Direct padding mode\n * <Padder\n *   block={16}\n *   inline={24}\n *   debugging=\"none\"\n * >\n *   <div>Content with direct CSS padding</div>\n * </Padder>\n * ```\n */\nexport const Padder = React.memo(\n  React.forwardRef<HTMLDivElement, PadderProps>(function Padder(\n    {\n      children,\n      className,\n      debugging: debuggingProp,\n      height,\n      indicatorNode,\n      style,\n      width,\n      ...spacingProps\n    },\n    ref\n  ) {\n    const config = useConfig('padder')\n    const { variant } = useConfig('spacer')\n    const initialPadding = React.useMemo(\n      () => parsePadding(spacingProps),\n      [spacingProps]\n    )\n    const { isShown, isNone, debugging } = useDebug(\n      debuggingProp,\n      config.debugging\n    )\n    const enableSpacers = !isNone\n\n    const internalRef = React.useRef<HTMLDivElement | null>(null)\n    const {\n      padding: { top, left, bottom, right },\n    } = useBaseline(internalRef, {\n      base: config.base,\n      snapping: 'height',\n      spacing: initialPadding,\n      warnOnMisalignment: !isNone,\n    })\n\n    const setRefs = mergeRefs(ref, internalRef)\n\n    const containerStyles = React.useMemo(() => {\n      const stylesObj: Record<string, string> = {}\n\n      // Only inject width/height if they differ from defaults\n      if (width !== 'fit-content') {\n        stylesObj['--bkpw'] = formatValue(width || 'fit-content')\n      }\n      if (height !== 'fit-content') {\n        stylesObj['--bkph'] = formatValue(height || 'fit-content')\n      }\n      // Only inject base if it differs from theme\n      if (config.base !== 8) {\n        stylesObj['--bkpb'] = `${config.base}px`\n      }\n      // Only inject color if it differs from theme\n      if (config.color !== 'var(--bk-padder-color-theme)') {\n        stylesObj['--bkpc'] = config.color\n      }\n\n      // When spacers are disabled (i.e. debugging === \"none\"), add direct padding styles\n      if (!enableSpacers) {\n        if (top > 0 || bottom > 0) {\n          stylesObj.paddingBlock = `${top}px ${bottom}px`\n        }\n        if (left > 0 || right > 0) {\n          stylesObj.paddingInline = `${left}px ${right}px`\n        }\n      }\n\n      return mergeStyles(stylesObj as React.CSSProperties, style)\n    }, [\n      width,\n      height,\n      config.base,\n      config.color,\n      enableSpacers,\n      top,\n      right,\n      bottom,\n      left,\n      style,\n    ])\n\n    const renderSpacer: RenderSpacerFn = (widthVal, heightVal) => (\n      <Spacer\n        variant={variant}\n        debugging={debugging}\n        indicatorNode={indicatorNode}\n        height={heightVal !== '100%' ? heightVal : undefined}\n        width={widthVal !== '100%' ? widthVal : undefined}\n      />\n    )\n\n    // When debugging is \"none\", simply return a container with direct CSS padding\n    // and no additional grid/Spacer elements.\n    if (!enableSpacers) {\n      return (\n        <div\n          ref={setRefs}\n          data-testid=\"padder\"\n          className={mergeClasses(styles.pad, className)}\n          style={containerStyles}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    // When debugging is enabled, use a grid structure with wrapping spacer elements.\n    return (\n      <div\n        ref={setRefs}\n        data-testid=\"padder\"\n        className={mergeClasses(styles.pad, isShown && styles.v, className)}\n        style={containerStyles}\n      >\n        <>\n          {/* Top spacer - spans full width */}\n          {top > 0 && (\n            <div style={{ gridColumn: '1 / -1' }}>\n              {renderSpacer('100%', top)}\n            </div>\n          )}\n\n          {/* Left spacer */}\n          {left > 0 && (\n            <div style={{ gridRow: '2 / 3' }}>{renderSpacer(left, '100%')}</div>\n          )}\n        </>\n\n        {/* Main content - centered in grid */}\n        <div style={{ gridRow: '2 / 3', gridColumn: '2 / 3' }}>{children}</div>\n\n        <>\n          {/* Right spacer */}\n          {right > 0 && (\n            <div style={{ gridRow: '2 / 3' }}>\n              {renderSpacer(right, '100%')}\n            </div>\n          )}\n\n          {/* Bottom spacer - spans full width */}\n          {bottom > 0 && (\n            <div style={{ gridColumn: '1 / -1' }}>\n              {renderSpacer('100%', bottom)}\n            </div>\n          )}\n        </>\n      </div>\n    )\n  })\n)\n","/**\n * @file Layout Component\n * @description Grid-based layout component with baseline alignment\n * @module components\n */\n\nimport * as React from 'react'\nimport type { Gaps, IndicatorNode } from '@components'\nimport { useConfig, useDebug, useBaseline } from '@hooks'\nimport { mergeStyles, mergeClasses, parsePadding, formatValue } from '@utils'\nimport { Config } from '../Config'\nimport { Padder } from '../Padder'\nimport { ComponentsProps, Variant } from '../types'\nimport styles from './styles.module.css'\n\nexport type LayoutProps = {\n  /**\n   * Grid column definition. Supports:\n   * - Number: Equal columns (3 → repeat(3, 1fr))\n   * - String: Raw template (\"1fr auto 200px\")\n   * - Array: Mixed values ([100, '1fr'] → \"100px 1fr\")\n   */\n  columns?: number | string | Array<number | string>\n  /** Grid row definition (same format as columns) */\n  rows?: number | string | Array<number | string>\n  /** Controls item alignment along column axis */\n  justifyItems?: React.CSSProperties['justifyItems']\n  /** Controls item alignment along row axis */\n  alignItems?: React.CSSProperties['alignItems']\n  /** Controls content distribution along row axis */\n  justifyContent?: React.CSSProperties['justifyContent']\n  /** Controls content distribution along column axis */\n  alignContent?: React.CSSProperties['alignContent']\n  /** Custom measurement indicator renderer */\n  indicatorNode?: IndicatorNode\n  /** Visual style in debug mode */\n  variant?: Variant\n  children?: React.ReactNode\n} & ComponentsProps &\n  Gaps\n\n/** Parses grid template definitions into CSS grid-template values. */\nfunction getGridTemplate(prop?: number | string | Array<number | string>) {\n  if (typeof prop === 'number') return `repeat(${prop}, 1fr)`\n  if (typeof prop === 'string') return prop\n  if (Array.isArray(prop)) {\n    return prop.map((p) => (typeof p === 'number' ? `${p}px` : p)).join(' ')\n  }\n  return 'repeat(auto-fit, minmax(100px, 1fr))'\n}\n\n/**\n * A grid-based layout component with baseline alignment and responsive columns.\n *\n * @remarks\n * Layout provides a CSS Grid container that:\n * - Supports flexible column definitions\n * - Maintains baseline grid alignment\n * - Includes gap management\n * - Offers comprehensive alignment controls\n * - Provides debug overlays for visual verification\n *\n * When no explicit dimensions are provided, Layout defaults to \"auto\"\n * for both width and height.\n *\n * @example\n * ```tsx\n * // Basic equal columns\n * <Layout columns={3} gap={16}>\n *   <div>Column 1</div>\n *   <div>Column 2</div>\n *   <div>Column 3</div>\n * </Layout>\n *\n * // Mixed column widths with alignment\n * <Layout\n *   columns={['200px', '1fr', '2fr']}\n *   gap={24}\n *   alignItems=\"center\"\n *   justifyContent=\"space-between\"\n * >\n *   <div>Fixed</div>\n *   <div>Flexible</div>\n *   <div>Double width</div>\n * </Layout>\n * ```\n */\nexport const Layout = React.memo(function Layout({\n  children,\n  columns,\n  rows,\n  rowGap,\n  columnGap,\n  gap,\n  height,\n  width,\n  indicatorNode,\n  justifyItems,\n  alignItems,\n  justifyContent,\n  alignContent,\n  className,\n  variant,\n  style,\n  debugging,\n  ...spacingProps\n}: LayoutProps) {\n  const config = useConfig('layout')\n  const { isShown } = useDebug(debugging, config.debugging)\n  const layoutRef = React.useRef<HTMLDivElement>(null)\n\n  const initialPadding = React.useMemo(\n    () => parsePadding(spacingProps),\n    [spacingProps],\n  )\n  const { padding } = useBaseline(layoutRef, {\n    base: config.base,\n    snapping: 'height',\n    spacing: initialPadding,\n    warnOnMisalignment: true,\n  })\n\n  const gridTemplateColumns = React.useMemo(\n    () => getGridTemplate(columns),\n    [columns],\n  )\n\n  const gridTemplateRows = React.useMemo(\n    () => (rows ? getGridTemplate(rows) : 'auto'),\n    [rows],\n  )\n\n  const defaultLayoutStyles: Record<string, string> = React.useMemo(\n    () => ({\n      '--bklw': 'auto',\n      '--bklh': 'auto',\n      '--bklcl': config.colors.line,\n      '--bklcf': config.colors.flat,\n      '--bklci': config.colors.text,\n    }),\n    [config.colors.line, config.colors.flat, config.colors.text],\n  )\n\n  const getLayoutStyleOverride = React.useCallback(\n    (key: string, value: string): Record<string, string | number> => {\n      // For width/height, if value is \"auto\" skip injection.\n      if ((key === '--bklw' || key === '--bklh') && value === 'auto') {\n        return {}\n      }\n      return value !== defaultLayoutStyles[key] ? { [key]: value } : {}\n    },\n    [defaultLayoutStyles],\n  )\n\n  const gridGapStyles = React.useMemo(\n    () => ({\n      ...(gap !== undefined && { gap: formatValue(gap) }),\n      ...(rowGap !== undefined && { rowGap: formatValue(rowGap) }),\n      ...(columnGap !== undefined && { columnGap: formatValue(columnGap) }),\n    }),\n    [gap, rowGap, columnGap],\n  )\n\n  const containerStyles = React.useMemo(() => {\n    const widthValue = formatValue(width || 'auto')\n    const heightValue = formatValue(height || 'auto')\n\n    return mergeStyles(\n      {\n        // Theme overrides\n        ...getLayoutStyleOverride('--bklw', widthValue),\n        ...getLayoutStyleOverride('--bklh', heightValue),\n        ...getLayoutStyleOverride('--bklcl', config.colors.line),\n        ...getLayoutStyleOverride('--bklcf', config.colors.flat),\n        ...getLayoutStyleOverride('--bklci', config.colors.text),\n\n        // Grid properties - only inject if different from defaults\n        ...(gridTemplateColumns !== 'repeat(auto-fit, minmax(100px, 1fr))' && {\n          '--bklgtc': gridTemplateColumns,\n        }),\n        ...(gridTemplateRows !== 'auto' && { '--bklgtr': gridTemplateRows }),\n        ...(justifyItems && { '--bklji': justifyItems }),\n        ...(alignItems && { '--bklai': alignItems }),\n        ...(justifyContent && { '--bkljc': justifyContent }),\n        ...(alignContent && { '--bklac': alignContent }),\n\n        // Include gap styles\n        ...gridGapStyles,\n      } as React.CSSProperties,\n      style,\n    )\n  }, [\n    gridTemplateColumns,\n    gridTemplateRows,\n    justifyItems,\n    alignItems,\n    justifyContent,\n    alignContent,\n    width,\n    height,\n    config.colors.line,\n    config.colors.flat,\n    config.colors.text,\n    getLayoutStyleOverride,\n    style,\n    gridGapStyles,\n  ])\n\n  return (\n    <Config\n      spacer={{ variant: variant ?? 'line' }}\n    >\n      <Padder\n        ref={layoutRef}\n        className={isShown ? styles.v : ''}\n        block={[padding.top, padding.bottom]}\n        indicatorNode={indicatorNode}\n        inline={[padding.left, padding.right]}\n        debugging={debugging}\n        width={width}\n        height={height}\n      >\n        <div\n          data-testid=\"layout\"\n          className={mergeClasses(className, styles.lay)}\n          style={containerStyles}\n        >\n          {children}\n        </div>\n      </Padder>\n    </Config>\n  )\n})\n","/**\n * @file Box Component\n * @description A fundamental layout container with baseline grid alignment\n * @module components\n */\n\nimport * as React from 'react'\nimport { useConfig, useDebug, useBaseline } from '@hooks'\nimport {\n  mergeClasses,\n  mergeStyles,\n  parsePadding,\n  mergeRefs,\n  formatValue,\n} from '@utils'\nimport { Config } from '../Config'\nimport { Padder } from '../Padder'\nimport { ComponentsProps } from '../types'\nimport styles from './styles.module.css'\n\n/**\n * Determines how the Box component aligns to the baseline grid.\n *\n * @remarks\n * - `none`: No snapping; uses raw spacing values as provided\n * - `height`: Only container height snaps to base unit multiples\n * - `clamp`: Both height and spacing values snap to base unit multiples\n */\nexport type SnappingMode = 'none' | 'height' | 'clamp'\n\ntype BoxProps = {\n  /** Number of columns to span in a grid layout */\n  colSpan?: number\n  /** Number of rows to span in a grid layout */\n  rowSpan?: number\n  /** Shorthand for equal column and row span. Takes precedence over individual spans */\n  span?: number\n  /** Controls baseline grid alignment behavior */\n  snapping?: SnappingMode\n  children?: React.ReactNode\n} & ComponentsProps\n\n/**\n * A foundational container component that ensures consistent spacing and baseline alignment.\n *\n * @remarks\n * Box provides a layout container that:\n * - Ensures consistent spacing aligned to the baseline grid\n * - Supports grid layout integration through span props\n * - Offers configurable snapping modes for fine-grained alignment control\n * - Includes debug overlays for visual alignment verification\n *\n * By default, Box uses \"auto\" for both width and height unless explicitly specified.\n *\n * @example\n * ```tsx\n * // Basic usage with spacing\n * <Box block={16} inline={8}>\n *   <p>Content aligned to baseline</p>\n * </Box>\n *\n * // With grid spanning and custom snapping\n * <Box\n *   colSpan={2}\n *   rowSpan={1}\n *   snapping=\"height\"\n *   debugging=\"visible\"\n * >\n *   <p>Grid-integrated content</p>\n * </Box>\n * ```\n */\nexport const Box = React.memo(\n  React.forwardRef<HTMLDivElement, BoxProps>(function Box(\n    {\n      children,\n      snapping = 'clamp',\n      debugging: debuggingProp,\n      className,\n      colSpan,\n      rowSpan,\n      span,\n      width,\n      height,\n      style,\n      ...spacingProps\n    },\n    ref,\n  ) {\n    const config = useConfig('box')\n    const { isShown, debugging } = useDebug(debuggingProp, config.debugging)\n\n    const internalRef = React.useRef<HTMLDivElement | null>(null)\n    const { top, bottom, left, right } = parsePadding(spacingProps)\n    const { padding } = useBaseline(internalRef, {\n      base: config.base,\n      snapping,\n      spacing: { top, bottom, left, right },\n      warnOnMisalignment: debugging !== 'none',\n    })\n\n    const gridSpanStyles = React.useMemo(() => {\n      const gridStyles: React.CSSProperties = {}\n      if (span !== undefined) {\n        gridStyles.gridColumn = `span ${span}`\n        gridStyles.gridRow = `span ${span}`\n      } else {\n        if (colSpan !== undefined) {\n          gridStyles.gridColumn = `span ${colSpan}`\n        }\n        if (rowSpan !== undefined) {\n          gridStyles.gridRow = `span ${rowSpan}`\n        }\n      }\n      return gridStyles\n    }, [colSpan, rowSpan, span])\n\n    const defaultBoxStyles: Record<string, string> = React.useMemo(\n      () => ({\n        '--bkxw': 'fit-content',\n        '--bkxh': 'fit-content',\n        '--bkxb': `${config.base}px`,\n        '--bkxcl': config.colors.line,\n      }),\n      [config.base, config.colors.line],\n    )\n\n    // Helper: for width/height, skip if \"auto\"\n    const getBoxStyleOverride = React.useCallback(\n      (key: string, value: string): Record<string, string | number> => {\n        if ((key === '--bkxw' || key === '--bkxh') && value === 'fit-content') {\n          return {}\n        }\n        return value !== defaultBoxStyles[key] ? { [key]: value } : {}\n      },\n      [defaultBoxStyles],\n    )\n\n    const boxStyles = React.useMemo(() => {\n      const widthValue = formatValue(width || 'fit-content')\n      const heightValue = formatValue(height || 'fit-content')\n\n      const customStyles = {\n        ...getBoxStyleOverride('--bkxw', widthValue),\n        ...getBoxStyleOverride('--bkxh', heightValue),\n        ...getBoxStyleOverride('--bkxb', `${config.base}px`),\n        ...getBoxStyleOverride('--bkxcl', config.colors.line),\n      } as React.CSSProperties\n\n      return mergeStyles(customStyles, style)\n    }, [\n      config.base,\n      config.colors.line,\n      width,\n      height,\n      getBoxStyleOverride,\n      style,\n    ])\n\n    return (\n      <div\n        ref={mergeRefs(ref, internalRef)}\n        data-testid=\"box\"\n        className={mergeClasses(styles.box, isShown && styles.v, className)}\n        style={mergeStyles(boxStyles, gridSpanStyles)}\n      >\n        <Config\n          base={1}\n          spacer={{ variant: 'flat' }}\n        >\n          <Padder\n            block={[padding.top, padding.bottom]}\n            inline={[padding.left, padding.right]}\n            width=\"fit-content\"\n            height={height}\n            debugging={debugging}\n          >\n            {children}\n          </Padder>\n        </Config>\n      </div>\n    )\n  }),\n)\n","/**\n * @file Stack Component\n * @description Flex container with baseline grid alignment\n * @module components\n */\n\nimport * as React from 'react'\nimport type { Gaps, IndicatorNode } from '@components'\nimport { useConfig, useDebug, useBaseline } from '@hooks'\nimport { mergeClasses, mergeStyles, parsePadding, formatValue } from '@utils'\nimport { Padder } from '../Padder'\nimport { Config } from '../Config'\nimport { ComponentsProps, Variant } from '../types'\nimport styles from './styles.module.css'\n\nexport type StackProps = {\n  /** Main axis orientation */\n  direction?: 'row' | 'column'\n  /** Distribution of space on main axis */\n  justify?: React.CSSProperties['justifyContent']\n  /** Alignment on cross axis */\n  align?: React.CSSProperties['alignItems']\n  /** Container width (defaults to \"auto\") */\n  width?: React.CSSProperties['width']\n  /** Container height (defaults to \"auto\") */\n  height?: React.CSSProperties['height']\n  /** Custom measurement indicator renderer */\n  indicatorNode?: IndicatorNode\n  /** Visual style in debug mode */\n  variant?: Variant\n  children?: React.ReactNode\n} & ComponentsProps &\n  Gaps\n\n/**\n * A flexible container component aligning children to the baseline grid.\n *\n * @remarks\n * Stack provides a flex container that:\n * - Maintains baseline grid alignment\n * - Supports both row and column layouts\n * - Handles consistent spacing between items\n * - Includes visual debug overlays\n *\n * Key features:\n * - Automatic dimension management (defaults to auto)\n * - Direct padding application in non-debug mode\n * - Comprehensive alignment controls\n * - Theme-aware debug visuals\n *\n * @example\n * ```tsx\n * // Basic horizontal stack\n * <Stack gap={16}>\n *   <div>Item 1</div>\n *   <div>Item 2</div>\n * </Stack>\n *\n * // Vertical stack with alignment\n * <Stack\n *   direction=\"column\"\n *   gap={24}\n *   align=\"center\"\n *   justify=\"space-between\"\n *   debugging=\"visible\"\n * >\n *   <div>Top</div>\n *   <div>Middle</div>\n *   <div>Bottom</div>\n * </Stack>\n *\n * // Complex layout with padding\n * <Stack\n *   direction=\"row\"\n *   gap={32}\n *   align=\"stretch\"\n *   block={[16, 24]}\n *   inline={16}\n *   debugging=\"visible\"\n * >\n *   <div>Panel 1</div>\n *   <div>Panel 2</div>\n * </Stack>\n * ```\n */\nexport const Stack = React.memo(function Stack({\n  align = 'flex-start',\n  children,\n  className,\n  columnGap,\n  debugging: debuggingProp,\n  direction = 'row',\n  gap,\n  height,\n  indicatorNode,\n  justify = 'flex-start',\n  rowGap,\n  style,\n  variant,\n  width,\n  ...spacingProps\n}: StackProps) {\n  const config = useConfig('stack')\n  const { isShown, debugging } = useDebug(debuggingProp, config.debugging)\n  const stackRef = React.useRef<HTMLDivElement | null>(null)\n\n  const initialPadding = React.useMemo(\n    () => parsePadding(spacingProps),\n    [spacingProps],\n  )\n  const { padding } = useBaseline(stackRef, {\n    base: config.base,\n    snapping: 'height',\n    spacing: initialPadding,\n    warnOnMisalignment: true,\n  })\n\n  const stackGapStyles = React.useMemo(\n    () => ({\n      rowGap,\n      columnGap,\n      ...(gap !== undefined && { gap }),\n    }),\n    [rowGap, columnGap, gap],\n  )\n\n  const defaultStackStyles: Record<string, string> = React.useMemo(\n    () => ({\n      '--bkkw': 'auto',\n      '--bkkh': 'auto',\n      '--bkkcl': config.colors.line,\n      '--bkkcf': config.colors.flat,\n      '--bkkci': config.colors.text,\n    }),\n    [config.colors.line, config.colors.flat, config.colors.text],\n  )\n\n  const getStackStyleOverride = React.useCallback(\n    (key: string, value: string): Record<string, string | number> => {\n      // For width, if value equals \"100%\" then skip inline override.\n      if (key === '--bkkw' && value === 'auto') return {}\n      // For height, if value equals \"auto\", skip override.\n      if (key === '--bkkh' && value === 'auto') return {}\n      return value !== defaultStackStyles[key] ? { [key]: value } : {}\n    },\n    [defaultStackStyles],\n  )\n\n  const containerStyles = React.useMemo(() => {\n    const widthValue = formatValue(width || 'auto')\n    const heightValue = formatValue(height || 'auto')\n\n    const customOverrides = {\n      ...getStackStyleOverride('--bkkw', widthValue),\n      ...getStackStyleOverride('--bkkh', heightValue),\n      ...getStackStyleOverride('--bkkcl', config.colors.line),\n      ...getStackStyleOverride('--bkkcf', config.colors.flat),\n      ...getStackStyleOverride('--bkkci', config.colors.text),\n    } as React.CSSProperties\n\n    const baseStyles = {\n      flexDirection: direction,\n      justifyContent: justify,\n      alignItems: align,\n      width,\n      height,\n    } as React.CSSProperties\n\n    return mergeStyles(baseStyles, stackGapStyles, customOverrides, style)\n  }, [\n    direction,\n    justify,\n    align,\n    width,\n    height,\n    config.colors.line,\n    config.colors.flat,\n    config.colors.text,\n    getStackStyleOverride,\n    stackGapStyles,\n    style,\n  ])\n\n  const mergedContainerStyles =\n    debugging === 'none'\n      ? {\n        ...containerStyles,\n        paddingBlock: `${padding.top}px ${padding.bottom}px`,\n        paddingInline: `${padding.left}px ${padding.right}px`,\n      }\n      : containerStyles\n\n  return (\n    <Config\n      spacer={{ variant: variant ?? 'line' }}\n    >\n      <Padder\n        ref={stackRef}\n        className={isShown ? styles.v : ''}\n        block={[padding.top, padding.bottom]}\n        inline={[padding.left, padding.right]}\n        debugging={debugging}\n        indicatorNode={indicatorNode}\n        width={width}\n        height={height}\n      >\n        <div\n          data-testid=\"stack\"\n          className={mergeClasses(className, styles.stk)}\n          style={mergedContainerStyles}\n          {...spacingProps}\n        >\n          {children}\n        </div>\n      </Padder>\n    </Config>\n  )\n})\n","/**\n * @file Guide Component\n * @description Visual grid overlay component for alignment and debugging\n * @module components\n */\n\nimport * as React from 'react'\nimport {\n  useConfig,\n  useDebug,\n  useGuide,\n  useMeasure,\n} from '@hooks'\nimport { formatValue, mergeClasses, mergeStyles, normalizeValue, parsePadding } from '@utils'\nimport { AutoConfig, FixedConfig, LineConfig, PatternConfig } from './types'\nimport type { ComponentsProps } from '../types'\nimport styles from './styles.module.css'\n\n/** Merged configuration types that support various grid layout strategies */\nexport type GuideConfig = PatternConfig | AutoConfig | FixedConfig | LineConfig;\n\nexport type GuideProps = {\n  /**\n   * Controls horizontal alignment of columns within the container.\n   * @default \"start\"\n   */\n  align?: 'start' | 'center' | 'end';\n} & ComponentsProps & GuideConfig;\n\n/**\n * A developer tool component that provides visual grid overlays for alignment.\n *\n * @remarks\n * Guide renders a configurable grid overlay that helps visualize:\n * - Column layouts and spacing\n * - Content alignment\n * - Layout patterns\n *\n * The component supports multiple variants:\n * - \"line\": Simple evenly-spaced vertical lines\n * - \"pattern\": Custom repeating column width patterns\n * - \"fixed\": Fixed number of equal or custom-width columns\n * - \"auto\": Dynamically calculated columns based on container width\n *\n * @example\n * ```tsx\n * // Basic column guide\n * <Guide\n *   variant=\"line\"\n *   gap={8}\n *   debugging=\"visible\"\n * />\n *\n * // Custom column pattern\n * <Guide\n *   variant=\"pattern\"\n *   columns={['100px', '1fr', '2fr']}\n *   gap={16}\n *   align=\"center\"\n *   debugging=\"visible\"\n * />\n *\n * // Fixed columns with custom width\n * <Guide\n *   variant=\"fixed\"\n *   columns={12}\n *   columnWidth=\"60px\"\n *   gap={8}\n *   debugging=\"visible\"\n * />\n * ```\n */\nexport const Guide = React.memo(function Guide({\n  className,\n  debugging,\n  style,\n  variant: variantProp,\n  align = 'start',\n  gap: gapProp,\n  height,\n  width,\n  columns,\n  columnWidth,\n  ...props\n}: GuideProps) {\n  const config = useConfig('guide')\n  const variant = variantProp ?? config.variant\n  const { isShown } = useDebug(debugging, config.debugging)\n  const containerRef = React.useRef<HTMLDivElement | null>(null)\n  const { width: containerWidth, height: containerHeight } = useMeasure(containerRef)\n  const { top, right, bottom, left } = React.useMemo(() => parsePadding(props), [props])\n\n  const gridConfig = React.useMemo(() => {\n    const gap = normalizeValue(gapProp)\n    return (\n      {\n        line: {\n          variant: 'line' as const,\n          gap: gap - 1,\n          base: config.base,\n        },\n        auto: columnWidth\n          ? {\n            variant: 'auto' as const,\n            columnWidth,\n            gap,\n            base: config.base,\n          }\n          : null,\n        pattern: Array.isArray(columns)\n          ? {\n            variant: 'pattern' as const,\n            columns,\n            gap,\n            base: config.base,\n          }\n          : null,\n        fixed:\n          typeof columns === 'number'\n            ? {\n              variant: 'fixed' as const,\n              columns,\n              columnWidth,\n              gap,\n              base: config.base,\n            }\n            : null,\n      }[variant] ?? {\n        variant: 'line' as const,\n        gap: gap - 1,\n        base: config.base,\n      }\n    )\n  }, [gapProp, config.base, columnWidth, columns, variant])\n\n  const {\n    template,\n    columnsCount,\n    calculatedGap,\n  } = useGuide(containerRef, gridConfig)\n\n  const defaultGuideStyles: Record<string, string> = React.useMemo(() => ({\n    '--bkgg': `${calculatedGap}px`,\n    '--bkgj': 'start',\n    '--bkgcl': config.colors.line,\n    '--bkgcp': config.colors.pattern,\n    '--bkgw': '100vw',\n    '--bkgh': '100vh',\n  }), [calculatedGap, config.colors.line, config.colors.pattern])\n\n  const getGuideStyleOverride = React.useCallback(\n    (key: string, value: string): Record<string, string> => {\n      if (\n        ((key === '--bkgw') && value === '100vw') ||\n        ((key === '--bkgh') && value === '100vh')\n      ) {\n        return {}\n      }\n      return value !== defaultGuideStyles[key] ? { [key]: value } : {}\n    },\n    [defaultGuideStyles],\n  )\n\n  // Build base styles (all as string values)\n  const baseStyles: Record<string, string> = {\n    '--bkgg': `${calculatedGap}px`,\n    '--bkgj': align,\n    '--bkgcl': config.colors.line,\n    '--bkgcp': config.colors.pattern,\n    '--bkgpb': `${top}px ${bottom}px`,\n    '--bkgpi': `${left}px ${right}px`,\n    '--bkgt': template,\n    '--bkgw': formatValue(width ?? containerWidth, 0) || '100vw',\n    '--bkgh': formatValue(height ?? containerHeight, 0) || '100vh',\n  }\n\n  const customOverrides: Record<string, string> = {\n    ...getGuideStyleOverride('--bkgw', baseStyles['--bkgw']),\n    ...getGuideStyleOverride('--bkgh', baseStyles['--bkgh']),\n    ...getGuideStyleOverride('--bkgj', align),\n    ...getGuideStyleOverride('--bkgcl', config.colors.line),\n    ...getGuideStyleOverride('--bkgcp', config.colors.pattern),\n    ...getGuideStyleOverride('--bkgg', `${calculatedGap}px`),\n  }\n\n  const containerStyles: Record<string, string> = mergeStyles(baseStyles, customOverrides, style as Record<string, string>)\n\n  return (\n    <div\n      ref={containerRef}\n      data-testid=\"guide\"\n      className={mergeClasses(\n        styles.gde,\n        className,\n        isShown ? styles.v : styles.h,\n        variant === 'line' && styles.line,\n      )}\n      data-variant={variant}\n      style={containerStyles}\n      {...props}\n    >\n      {isShown && (\n        <div className={styles.cols} data-variant={variant}>\n          {Array.from({ length: columnsCount }, (_, i) => {\n            const colColor =\n              config.colors[variant as keyof typeof config.colors] ?? config.colors.line\n            return (\n              <div\n                key={i}\n                className={styles.col}\n                data-column-index={i}\n                data-variant={variant}\n                style={{ backgroundColor: colColor }}\n              />\n            )\n          })}\n        </div>\n      )}\n    </div>\n  )\n})\n","/**\n * @file validation.ts\n * @description Validation utilities for Guide component configurations\n * @module baseline-kit/components/Guide/validation\n */\n\nimport {\n  GRID_ALIGNMENTS,\n  GridAlignment,\n  GuideColumnsPattern,\n  GuideColumnValue,\n  GuideConfig,\n} from '@components'\nimport { ABSOLUTE_UNIT_CONVERSIONS, RELATIVE_UNITS } from '@utils'\n\n/**\n * Regular expression for valid CSS unit values.\n * Matches numeric values with supported CSS units.\n */\nconst UNIT_PATTERN = /^\\d*\\.?\\d+(?:fr|px|%|em|rem|vh|vw|vmin|vmax|pt|pc|in|cm|mm)$/\n\n/**\n * Validates individual grid column values.\n *\n * @example\n * ```ts\n * isValidGuideColumnValue(100)     // true\n * isValidGuideColumnValue('100px') // true\n * isValidGuideColumnValue('auto')  // true\n * isValidGuideColumnValue('foo')   // false\n * ```\n */\nexport const isValidGuideColumnValue = (value: unknown): value is GuideColumnValue => {\n  if (typeof value === 'number') return Number.isFinite(value) && value >= 0\n  if (typeof value !== 'string') return false\n  return value === 'auto' || value === '100%' || UNIT_PATTERN.test(value)\n}\n\n/**\n * Validates an array of column values as a grid pattern.\n *\n * @example\n * ```ts\n * isValidGuidePattern(['100px', '1fr'])     // true\n * isValidGuidePattern([100, 200])           // true\n * isValidGuidePattern(['invalid'])          // false\n * isValidGuidePattern([])                   // false\n * ```\n */\nexport const isValidGuidePattern = (pattern: unknown): pattern is GuideColumnsPattern =>\n  Array.isArray(pattern) && pattern.length > 0 && pattern.every(isValidGuideColumnValue)\n\n/**\n * Validates CSS grid values against supported units.\n *\n * @example\n * ```ts\n * isGuideValue('100px')   // true\n * isGuideValue('2rem')    // true\n * isGuideValue('foo')     // false\n * ```\n */\nexport const isGuideValue = (value: unknown) => {\n  const CSS_UNITS = [...Object.keys(ABSOLUTE_UNIT_CONVERSIONS), ...RELATIVE_UNITS]\n  return (\n    typeof value === 'number' ||\n    (typeof value === 'string' && CSS_UNITS.some(unit => value.endsWith(unit)))\n  )\n}\n\n/**\n * Validates grid alignment values.\n *\n * @example\n * ```ts\n * isGuideAlignment('start')   // true\n * isGuideAlignment('center')  // true\n * isGuideAlignment('foo')     // false\n * ```\n */\nexport const isGuideAlignment = (value: unknown): value is GridAlignment =>\n  typeof value === 'string' && GRID_ALIGNMENTS.includes(value as GridAlignment)\n\n/**\n * Type guard for object values.\n */\nconst isObject = (value: unknown): value is Record<string, unknown> =>\n  typeof value === 'object' && value !== null\n\n/**\n * Validates line-based guide configurations.\n *\n * @example\n * ```ts\n * isGuideLineConfig({ variant: 'line' })           // true\n * isGuideLineConfig({ variant: 'pattern' })        // false\n * ```\n */\nexport const isGuideLineConfig = (config: unknown): config is GuideConfig =>\n  isObject(config) && config.variant === 'line'\n\n/**\n * Validates column-based guide configurations.\n *\n * @example\n * ```ts\n * isGuideColumnConfig({ columns: 12 })             // true\n * isGuideColumnConfig({ variant: 'line' })         // false\n * ```\n */\nexport const isGuideColumnConfig = (config: unknown): config is GuideConfig =>\n  isObject(config) && 'columns' in config && !('variant' in config)\n\n/**\n * Validates auto-calculated guide configurations.\n *\n * @example\n * ```ts\n * isAutoCalculatedGuide({ columnWidth: '200px' })  // true\n * isAutoCalculatedGuide({ columns: 12 })           // false\n * ```\n */\nexport const isAutoCalculatedGuide = (config: unknown): config is GuideConfig =>\n  isObject(config) &&\n  'columnWidth' in config &&\n  !('variant' in config) &&\n  !('columns' in config)","/**\n * @file Baseline Component\n * @description Horizontal grid overlay for baseline alignment\n * @module components\n */\n\nimport * as React from 'react'\nimport { ComponentsProps } from '@components'\nimport { useConfig, useDebug, useVirtual, useMeasure } from '@hooks'\nimport {\n  parsePadding,\n  normalizeValuePair,\n  mergeStyles,\n  mergeClasses,\n} from '@utils'\nimport { Variant } from '../types'\nimport styles from './styles.module.css'\n\nexport type BaselineVariant = Exclude<Variant, 'pattern'>\n\nexport type BaselineProps = {\n  /** Visual style variant for the baseline guides */\n  variant?: BaselineVariant\n  /** Explicit width for the overlay (e.g., \"1200px\" or 1200) */\n  width?: number | string\n  /** Explicit height for the overlay (e.g., \"100vh\" or 800) */\n  height?: number | string\n  /** Base unit for measurements (defaults to theme value) */\n  base?: number\n} & ComponentsProps\n\n/**\n * Renders horizontal guidelines for maintaining vertical rhythm and baseline alignment.\n *\n * @remarks\n * Baseline provides horizontal guides that:\n * - Help maintain consistent vertical spacing\n * - Support visual verification of baseline alignment\n * - Optimize performance through virtual rendering\n * - Adapt to container dimensions\n *\n * @example\n * ```tsx\n * // Basic baseline overlay\n * <Baseline\n *   height=\"100vh\"\n *   base={8}\n *   debugging=\"visible\"\n * />\n *\n * // Custom variant with padding\n * <Baseline\n *   variant=\"flat\"\n *   height=\"100vh\"\n *   base={4}\n *   block={[16, 0]}\n *   debugging=\"visible\"\n * />\n * ```\n */\nexport const Baseline = React.memo(function Baseline({\n  className,\n  debugging,\n  style,\n  variant: variantProp,\n  height: heightProp,\n  width: widthProp,\n  base: baseProp,\n  ...spacingProps\n}: BaselineProps) {\n  const config = useConfig('baseline')\n  const variant = variantProp ?? config.variant\n  const base = baseProp ?? config.base\n  const { isShown } = useDebug(debugging, config.debugging)\n\n  const containerRef = React.useRef<HTMLDivElement | null>(null)\n  const { width: containerWidth, height: containerHeight } =\n    useMeasure(containerRef)\n\n  const [normWidth, normHeight] = React.useMemo(() => {\n    return normalizeValuePair(\n      [widthProp, heightProp],\n      [containerWidth, containerHeight]\n    )\n  }, [widthProp, heightProp, containerWidth, containerHeight])\n\n  const { top, right, bottom, left } = React.useMemo(\n    () => parsePadding(spacingProps),\n    [spacingProps]\n  )\n\n  const rowCount = React.useMemo(() => {\n    const totalHeight = (normHeight ?? 0) - (top + bottom)\n    return Math.max(1, Math.floor(totalHeight / base))\n  }, [normHeight, top, bottom, base])\n\n  const { start, end } = useVirtual({\n    totalLines: rowCount,\n    lineHeight: base,\n    containerRef,\n    buffer: 160,\n  })\n\n  const chosenColor =\n    variant === 'line' ? config.colors.line : config.colors.flat\n\n  const containerStyles = React.useMemo(() => {\n    const padding = [top, right, bottom, left]\n      .map((value) => (value ? `${value}px` : '0'))\n      .join(' ')\n\n    return mergeStyles(\n      {\n        '--bkbw': widthProp ? `${normWidth}px` : '100%',\n        '--bkbh': heightProp ? `${normHeight}px` : '100%',\n        ...(padding !== '0 0 0 0' && { padding }),\n      } as React.CSSProperties,\n      style\n    )\n  }, [\n    top,\n    right,\n    bottom,\n    left,\n    widthProp,\n    normWidth,\n    heightProp,\n    normHeight,\n    style,\n  ])\n\n  const getRowStyle = React.useCallback(\n    (index: number) => {\n      const defaultRowHeight = variant === 'line' ? '1px' : `${base}px`\n      const defaultRowColor =\n        variant === 'line' ? config.colors.line : config.colors.flat\n\n      return mergeStyles({\n        '--bkrt': `${index * base}px`,\n        ...(defaultRowHeight !== '1px' && { '--bkrh': defaultRowHeight }),\n        ...(chosenColor !== defaultRowColor && { '--bkbcl': chosenColor }),\n      } as React.CSSProperties)\n    },\n    [base, variant, chosenColor, config.colors.line, config.colors.flat]\n  )\n\n  return (\n    <div\n      ref={containerRef}\n      data-testid=\"baseline\"\n      className={mergeClasses(\n        styles.bas,\n        isShown ? styles.v : styles.h,\n        className\n      )}\n      style={containerStyles}\n      {...spacingProps}\n    >\n      {isShown &&\n        Array.from({ length: end - start }, (_, i) => {\n          const rowIndex = i + start\n          return (\n            <div\n              className={styles.row}\n              key={rowIndex}\n              data-row-index={rowIndex}\n              style={getRowStyle(rowIndex)}\n            />\n          )\n        })}\n    </div>\n  )\n})\n","import * as React from 'react'\nimport { DebuggingMode } from '@components'\n\n// Spacing Types  --------------------------------------------------------------\n\n/**\n * Defines spacing as either a single value, start/end pair, or object with explicit edges.\n * Used for block and inline spacing across components.\n *\n * @example\n * ```tsx\n * // Single value\n * <Box block={8} />\n *\n * // Start/end pair\n * <Box block={[8, 16]} />\n *\n * // Object with explicit values\n * <Box block={{ start: 8, end: 16 }} />\n * ```\n */\nexport type Spacing =\n  | number\n  | [number, number]\n  | { start?: number; end?: number }\n\n/**\n * Flexible padding definition that supports multiple formats for setting padding on all sides.\n *\n * @example\n * ```tsx\n * // Single value for all sides\n * padding={8}\n *\n * // Block and inline pairs\n * padding={[8, 16]}\n *\n * // Explicit values for each side\n * padding={[8, 16, 8, 16]}\n *\n * // Object with named sides\n * padding={{ top: 8, right: 16, bottom: 8, left: 16 }}\n * ```\n */\nexport type PaddingValue =\n  | number\n  | [number, number]                    // [block, inline]\n  | [number, number, number, number]    // [top, right, bottom, left]\n  | {\n  top?: number;\n  bottom?: number;\n  left?: number;\n  right?: number;\n}\n\n/** Resolved padding values for all edges after normalization. */\nexport type Padding = {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n}\n\n/** Props interface for components that support spacing configuration. */\nexport type SpacingProps = {\n  padding?: PaddingValue;\n  block?: Spacing;\n  inline?: Spacing;\n}\n\n// Grid Types ------------------------------------------------------------------\n\n/** Controls how columns are laid out in grid components. */\nexport type GuideVariant = 'line' | 'pattern' | 'fixed' | 'auto'\n\n/**\n * Valid value types for grid columns. Can be a CSS length, fractional unit,\n * or 'auto' for automatic sizing.\n */\nexport type GuideColumnValue = string | number | undefined | 'auto'\n\n/** Array of column definitions for pattern-based grid layouts. */\nexport type GuideColumnsPattern = readonly GuideColumnValue[]\n\n// === Grid Constants ===\n\n/** Valid grid alignment values. */\nexport const GRID_ALIGNMENTS = ['start', 'center', 'end'] as const\nexport type GridAlignment = typeof GRID_ALIGNMENTS[number]\n\n/** Valid component variants affecting visual style. */\nexport const PADD_VARIANTS = ['line', 'flat'] as const\nexport type PaddedVariant = typeof PADD_VARIANTS[number]\n\n// Component Base Types --------------------------------------------------------\n\n/**\n * Common props shared across library components.\n * Provides consistent sizing, spacing, styling, and debugging options.\n */\nexport type ComponentsProps = {\n  debugging?: DebuggingMode;\n  className?: string;\n  style?: React.CSSProperties;\n  height?: React.CSSProperties['height'];\n  width?: React.CSSProperties['width'];\n} & SpacingProps\n\n/** Base configuration for components that support padding. */\nexport type PaddedBaseConfig = {\n  base?: number;\n  color?: React.CSSProperties['color'] | React.CSSProperties['backgroundColor'];\n  zIndex?: React.CSSProperties['zIndex'];\n}\n\nexport type Variant = 'line' | 'flat' | 'pattern'\n\nexport type Gaps = {\n  gap?: React.CSSProperties['gap']\n  rowGap?: never\n  columnGap?: never\n} | {\n  /** When using separate gaps, omit unified gap */\n  gap?: never\n  rowGap?: React.CSSProperties['rowGap']\n  columnGap?: React.CSSProperties['columnGap']\n}\n"],"names":["REACT_ELEMENT_TYPE","REACT_FRAGMENT_TYPE","jsxProd","type","config","maybeKey","key","propName","reactJsxRuntime_production","getComponentNameFromType","REACT_CLIENT_REFERENCE$2","REACT_PORTAL_TYPE","REACT_PROFILER_TYPE","REACT_STRICT_MODE_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_CONTEXT_TYPE","REACT_CONSUMER_TYPE","REACT_FORWARD_REF_TYPE","innerType","REACT_MEMO_TYPE","REACT_LAZY_TYPE","testStringCoercion","value","checkKeyStringCoercion","JSCompiler_inline_result","JSCompiler_temp_const","JSCompiler_inline_result$jscomp$0","disabledLog","disableLogs","disabledDepth","prevLog","prevInfo","prevWarn","prevError","prevGroup","prevGroupCollapsed","prevGroupEnd","props","reenableLogs","assign","describeBuiltInComponentFrame","name","prefix","x","match","suffix","describeNativeComponentFrame","fn","construct","reentry","frame","componentFrameCache","previousDispatcher","ReactSharedInternals","RunInRootFrame","Fake","control","x$0","x$1","sample","namePropDescriptor","_RunInRootFrame$Deter","sampleStack","controlStack","sampleLines","controlLines","_frame","describeUnknownElementTypeFrameInDEV","prototype","getOwner","dispatcher","hasValidKey","hasOwnProperty","getter","defineKeyPropWarningGetter","displayName","warnAboutAccessingKey","specialPropKeyWarningShown","elementRefGetterWithDeprecationWarning","componentName","didWarnAboutElementRef","ReactElement","self","source","owner","jsxDEVImpl","isStaticChildren","REACT_OFFSCREEN_TYPE","REACT_CLIENT_REFERENCE$1","children","isArrayImpl","validateChildKeys","keys","k","didWarnAboutKeySpread","node","parentType","REACT_CLIENT_REFERENCE","i","child","isValidElement","validateExplicitKey","MAYBE_ITERATOR_SYMBOL","object","element","getCurrentComponentErrorInfo","ownerHasKeyUseWarning","childOwner","prevGetCurrentStack","stack","info","React","require$$0","reactJsxRuntime_development","jsxRuntimeModule","require$$1","parseUnit","num","unit","formatValue","defaultValue","DEFAULT_CONTEXT","ABSOLUTE_UNIT_CONVERSIONS","RELATIVE_UNITS","convertValue","context","parsed","ctx","moduloize","base","options","doRound","clamp","min","max","round","precision","factor","normalizeValue","clampOptions","suppressWarnings","conv","normalized","clamped","normalizeValuePair","values","defaults","first","second","parsePadding","spacing","parsePaddingValue","blockEdges","parseBlock","inlineEdges","parseInline","padding","block","inline","top","right","bottom","left","calculateSnappedSpacing","height","initial","snapping","pad","remainder","mergeClasses","classes","mergeStyles","styles","style","assignRef","ref","error","mergeRefs","refs","debounce","delay","timer","cancel","args","rafThrottle","rafId","lastArgs","useMeasure","dimensions","setDimensions","measure","rect","next","prev","refresh","observer","useVirtual","totalLines","lineHeight","containerRef","buffer","numericBuffer","useMemo","calculateRange","useCallback","offsetTop","viewportTop","viewportBottom","start","end","visibleRange","setVisibleRange","useState","useWindowEvents","updateRangeThrottled","updateRange","useLayoutEffect","events","handler","stableHandler","wrappedHandler","evt","useBaseline","warnOnMisalignment","didSnapRef","useRef","initialPadding","isAligned","finalPadding","useGuide","width","variant","gap","columns","isValidGuidePattern","columnsArr","col","c","colCount","colWidth","colWidthStr","pxVal","useConfig","component","defaultConfig","useDefaultConfig","useDebug","debuggingProp","debuggingConfig","effective","GUIDE_COLORS","BASELINE_COLORS","SPACER_COLORS","BOX_COLORS","STACK_COLORS","LAYOUT_COLORS","PADDER_COLOR","DEFAULT_CONFIG","ConfigContext","createCSSVariables","baseline","guide","spacer","layout","box","padder","Config","parentConfig","newConfig","jsx","Spacer","indicatorNode","debugging","variantProp","baseProp","colorProp","className","isShown","normWidth","normHeight","measurements","defaultSpacerStyles","getStyleOverride","containerStyles","heightValue","widthValue","baseValue","customStyles","Padder","spacingProps","isNone","enableSpacers","internalRef","setRefs","stylesObj","renderSpacer","widthVal","heightVal","jsxs","Fragment","getGridTemplate","prop","p","Layout","rows","rowGap","columnGap","justifyItems","alignItems","justifyContent","alignContent","layoutRef","gridTemplateColumns","gridTemplateRows","defaultLayoutStyles","getLayoutStyleOverride","gridGapStyles","Box","colSpan","rowSpan","span","gridSpanStyles","gridStyles","defaultBoxStyles","getBoxStyleOverride","boxStyles","Stack","align","direction","justify","stackRef","stackGapStyles","defaultStackStyles","getStackStyleOverride","customOverrides","mergedContainerStyles","Guide","gapProp","columnWidth","containerWidth","containerHeight","gridConfig","template","columnsCount","calculatedGap","defaultGuideStyles","getGuideStyleOverride","baseStyles","_","colColor","UNIT_PATTERN","isValidGuideColumnValue","pattern","isGuideValue","CSS_UNITS","isGuideAlignment","GRID_ALIGNMENTS","isObject","isGuideLineConfig","isGuideColumnConfig","isAutoCalculatedGuide","Baseline","heightProp","widthProp","rowCount","totalHeight","chosenColor","getRowStyle","index","defaultRowHeight","defaultRowColor","rowIndex","PADD_VARIANTS"],"mappings":"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","x_google_ignoreList":[0,1,2]}