/**
 * @file useGuide Hook
 * @description Manages grid layout calculations for guide overlays
 * @module hooks
 */
import { RefObject } from 'react';
import { GuideConfig } from '@components';
export interface GuideResult {
    /** CSS grid template string */
    template: string;
    /** Total number of columns */
    columnsCount: number;
    /** Final gap size in pixels */
    calculatedGap: number;
    /** Whether the configuration is valid */
    isValid: boolean;
}
/**
 * Hook for calculating grid layout parameters based on container dimensions.
 *
 * @remarks
 * This hook handles complex grid calculations for different layout variants:
 * - 'line': Evenly spaced vertical lines
 * - 'pattern': Custom repeating column patterns
 * - 'fixed': Set number of columns with optional width
 * - 'auto': Dynamic columns based on available space
 *
 * Key features:
 * - Responsive grid calculations
 * - Pattern validation
 * - Gap management
 * - Error handling
 *
 * @param ref - Reference to container element
 * @param config - Grid configuration object
 * @returns Grid calculation results
 *
 * @example
 * ```tsx
 * function GridOverlay() {
 *   const ref = useRef<HTMLDivElement>(null);
 *   const { template, columnsCount } = useGuide(ref, {
 *     variant: 'fixed',
 *     columns: 12,
 *     gap: 16,
 *     base: 8
 *   });
 *
 *   return (
 *     <div
 *       ref={ref}
 *       style={{
 *         display: 'grid',
 *         gridTemplateColumns: template,
 *         gap: calculatedGap
 *       }}
 *     >
 *       {Array(columnsCount).fill(null).map((_, i) => (
 *         <div key={i} className="grid-line" />
 *       ))}
 *     </div>
 *   );
 * }
 * ```
 */
export declare function useGuide(ref: RefObject<HTMLElement | null>, config: GuideConfig): GuideResult;
