/**
 * @file useVirtual Hook
 * @description Manages virtual scrolling calculations
 * @module hooks
 */
import { RefObject } from 'react';
type VirtualResult = {
    /** Total number of items/lines to virtualize */
    totalLines: number;
    /** Height of each item in pixels */
    lineHeight: number;
    /** Reference to the scrollable container */
    containerRef: RefObject<HTMLDivElement | null>;
    /** Additional items to render above/below viewport */
    buffer?: number | string;
};
/**
 * Hook for optimizing large lists through virtual scrolling.
 *
 * @remarks
 * This hook helps manage virtual scrolling by:
 * - Calculating visible item ranges
 * - Handling scroll events efficiently
 * - Managing buffer zones for smooth scrolling
 * - Supporting dynamic container sizes
 *
 * Performance optimizations:
 * - RAF-based scroll handling
 * - Intersection Observer for visibility
 * - Buffer zones to prevent flicker
 * - Efficient range calculations
 *
 * @param options - Virtual scrolling configuration
 * @returns Object containing start and end indices of visible items
 *
 * @example
 * ```tsx
 * function VirtualList() {
 *   const containerRef = useRef<HTMLDivElement>(null);
 *   const { start, end } = useVirtual({
 *     totalLines: 1000,
 *     lineHeight: 30,
 *     containerRef,
 *     buffer: 5
 *   });
 *
 *   return (
 *     <div ref={containerRef} className="scroll-container">
 *       <div style={{ height: 1000 * 30 }}>
 *         {items.slice(start, end).map(item => (
 *           <div key={item.id} style={{ height: 30 }}>
 *             {item.content}
 *           </div>
 *         ))}
 *       </div>
 *     </div>
 *   );
 * }
 * ```
 */
export declare function useVirtual({ totalLines, lineHeight, containerRef, buffer, }: VirtualResult): {
    start: number;
    end: number;
};
export {};
